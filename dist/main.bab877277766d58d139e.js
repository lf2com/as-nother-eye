/*! For license information please see main.bab877277766d58d139e.js.LICENSE.txt */
(()=>{var e={184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var s in n)r.call(n,s)&&n[s]&&e.push(s)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},37:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".button_lCPh1{--float-width: 0.5em;--bg-color: #69f;--light-color: transparent;--shadow-color: rgba(0, 0, 0, 0.25);--color: #fff;padding:1em;border-radius:.5em;border-width:var(--float-width);border-style:solid;border-color:var(--light-color) var(--shadow-color) var(--shadow-color) var(--light-color);background-color:var(--bg-color);color:var(--color);display:inline-block}.button_lCPh1:active{border-color:var(--shadow-color) var(--light-color) var(--light-color) var(--shadow-color)}.button_lCPh1.disabled{background-color:#ccc}","",{version:3,sources:["webpack://./src/components/Button/styles.module.scss"],names:[],mappings:"AAAA,cACE,oBAAA,CACA,gBAAA,CACA,0BAAA,CACA,mCAAA,CACA,aAAA,CAEA,WAAA,CACA,kBAAA,CACA,+BAAA,CACA,kBAAA,CACA,0FAAA,CACA,gCAAA,CACA,kBAAA,CACA,oBAAA,CAEA,qBACE,0FAAA,CAGF,uBACE,qBAAA",sourcesContent:[".button {\n  --float-width: 0.5em;\n  --bg-color: #69f;\n  --light-color: transparent;\n  --shadow-color: rgba(0, 0, 0, 0.25);\n  --color: #fff;\n\n  padding: 1em;\n  border-radius: 0.5em;\n  border-width: var(--float-width);\n  border-style: solid;\n  border-color: var(--light-color) var(--shadow-color) var(--shadow-color) var(--light-color);\n  background-color: var(--bg-color);\n  color: var(--color);\n  display: inline-block;\n\n  &:active {\n    border-color: var(--shadow-color) var(--light-color) var(--light-color) var(--shadow-color);\n  }\n  \n  &:global(.disabled) {\n    background-color: #ccc;\n  }\n}\n"],sourceRoot:""}]),i.locals={button:"button_lCPh1"};const s=i},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".shutter_DAxR1{--size: 20vmin;--color: #fff;margin:1em;left:50%;padding:.5em;width:var(--size);height:var(--size);box-sizing:border-box;border-radius:50%;border:.2em solid var(--color);background-color:var(--color);background-clip:content-box;cursor:pointer}","",{version:3,sources:["webpack://./src/components/CameraShutter/styles.module.scss"],names:[],mappings:"AAAA,eACE,cAAA,CACA,aAAA,CAEA,UAAA,CACA,QAAA,CACA,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,qBAAA,CACA,iBAAA,CACA,8BAAA,CACA,6BAAA,CACA,2BAAA,CACA,cAAA",sourcesContent:[".shutter {\n  --size: 20vmin;\n  --color: #fff;\n\n  margin: 1em;\n  left: 50%;\n  padding: 0.5em;\n  width: var(--size);\n  height: var(--size);\n  box-sizing: border-box;\n  border-radius: 50%;\n  border: 0.2em solid var(--color);\n  background-color: var(--color);\n  background-clip: content-box;\n  cursor: pointer;\n}\n"],sourceRoot:""}]),i.locals={shutter:"shutter_DAxR1"};const s=i},211:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".clickable_kyy0V{user-select:none;background-color:rgba(0,0,0,0);z-index:1}.clickable_kyy0V.disabled{cursor:not-allowed}.clickable_kyy0V:not(.disabled):active{filter:brightness(0.9)}","",{version:3,sources:["webpack://./src/components/Clickable/styles.module.scss"],names:[],mappings:"AAAA,iBACE,gBAAA,CACA,8BAAA,CACA,SAAA,CAEA,0BACE,kBAAA,CAGF,uCACE,sBAAA",sourcesContent:[".clickable {\n  user-select: none;\n  background-color: rgba(0, 0, 0, 0);\n  z-index: 1;\n\n  &:global(.disabled) {\n    cursor: not-allowed;\n  }\n\n  &:not(:global(.disabled)):active {\n    filter: brightness(0.9);\n  }\n}\n"],sourceRoot:""}]),i.locals={clickable:"clickable_kyy0V"};const s=i},201:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".frame_410Fh{position:relative;width:100%;height:100%}","",{version:3,sources:["webpack://./src/components/Frame/styles.module.scss"],names:[],mappings:"AAAA,aACE,iBAAA,CACA,UAAA,CACA,WAAA",sourcesContent:[".frame {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n"],sourceRoot:""}]),i.locals={frame:"frame_410Fh"};const s=i},118:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".loading_cYO8g{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1000;background-color:rgba(0,0,0,0);font-size:1rem;display:flex;flex-flow:row;justify-content:center;align-items:center;transition:all .4s ease}.loading_cYO8g .message_I0j7s{width:100%;padding:1em;background-color:rgba(255,255,255,.85);display:flex;flex-flow:column;align-items:center;opacity:inherit;pointer-events:inherit;animation:anim-shining_LwrR6 .4s linear infinite}@keyframes anim-shining_LwrR6{0%,100%{color:inherit}50%{color:rgba(0,0,0,0)}}.loading_cYO8g.fullscreen_Lzl0k{position:fixed}.loading_cYO8g.highlight_efA_e{background-color:rgba(0,0,0,.5)}.loading_cYO8g.hide_IdkZW{opacity:0;pointer-events:none;backdrop-filter:blur(0.1rem);transition-delay:1s}.loading_cYO8g.hide_IdkZW .message_I0j7s{animation:none}","",{version:3,sources:["webpack://./src/components/Loading/styles.module.scss"],names:[],mappings:"AAAA,eACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,YAAA,CACA,8BAAA,CACA,cAAA,CACA,YAAA,CACA,aAAA,CACA,sBAAA,CACA,kBAAA,CACA,uBAAA,CAEA,8BACE,UAAA,CACA,WAAA,CACA,sCAAA,CACA,YAAA,CACA,gBAAA,CACA,kBAAA,CACA,eAAA,CACA,sBAAA,CACA,gDAAA,CAEA,8BACE,QACE,aAAA,CAGF,IACE,mBAAA,CAAA,CAKN,gCACE,cAAA,CAGF,+BACE,+BAAA,CAGF,0BACE,SAAA,CACA,mBAAA,CACA,4BAAA,CACA,mBAAA,CAEA,yCACE,cAAA",sourcesContent:[".loading {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  background-color: rgba(0, 0, 0, 0);\n  font-size: 1rem;\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.4s ease;\n\n  .message {\n    width: 100%;\n    padding: 1em;\n    background-color: rgba(255, 255, 255, 0.85);\n    display: flex;\n    flex-flow: column;\n    align-items: center;\n    opacity: inherit;\n    pointer-events: inherit;\n    animation: anim-shining 0.4s linear infinite;\n    \n    @keyframes anim-shining {\n      0%, 100% {\n        color: inherit;\n      }\n\n      50% {\n        color: transparent;\n      }\n    }\n  }\n\n  &.fullscreen {\n    position: fixed;\n  }\n\n  &.highlight {\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n\n  &.hide {\n    opacity: 0;\n    pointer-events: none;\n    backdrop-filter: blur(0.1rem);\n    transition-delay: 1s;\n\n    .message {\n      animation: none;\n    }\n  }\n}\n"],sourceRoot:""}]),i.locals={loading:"loading_cYO8g",message:"message_I0j7s","anim-shining":"anim-shining_LwrR6",fullscreen:"fullscreen_Lzl0k",highlight:"highlight_efA_e",hide:"hide_IdkZW"};const s=i},680:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".photo_XHC8N{width:100%;box-sizing:border-box;border:1px solid #fff;object-fit:contain}.photo_XHC8N.selected_aNtSZ{outline:.2em solid #69f}","",{version:3,sources:["webpack://./src/components/Modal/PhotoManagementModal/components/Photo/styles.module.scss"],names:[],mappings:"AAAA,aACE,UAAA,CACA,qBAAA,CACA,qBAAA,CACA,kBAAA,CAEA,4BACE,uBAAA",sourcesContent:[".photo {\n  width: 100%;\n  box-sizing: border-box;\n  border: 1px solid #fff;\n  object-fit: contain;\n\n  &.selected {\n    outline: 0.2em solid #69f;\n  }\n}\n"],sourceRoot:""}]),i.locals={photo:"photo_XHC8N",selected:"selected_aNtSZ"};const s=i},734:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".photo-management-modal_rZ0mK .modal-body{display:grid;grid-template-columns:repeat(3, 1fr);gap:.75em}","",{version:3,sources:["webpack://./src/components/Modal/PhotoManagementModal/styles.module.scss"],names:[],mappings:"AACE,0CACE,YAAA,CACA,oCAAA,CACA,SAAA",sourcesContent:[".photo-management-modal {\n  :global(.modal-body) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 0.75em;\n  }\n}\n"],sourceRoot:""}]),i.locals={"photo-management-modal":"photo-management-modal_rZ0mK"};const s=i},689:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".share-and-connect-modal_h4687 .modal-body{display:flex;flex-direction:column;gap:.5em}","",{version:3,sources:["webpack://./src/components/Modal/ShareAndConnectModal/styles.module.scss"],names:[],mappings:"AACE,2CACE,YAAA,CACA,qBAAA,CACA,QAAA",sourcesContent:[".share-and-connect-modal {\n  :global(.modal-body) {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5em;\n  }\n}\n"],sourceRoot:""}]),i.locals={"share-and-connect-modal":"share-and-connect-modal_h4687"};const s=i},861:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".button_WA80x{margin:0 1em;padding:.35em 1em;min-width:3em;max-width:100%;border-radius:.25em;border:.05em solid var(--theme-color);background-color:#fff;color:var(--theme-color);font-size:.95em;text-align:center;display:block;user-select:none}.button_WA80x.highlight_a1B9n{background-color:var(--theme-color);color:#fff}.button_WA80x.disabled{border-color:var(--disabled-color);color:var(--disabled-color)}.button_WA80x.disabled.highlight_a1B9n{background-color:var(--disabled-color);color:#fff}","",{version:3,sources:["webpack://./src/components/Modal/components/Button/styles.module.scss"],names:[],mappings:"AAAA,cACE,YAAA,CACA,iBAAA,CACA,aAAA,CACA,cAAA,CACA,mBAAA,CACA,qCAAA,CACA,qBAAA,CACA,wBAAA,CACA,eAAA,CACA,iBAAA,CACA,aAAA,CACA,gBAAA,CAEA,8BACE,mCAAA,CACA,UAAA,CAGF,uBACE,kCAAA,CACA,2BAAA,CAEA,uCACE,sCAAA,CACA,UAAA",sourcesContent:[".button {\n  margin: 0 1em;\n  padding: 0.35em 1em;\n  min-width: 3em;\n  max-width: 100%;\n  border-radius: 0.25em;\n  border: 0.05em solid var(--theme-color);\n  background-color: #fff;\n  color: var(--theme-color);\n  font-size: 0.95em;\n  text-align: center;\n  display: block;\n  user-select: none;\n\n  &.highlight {\n    background-color: var(--theme-color);\n    color: #fff;\n  }\n\n  &:global(.disabled) {\n    border-color: var(--disabled-color);\n    color: var(--disabled-color);\n\n    &.highlight {\n      background-color: var(--disabled-color);\n      color: #fff;\n    }\n  }\n}\n"],sourceRoot:""}]),i.locals={button:"button_WA80x",highlight:"highlight_a1B9n"};const s=i},389:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".modal_OqoNr{--theme-color: #36f;--disabled-color: #ccc;position:fixed;top:0;right:0;bottom:0;left:0;background-color:rgba(0,0,0,0);font-size:1rem;z-index:1000;display:flex;justify-content:center;align-items:center;pointer-events:none}.modal_OqoNr .box_ZxYtb{position:relative;transform:translateY(0.35em);top:-2em;margin:1em;max-height:80%;box-sizing:border-box;box-shadow:0 0 .5em rgba(0,0,0,.5);border-radius:.25em;background-color:#fff;display:flex;flex-flow:column;overflow:hidden;opacity:0;transition:top .25s ease-in-out,opacity .25s ease-in-out,transform .1s ease-in-out .25s}.modal_OqoNr .box_ZxYtb>*{padding:0 1em}.modal_OqoNr .head_ZY7As{padding:.5em 1em;background-color:var(--theme-color);color:#fff;font-weight:bold;text-align:center}.modal_OqoNr .head_ZY7As:empty{padding:0}.modal_OqoNr .body_E9s3u{padding:1em;text-align:center;overflow:auto;flex-grow:1;flex-shrink:1}.modal_OqoNr .body_E9s3u input{--blur-color: #999;--focus-color: #333;margin:0 .25em;padding:.25em .35em;outline:none;border-radius:.5em;border:1px solid var(--blur-color);color:var(--blur-color);font-size:1em;font-family:monospace}.modal_OqoNr .body_E9s3u input:hover,.modal_OqoNr .body_E9s3u input:focus{border-color:var(--focus-color)}.modal_OqoNr .body_E9s3u input:focus{color:var(--focus-color)}.modal_OqoNr .foot_Jd7OA{margin:1em 0;display:flex;flex-flow:row;justify-content:space-evenly}.modal_OqoNr .foot_Jd7OA:empty{margin:0}.modal_OqoNr.highlight_hg_qS{background-color:rgba(0,0,0,.5);backdrop-filter:brightness(0.75)}.modal_OqoNr.show_HHXta{opacity:1;pointer-events:all}.modal_OqoNr.show_HHXta>.box_ZxYtb{transform:translateY(0);top:0;opacity:1}","",{version:3,sources:["webpack://./src/components/Modal/styles.module.scss"],names:[],mappings:"AAAA,aACE,mBAAA,CACA,sBAAA,CAEA,cAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,8BAAA,CACA,cAAA,CACA,YAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,mBAAA,CAEA,wBAGE,iBAAA,CACA,4BAAA,CACA,QAAA,CACA,UAAA,CACA,cAAA,CACA,qBAAA,CACA,kCAAA,CACA,mBAAA,CACA,qBAAA,CACA,YAAA,CACA,gBAAA,CACA,eAAA,CACA,SAAA,CACA,uFACE,CAIF,0BACE,aAAA,CAIJ,yBACE,gBAAA,CACA,mCAAA,CACA,UAAA,CACA,gBAAA,CACA,iBAAA,CAEA,+BACE,SAAA,CAIJ,yBACE,WAAA,CACA,iBAAA,CACA,aAAA,CACA,WAAA,CACA,aAAA,CAEA,+BACE,kBAAA,CACA,mBAAA,CAEA,cAAA,CACA,mBAAA,CACA,YAAA,CACA,kBAAA,CACA,kCAAA,CACA,uBAAA,CACA,aAAA,CACA,qBAAA,CAEA,0EAEE,+BAAA,CAGF,qCACE,wBAAA,CAKN,yBACE,YAAA,CACA,YAAA,CACA,aAAA,CACA,4BAAA,CAEA,+BACE,QAAA,CAIJ,6BACE,+BAAA,CACA,gCAAA,CAGF,wBACE,SAAA,CACA,kBAAA,CAEA,mCACE,uBAAA,CACA,KAAA,CACA,SAAA",sourcesContent:[".modal {\n  --theme-color: #36f;\n  --disabled-color: #ccc;\n\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0);\n  font-size: 1rem;\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  pointer-events: none;\n\n  .box {\n    $dur: 0.25s;\n\n    position: relative;\n    transform: translateY(0.35em);\n    top: -2em;\n    margin: 1em;\n    max-height: 80%;\n    box-sizing: border-box;\n    box-shadow: 0 0 0.5em rgba(0, 0, 0, 0.5);\n    border-radius: 0.25em;\n    background-color: #fff;\n    display: flex;\n    flex-flow: column;\n    overflow: hidden;\n    opacity: 0;\n    transition:\n      top $dur ease-in-out,\n      opacity $dur ease-in-out,\n      transform 0.1s ease-in-out $dur;\n  \n    > * {\n      padding: 0 1em;\n    }\n  }\n\n  .head {\n    padding: 0.5em 1em;\n    background-color: var(--theme-color);\n    color: #fff;\n    font-weight: bold;\n    text-align: center;\n\n    &:empty {\n      padding: 0;\n    }\n  }\n\n  .body {\n    padding: 1em;\n    text-align: center;\n    overflow: auto;\n    flex-grow: 1;\n    flex-shrink: 1;\n\n    input {\n      --blur-color: #999;\n      --focus-color: #333;\n\n      margin: 0 0.25em;\n      padding: 0.25em 0.35em;\n      outline: none;\n      border-radius: 0.5em;\n      border: 1px solid var(--blur-color);\n      color: var(--blur-color);\n      font-size: 1em;\n      font-family: monospace;\n\n      &:hover,\n      &:focus {\n        border-color: var(--focus-color);\n      }\n\n      &:focus {\n        color: var(--focus-color);\n      }\n    }\n  }\n\n  .foot {\n    margin: 1em 0;\n    display: flex;\n    flex-flow: row;\n    justify-content: space-evenly;\n\n    &:empty {\n      margin: 0;\n    }\n  }\n\n  &.highlight {\n    background-color: rgba(0, 0, 0, 0.5);\n    backdrop-filter: brightness(0.75);\n  }\n\n  &.show {\n    opacity: 1;\n    pointer-events: all;\n\n    > .box {\n      transform: translateY(0);\n      top: 0;\n      opacity: 1;\n    }\n  }\n}\n"],sourceRoot:""}]),i.locals={modal:"modal_OqoNr",box:"box_ZxYtb",head:"head_ZY7As",body:"body_E9s3u",foot:"foot_Jd7OA",highlight:"highlight_hg_qS",show:"show_HHXta"};const s=i},630:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".photo_yh72h{position:absolute;top:0;right:0;bottom:0;left:0;outline:.2em solid #fff;opacity:0;pointer-events:none;z-index:1}.photo_yh72h img{width:100%}.photo_yh72h.loaded_awkjD{opacity:1;pointer-events:all;animation:anim-show_JS9Au .5s ease forwards;z-index:10}@keyframes anim-show_JS9Au{0%{transform:scale(0)}95%{transform:scale(1.25)}100%{transform:scale(1)}}","",{version:3,sources:["webpack://./src/components/PhotoList/components/Photo/styles.module.scss"],names:[],mappings:"AAAA,aACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,uBAAA,CACA,SAAA,CACA,mBAAA,CACA,SAAA,CAEA,iBACE,UAAA,CAGF,0BACE,SAAA,CACA,kBAAA,CACA,2CAAA,CACA,UAAA,CAEA,2BACE,GACE,kBAAA,CAGF,IACE,qBAAA,CAGF,KACE,kBAAA,CAAA",sourcesContent:[".photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  outline: 0.2em solid #fff;\n  opacity: 0;\n  pointer-events: none;\n  z-index: 1;\n\n  img {\n    width: 100%;\n  }\n\n  &.loaded {\n    opacity: 1;\n    pointer-events: all;\n    animation: anim-show 0.5s ease forwards;\n    z-index: 10;\n\n    @keyframes anim-show {\n      0% {\n        transform: scale(0);\n      }\n\n      95% {\n        transform: scale(1.25);\n      }\n\n      100% {\n        transform: scale(1);\n      }\n    }\n  }\n}\n"],sourceRoot:""}]),i.locals={photo:"photo_yh72h",loaded:"loaded_awkjD","anim-show":"anim-show_JS9Au"};const s=i},704:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".photo-list_jN46B{position:relative;padding-block-end:calc(100%/var(--aspect-ratio, 1));width:100%;height:0;box-sizing:border-box;font-size:1em;display:flex;flex-direction:column-reverse}","",{version:3,sources:["webpack://./src/components/PhotoList/styles.module.scss"],names:[],mappings:"AAAA,kBACE,iBAAA,CACA,mDAAA,CACA,UAAA,CACA,QAAA,CACA,qBAAA,CACA,aAAA,CACA,YAAA,CACA,6BAAA",sourcesContent:[".photo-list {\n  position: relative;\n  padding-block-end: calc(100% / var(--aspect-ratio, 1));\n  width: 100%;\n  height: 0;\n  box-sizing: border-box;\n  font-size: 1em;\n  display: flex;\n  flex-direction: column-reverse;\n}\n"],sourceRoot:""}]),i.locals={"photo-list":"photo-list_jN46B"};const s=i},110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".tag_ZoW_k{--shadow-color: #000;--font-color: #fff;position:absolute;top:0;left:0;padding:.5em;font-size:1rem;color:var(--font-color);text-shadow:0 1px 0 var(--shadow-color),0 -1px 0 var(--shadow-color),1px 0 0 var(--shadow-color),-1px 0 0 var(--shadow-color),1px 1px 0 var(--shadow-color),1px -1px 0 var(--shadow-color),-1px 1px 0 var(--shadow-color),-1px -1px 0 var(--shadow-color);z-index:1}","",{version:3,sources:["webpack://./src/components/Tag/styles.module.scss"],names:[],mappings:"AAAA,WACE,oBAAA,CACA,kBAAA,CAEA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,YAAA,CACA,cAAA,CACA,uBAAA,CACA,yPACE,CAQF,SAAA",sourcesContent:[".tag {\n  --shadow-color: #000;\n  --font-color: #fff;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 0.5em;\n  font-size: 1rem;\n  color: var(--font-color);\n  text-shadow:\n    0 1px 0 var(--shadow-color),\n    0 -1px 0 var(--shadow-color),\n    1px 0 0 var(--shadow-color),\n    -1px 0 0 var(--shadow-color),\n    1px 1px 0 var(--shadow-color),\n    1px -1px 0 var(--shadow-color),\n    -1px 1px 0 var(--shadow-color),\n    -1px -1px 0 var(--shadow-color);\n  z-index: 1;\n}\n"],sourceRoot:""}]),i.locals={tag:"tag_ZoW_k"};const s=i},728:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".video_aw9Jc{position:relative;width:100%;height:100%;box-sizing:border-box;background-color:#999;overflow:hidden}.video_aw9Jc video{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);height:100%;background-color:#999;pointer-events:none}.video_aw9Jc:not(.show_mjh03) video{display:none}","",{version:3,sources:["webpack://./src/components/Video/styles.module.scss"],names:[],mappings:"AAAA,aACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,qBAAA,CACA,eAAA,CAEA,mBACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,+BAAA,CACA,WAAA,CACA,qBAAA,CACA,mBAAA,CAGF,oCACE,YAAA",sourcesContent:[".video {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background-color: #999;\n  overflow: hidden;\n\n  video {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height: 100%;\n    background-color: #999;\n    pointer-events: none;\n  }\n\n  &:not(.show) video {\n    display: none;\n  }\n}\n"],sourceRoot:""}]),i.locals={video:"video_aw9Jc",show:"show_mjh03"};const s=i},726:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".message_tCmsh{margin-block-end:-1px;padding:.25em .5em;border:0 solid #eee;border-width:1px 0;background-color:rgba(0,0,0,0);color:#eee;font-size:.8rem;pointer-events:all}.message_tCmsh.debug_tyoXl{color:#ccc}.message_tCmsh.log_tQXvj{color:#eee}.message_tCmsh.info_BNgy_{border-color:#9cf;background-color:#bce;color:#03f}.message_tCmsh.warn_agxS4{border-color:#fec;background-color:#bce;color:#630}.message_tCmsh.error_Wvz4O{border-color:#fdd;background-color:#fee;color:red}","",{version:3,sources:["webpack://./src/contexts/LoggerContext/components/LogMessage/styles.module.scss"],names:[],mappings:"AAAA,eACE,qBAAA,CACA,kBAAA,CACA,mBAAA,CACA,kBAAA,CACA,8BAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CAEA,2BACE,UAAA,CAGF,yBACE,UAAA,CAGF,0BACE,iBAAA,CACA,qBAAA,CACA,UAAA,CAGF,0BACE,iBAAA,CACA,qBAAA,CACA,UAAA,CAGF,2BACE,iBAAA,CACA,qBAAA,CACA,SAAA",sourcesContent:[".message {\n  margin-block-end: -1px;\n  padding: 0.25em 0.5em;\n  border: 0 solid #eee;\n  border-width: 1px 0;\n  background-color: transparent;\n  color: #eee;\n  font-size: 0.8rem;\n  pointer-events: all;\n\n  &.debug {\n    color: #ccc;\n  }\n\n  &.log {\n    color: #eee;\n  }\n\n  &.info {\n    border-color: #9cf;\n    background-color: #bce;\n    color: #03f;\n  }\n\n  &.warn {\n    border-color: #fec;\n    background-color: #bce;\n    color: #630;\n  }\n\n  &.error {\n    border-color: #fdd;\n    background-color: #fee;\n    color: #f00;\n  }\n}\n"],sourceRoot:""}]),i.locals={message:"message_tCmsh",debug:"debug_tyoXl",log:"log_tQXvj",info:"info_BNgy_",warn:"warn_agxS4",error:"error_Wvz4O"};const s=i},735:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".logger_ulSSS{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1000;display:flex;flex-flow:column;justify-content:end;align-items:flex-end}.logger_ulSSS,.logger_ulSSS>*{opacity:0;pointer-events:none}.logger_ulSSS.show_Ja2KM{opacity:1}.logger_ulSSS.show_Ja2KM>*{pointer-events:all}","",{version:3,sources:["webpack://./src/contexts/LoggerContext/styles.module.scss"],names:[],mappings:"AAAA,cACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,YAAA,CACA,YAAA,CACA,gBAAA,CACA,mBAAA,CACA,oBAAA,CAEA,8BACE,SAAA,CACA,mBAAA,CAGF,yBACE,SAAA,CAEA,2BACE,kBAAA",sourcesContent:[".logger {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  display: flex;\n  flex-flow: column;\n  justify-content: end;\n  align-items: flex-end;\n\n  &, > * {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  &.show {\n    opacity: 1;\n\n    > * {\n      pointer-events: all;\n    }\n  }\n}\n"],sourceRoot:""}]),i.locals={logger:"logger_ulSSS",show:"show_Ja2KM"};const s=i},901:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'.camera_YrbkQ{position:relative;background-color:#000;font-size:1rem;display:grid;grid-template-areas:"major" "shutter";grid-template-rows:1fr auto}.camera_YrbkQ .major_LoXJQ{grid-area:major}.camera_YrbkQ .major_LoXJQ.taking-photo_VyCtl{animation:anim-shot_xNBoa .25s linear forwards}@keyframes anim-shot_xNBoa{0%{filter:contrast(0)}100%{filter:contrast(1)}}.camera_YrbkQ .minor_qVBjV{position:absolute;right:0;bottom:0;margin:.5em;max-width:30%;max-height:30%;border:1px solid #000}.camera_YrbkQ .shutter_twIpa{grid-area:shutter;justify-self:center}.camera_YrbkQ .photo-list_CG1Co{position:absolute;top:0;right:0;margin:.5em;width:30%;box-sizing:border-box}',"",{version:3,sources:["webpack://./src/pages/AsCamera/styles.module.scss"],names:[],mappings:"AAAA,cACE,iBAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,qCACE,CAEF,2BAAA,CAEA,2BACE,eAAA,CAEA,8CACE,8CAAA,CAEA,2BACE,GACE,kBAAA,CAGF,KACE,kBAAA,CAAA,CAMR,2BACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,WAAA,CACA,aAAA,CACA,cAAA,CACA,qBAAA,CAGF,6BACE,iBAAA,CACA,mBAAA,CAGF,gCACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,WAAA,CACA,SAAA,CACA,qBAAA",sourcesContent:[".camera {\n  position: relative;\n  background-color: #000;\n  font-size: 1rem;\n  display: grid;\n  grid-template-areas:\n    'major'\n    'shutter';\n  grid-template-rows: 1fr auto;\n\n  .major {\n    grid-area: major;\n\n    &.taking-photo {\n      animation: anim-shot 0.25s linear forwards;\n  \n      @keyframes anim-shot {\n        0% {\n          filter: contrast(0);\n        }\n\n        100% {\n          filter: contrast(1);\n        }\n      }\n    }\n  }\n\n  .minor {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    margin: 0.5em;\n    max-width: 30%;\n    max-height: 30%;\n    border: 1px solid #000;\n  }\n\n  .shutter {\n    grid-area: shutter;\n    justify-self: center;\n  }\n  \n  .photo-list {\n    position: absolute;\n    top: 0;\n    right: 0;\n    margin: 0.5em;\n    width: 30%;\n    box-sizing: border-box;\n  }\n}\n"],sourceRoot:""}]),i.locals={camera:"camera_YrbkQ",major:"major_LoXJQ","taking-photo":"taking-photo_VyCtl","anim-shot":"anim-shot_xNBoa",minor:"minor_qVBjV",shutter:"shutter_twIpa","photo-list":"photo-list_CG1Co"};const s=i},48:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'.photoer_FljKh{position:relative;background-color:#000;font-size:1rem;display:grid;grid-template-areas:"major" "shutter";grid-template-rows:1fr auto}.photoer_FljKh .major_h3TNG{grid-area:major}.photoer_FljKh .minor_easx5{position:absolute;right:0;bottom:0;margin:.5em;max-width:30%;max-height:30%;border:1px solid #000}.photoer_FljKh .shutter_jNuD6{grid-area:shutter;justify-self:center}.photoer_FljKh .photo-list_l6TXd{position:absolute;top:0;right:0;width:20%;box-sizing:border-box}',"",{version:3,sources:["webpack://./src/pages/AsPhotoer/styles.module.scss"],names:[],mappings:"AAAA,eACE,iBAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,qCACE,CAEF,2BAAA,CAEA,4BACE,eAAA,CAGF,4BACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,WAAA,CACA,aAAA,CACA,cAAA,CACA,qBAAA,CAGF,8BACE,iBAAA,CACA,mBAAA,CAGF,iCACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,SAAA,CACA,qBAAA",sourcesContent:[".photoer {\n  position: relative;\n  background-color: #000;\n  font-size: 1rem;\n  display: grid;\n  grid-template-areas:\n    'major'\n    'shutter';\n  grid-template-rows: 1fr auto;\n\n  .major {\n    grid-area: major;\n  }\n\n  .minor {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    margin: 0.5em;\n    max-width: 30%;\n    max-height: 30%;\n    border: 1px solid #000;\n  }\n\n  .shutter {\n    grid-area: shutter;\n    justify-self: center;\n  }\n\n  .photo-list {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 20%;\n    box-sizing: border-box;\n  }\n}\n"],sourceRoot:""}]),i.locals={photoer:"photoer_FljKh",major:"major_h3TNG",minor:"minor_easx5",shutter:"shutter_jNuD6","photo-list":"photo-list_l6TXd"};const s=i},641:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".welcome_ShRK6{width:100%;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;gap:1em}","",{version:3,sources:["webpack://./src/pages/Welcome/styles.module.scss"],names:[],mappings:"AAAA,eACE,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,OAAA",sourcesContent:[".welcome {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 1em;\n}\n"],sourceRoot:""}]),i.locals={welcome:"welcome_ShRK6"};const s=i},63:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'.camera-view_EkGoa{position:relative;background-color:#000;font-size:1rem;display:grid;grid-template-areas:"major" "shutter";grid-template-rows:1fr auto}.camera-view_EkGoa .major_WnKs1{grid-area:major}.camera-view_EkGoa .major_WnKs1.taking-photo_vEPHU{animation:anim-shot_uBzGX .25s linear forwards}@keyframes anim-shot_uBzGX{0%{filter:contrast(0)}100%{filter:contrast(1)}}.camera-view_EkGoa .minor_O2U8k{position:absolute;right:0;bottom:0;margin:.5em;max-width:30%;max-height:30%;border:1px solid #000}.camera-view_EkGoa .shutter_k1plG{grid-area:shutter;justify-self:center}.camera-view_EkGoa .photo-list_C7Hsl{position:absolute;top:0;right:0;width:20%;box-sizing:border-box}',"",{version:3,sources:["webpack://./src/pages/components/CameraView/styles.module.scss"],names:[],mappings:"AAAA,mBACE,iBAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,qCACE,CAEF,2BAAA,CAEA,gCACE,eAAA,CAEA,mDACE,8CAAA,CAEA,2BACE,GACE,kBAAA,CAGF,KACE,kBAAA,CAAA,CAMR,gCACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,WAAA,CACA,aAAA,CACA,cAAA,CACA,qBAAA,CAGF,kCACE,iBAAA,CACA,mBAAA,CAGF,qCACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,SAAA,CACA,qBAAA",sourcesContent:[".camera-view {\n  position: relative;\n  background-color: #000;\n  font-size: 1rem;\n  display: grid;\n  grid-template-areas:\n    'major'\n    'shutter';\n  grid-template-rows: 1fr auto;\n\n  .major {\n    grid-area: major;\n    \n    &.taking-photo {\n      animation: anim-shot 0.25s linear forwards;\n  \n      @keyframes anim-shot {\n        0% {\n          filter: contrast(0);\n        }\n\n        100% {\n          filter: contrast(1);\n        }\n      }\n    }\n  }\n\n  .minor {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    margin: 0.5em;\n    max-width: 30%;\n    max-height: 30%;\n    border: 1px solid #000;\n  }\n\n  .shutter {\n    grid-area: shutter;\n    justify-self: center;\n  }\n\n  .photo-list {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 20%;\n    box-sizing: border-box;\n  }\n}\n"],sourceRoot:""}]),i.locals={"camera-view":"camera-view_EkGoa",major:"major_WnKs1","taking-photo":"taking-photo_vEPHU","anim-shot":"anim-shot_uBzGX",minor:"minor_O2U8k",shutter:"shutter_k1plG","photo-list":"photo-list_C7Hsl"};const s=i},679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function c(e){return r.isMemo(e)?i:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var l=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=u(n);d&&(i=i.concat(d(n)));for(var s=c(t),m=c(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||m&&m[v]||s&&s[v])){var y=f(n,v);try{l(t,v,y)}catch(e){}}}}return t}},6:(e,t,n)=>{var r=n(220).MY,o=n(220).cx,a={unpack:function(e){return new i(e).unpack()},pack:function(e){var t=new s;return t.pack(e),t.getBuffer()}};function i(e){this.index=0,this.dataBuffer=e,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function s(){this.bufferBuilder=new r}function c(e){var t=e.charCodeAt(0);return t<=2047?"00":t<=65535?"000":t<=2097151?"0000":t<=67108863?"00000":"000000"}e.exports=a,i.prototype.unpack=function(){var e,t=this.unpack_uint8();if(t<128)return t;if((224^t)<32)return(224^t)-32;if((e=160^t)<=15)return this.unpack_raw(e);if((e=176^t)<=15)return this.unpack_string(e);if((e=144^t)<=15)return this.unpack_array(e);if((e=128^t)<=15)return this.unpack_map(e);switch(t){case 192:return null;case 193:case 212:case 213:case 214:case 215:return;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 216:return e=this.unpack_uint16(),this.unpack_string(e);case 217:return e=this.unpack_uint32(),this.unpack_string(e);case 218:return e=this.unpack_uint16(),this.unpack_raw(e);case 219:return e=this.unpack_uint32(),this.unpack_raw(e);case 220:return e=this.unpack_uint16(),this.unpack_array(e);case 221:return e=this.unpack_uint32(),this.unpack_array(e);case 222:return e=this.unpack_uint16(),this.unpack_map(e);case 223:return e=this.unpack_uint32(),this.unpack_map(e)}},i.prototype.unpack_uint8=function(){var e=255&this.dataView[this.index];return this.index++,e},i.prototype.unpack_uint16=function(){var e=this.read(2),t=256*(255&e[0])+(255&e[1]);return this.index+=2,t},i.prototype.unpack_uint32=function(){var e=this.read(4),t=256*(256*(256*e[0]+e[1])+e[2])+e[3];return this.index+=4,t},i.prototype.unpack_uint64=function(){var e=this.read(8),t=256*(256*(256*(256*(256*(256*(256*e[0]+e[1])+e[2])+e[3])+e[4])+e[5])+e[6])+e[7];return this.index+=8,t},i.prototype.unpack_int8=function(){var e=this.unpack_uint8();return e<128?e:e-256},i.prototype.unpack_int16=function(){var e=this.unpack_uint16();return e<32768?e:e-65536},i.prototype.unpack_int32=function(){var e=this.unpack_uint32();return e<Math.pow(2,31)?e:e-Math.pow(2,32)},i.prototype.unpack_int64=function(){var e=this.unpack_uint64();return e<Math.pow(2,63)?e:e-Math.pow(2,64)},i.prototype.unpack_raw=function(e){if(this.length<this.index+e)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+e+" "+this.length);var t=this.dataBuffer.slice(this.index,this.index+e);return this.index+=e,t},i.prototype.unpack_string=function(e){for(var t,n,r=this.read(e),o=0,a="";o<e;)(t=r[o])<128?(a+=String.fromCharCode(t),o++):(192^t)<32?(n=(192^t)<<6|63&r[o+1],a+=String.fromCharCode(n),o+=2):(n=(15&t)<<12|(63&r[o+1])<<6|63&r[o+2],a+=String.fromCharCode(n),o+=3);return this.index+=e,a},i.prototype.unpack_array=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=this.unpack();return t},i.prototype.unpack_map=function(e){for(var t={},n=0;n<e;n++){var r=this.unpack(),o=this.unpack();t[r]=o}return t},i.prototype.unpack_float=function(){var e=this.unpack_uint32(),t=(e>>23&255)-127;return(0==e>>31?1:-1)*(8388607&e|8388608)*Math.pow(2,t-23)},i.prototype.unpack_double=function(){var e=this.unpack_uint32(),t=this.unpack_uint32(),n=(e>>20&2047)-1023;return(0==e>>31?1:-1)*((1048575&e|1048576)*Math.pow(2,n-20)+t*Math.pow(2,n-52))},i.prototype.read=function(e){var t=this.index;if(t+e<=this.length)return this.dataView.subarray(t,t+e);throw new Error("BinaryPackFailure: read index out of range")},s.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},s.prototype.pack=function(e){var t=typeof e;if("string"===t)this.pack_string(e);else if("number"===t)Math.floor(e)===e?this.pack_integer(e):this.pack_double(e);else if("boolean"===t)!0===e?this.bufferBuilder.append(195):!1===e&&this.bufferBuilder.append(194);else if("undefined"===t)this.bufferBuilder.append(192);else{if("object"!==t)throw new Error('Type "'+t+'" not yet supported');if(null===e)this.bufferBuilder.append(192);else{var n=e.constructor;if(n==Array)this.pack_array(e);else if(n==Blob||n==File||e instanceof Blob||e instanceof File)this.pack_bin(e);else if(n==ArrayBuffer)o.useArrayBufferView?this.pack_bin(new Uint8Array(e)):this.pack_bin(e);else if("BYTES_PER_ELEMENT"in e)o.useArrayBufferView?this.pack_bin(new Uint8Array(e.buffer)):this.pack_bin(e.buffer);else if(n==Object||n.toString().startsWith("class"))this.pack_object(e);else if(n==Date)this.pack_string(e.toString());else{if("function"!=typeof e.toBinaryPack)throw new Error('Type "'+n.toString()+'" not yet supported');this.bufferBuilder.append(e.toBinaryPack())}}}this.bufferBuilder.flush()},s.prototype.pack_bin=function(e){var t=e.length||e.byteLength||e.size;if(t<=15)this.pack_uint8(160+t);else if(t<=65535)this.bufferBuilder.append(218),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(t)}this.bufferBuilder.append(e)},s.prototype.pack_string=function(e){var t=function(e){return e.length>600?new Blob([e]).size:e.replace(/[^\u0000-\u007F]/g,c).length}(e);if(t<=15)this.pack_uint8(176+t);else if(t<=65535)this.bufferBuilder.append(216),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(t)}this.bufferBuilder.append(e)},s.prototype.pack_array=function(e){var t=e.length;if(t<=15)this.pack_uint8(144+t);else if(t<=65535)this.bufferBuilder.append(220),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(t)}for(var n=0;n<t;n++)this.pack(e[n])},s.prototype.pack_integer=function(e){if(e>=-32&&e<=127)this.bufferBuilder.append(255&e);else if(e>=0&&e<=255)this.bufferBuilder.append(204),this.pack_uint8(e);else if(e>=-128&&e<=127)this.bufferBuilder.append(208),this.pack_int8(e);else if(e>=0&&e<=65535)this.bufferBuilder.append(205),this.pack_uint16(e);else if(e>=-32768&&e<=32767)this.bufferBuilder.append(209),this.pack_int16(e);else if(e>=0&&e<=4294967295)this.bufferBuilder.append(206),this.pack_uint32(e);else if(e>=-2147483648&&e<=2147483647)this.bufferBuilder.append(210),this.pack_int32(e);else if(e>=-0x8000000000000000&&e<=0x8000000000000000)this.bufferBuilder.append(211),this.pack_int64(e);else{if(!(e>=0&&e<=0x10000000000000000))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(e)}},s.prototype.pack_double=function(e){var t=0;e<0&&(t=1,e=-e);var n=Math.floor(Math.log(e)/Math.LN2),r=e/Math.pow(2,n)-1,o=Math.floor(r*Math.pow(2,52)),a=Math.pow(2,32),i=t<<31|n+1023<<20|o/a&1048575,s=o%a;this.bufferBuilder.append(203),this.pack_int32(i),this.pack_int32(s)},s.prototype.pack_object=function(e){var t=Object.keys(e).length;if(t<=15)this.pack_uint8(128+t);else if(t<=65535)this.bufferBuilder.append(222),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(t)}for(var n in e)e.hasOwnProperty(n)&&(this.pack(n),this.pack(e[n]))},s.prototype.pack_uint8=function(e){this.bufferBuilder.append(e)},s.prototype.pack_uint16=function(e){this.bufferBuilder.append(e>>8),this.bufferBuilder.append(255&e)},s.prototype.pack_uint32=function(e){var t=4294967295&e;this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t)},s.prototype.pack_uint64=function(e){var t=e/Math.pow(2,32),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)},s.prototype.pack_int8=function(e){this.bufferBuilder.append(255&e)},s.prototype.pack_int16=function(e){this.bufferBuilder.append((65280&e)>>8),this.bufferBuilder.append(255&e)},s.prototype.pack_int32=function(e){this.bufferBuilder.append(e>>>24&255),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e)},s.prototype.pack_int64=function(e){var t=Math.floor(e/Math.pow(2,32)),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)}},220:e=>{var t={};t.useBlobBuilder=function(){try{return new Blob([]),!1}catch(e){return!0}}(),t.useArrayBufferView=!t.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(e){return!0}}(),e.exports.cx=t;var n=e.exports.xE;function r(){this._pieces=[],this._parts=[]}"undefined"!=typeof window&&(n=e.exports.xE=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder),r.prototype.append=function(e){"number"==typeof e?this._pieces.push(e):(this.flush(),this._parts.push(e))},r.prototype.flush=function(){if(this._pieces.length>0){var e=new Uint8Array(this._pieces);t.useArrayBufferView||(e=e.buffer),this._parts.push(e),this._pieces=[]}},r.prototype.getBuffer=function(){if(this.flush(),t.useBlobBuilder){for(var e=new n,r=0,o=this._parts.length;r<o;r++)e.append(this._parts[r]);return e.getBlob()}return new Blob(this._parts)},e.exports.MY=r},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function c(e,t){l(e,t),l(e+"Capture",t)}function l(e,t){for(s[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),w=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),x=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),R=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var M=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var j,N=Object.assign;function B(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s]){var c="\n"+o[i].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=i&&0<=s);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function U(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case w:return"Portal";case _:return"Profiler";case S:return"StrictMode";case P:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case x:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case I:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return N({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){K(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function X(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return N({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ae(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var le,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((le=le||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=le.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=N({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,ke=null,Se=null;function _e(e){if(e=Ao(e)){if("function"!=typeof we)throw Error(a(280));var t=e.stateNode;t&&(t=wo(t),we(e.stateNode,e.type,t))}}function Ee(e){ke?Se?Se.push(e):Se=[e]:ke=e}function xe(){if(ke){var e=ke,t=Se;if(Se=ke=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Te(e,t){return e(t)}function Pe(){}var Re=!1;function Oe(e,t,n){if(Re)return e(t,n);Re=!0;try{return Te(e,t,n)}finally{Re=!1,(null!==ke||null!==Se)&&(Pe(),xe())}}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var r=wo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Me=!1;if(u)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Me=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ue){Me=!1}function De(e,t,n,r,o,a,i,s,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var je=!1,Ne=null,Be=!1,ze=null,Fe={onError:function(e){je=!0,Ne=e}};function Ue(e,t,n,r,o,a,i,s,c){je=!1,Ne=null,De.apply(Fe,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ge(e)!==e)throw Error(a(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return We(o),e;if(i===r)return We(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,c=o.child;c;){if(c===n){s=!0,n=o,r=i;break}if(c===r){s=!0,r=o,n=i;break}c=c.sibling}if(!s){for(c=i.child;c;){if(c===n){s=!0,n=i,r=o;break}if(c===r){s=!0,r=i,n=o;break}c=c.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ze=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ke=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Xe=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(st(e)/ct|0)|0},st=Math.log,ct=Math.LN2,lt=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var s=i&~o;0!==s?r=dt(s):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=lt;return 0==(4194240&(lt<<=1))&&(lt=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function At(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Ct,wt,kt,St,_t,Et=!1,xt=[],Tt=null,Pt=null,Rt=null,Ot=new Map,It=new Map,Mt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Rt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":It.delete(t.pointerId)}}function jt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=Ao(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Nt(e){var t=bo(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void _t(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Ao(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function zt(e,t,n){Bt(e)&&n.delete(t)}function Ft(){Et=!1,null!==Tt&&Bt(Tt)&&(Tt=null),null!==Pt&&Bt(Pt)&&(Pt=null),null!==Rt&&Bt(Rt)&&(Rt=null),Ot.forEach(zt),It.forEach(zt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Et||(Et=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Gt(e){function t(t){return Ut(t,e)}if(0<xt.length){Ut(xt[0],e);for(var n=1;n<xt.length;n++){var r=xt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Ut(Tt,e),null!==Pt&&Ut(Pt,e),null!==Rt&&Ut(Rt,e),Ot.forEach(t),It.forEach(t),n=0;n<Mt.length;n++)(r=Mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Mt.length&&null===(n=Mt[0]).blockedOn;)Nt(n),null===n.blockedOn&&Mt.shift()}var Vt=A.ReactCurrentBatchConfig,Wt=!0;function $t(e,t,n,r){var o=bt,a=Vt.transition;Vt.transition=null;try{bt=1,Zt(e,t,n,r)}finally{bt=o,Vt.transition=a}}function Ht(e,t,n,r){var o=bt,a=Vt.transition;Vt.transition=null;try{bt=4,Zt(e,t,n,r)}finally{bt=o,Vt.transition=a}}function Zt(e,t,n,r){if(Wt){var o=Yt(e,t,n,r);if(null===o)Wr(e,t,r,qt,n),Dt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Tt=jt(Tt,e,t,n,r,o),!0;case"dragenter":return Pt=jt(Pt,e,t,n,r,o),!0;case"mouseover":return Rt=jt(Rt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Ot.set(a,jt(Ot.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,It.set(a,jt(It.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==o;){var a=Ao(o);if(null!==a&&Ct(a),null===(a=Yt(e,t,n,r))&&Wr(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var qt=null;function Yt(e,t,n,r){if(qt=null,null!==(e=bo(e=Ce(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Xe:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Jt=null,Xt=null;function en(){if(Xt)return Xt;var e,t,n=Jt,r=n.length,o="value"in Kt?Kt.value:Kt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Xt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return N(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,cn,ln={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(ln),dn=N({},ln,{view:0,detail:0}),fn=on(dn),pn=N({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(an=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=an=0,cn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(pn),mn=on(N({},pn,{dataTransfer:0})),gn=on(N({},dn,{relatedTarget:0})),vn=on(N({},ln,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=N({},ln,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),An=on(N({},ln,{data:0})),Cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function _n(){return Sn}var En=N({},dn,{key:function(e){if(e.key){var t=Cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),xn=on(En),Tn=on(N({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=on(N({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Rn=on(N({},ln,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=N({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=on(On),Mn=[9,13,27,32],Ln=u&&"CompositionEvent"in window,Dn=null;u&&"documentMode"in document&&(Dn=document.documentMode);var jn=u&&"TextEvent"in window&&!Dn,Nn=u&&(!Ln||Dn&&8<Dn&&11>=Dn),Bn=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function $n(e,t,n,r){Ee(r),0<(t=Hr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Zn=null;function qn(e){Br(e,0)}function Yn(e){if(Z(Co(e)))return e}function Qn(e,t){if("change"===e)return t}var Kn=!1;if(u){var Jn;if(u){var Xn="oninput"in document;if(!Xn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xn="function"==typeof er.oninput}Jn=Xn}else Jn=!1;Kn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Zn=Hn=null)}function nr(e){if("value"===e.propertyName&&Yn(Zn)){var t=[];$n(t,Zn,e,Ce(e)),Oe(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Zn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Zn)}function ar(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!sr(e[o],t[o]))return!1}return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=ur(n,a);var i=ur(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&cr(yr,r)||(yr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Cr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Cr("Animation","AnimationEnd"),animationiteration:Cr("Animation","AnimationIteration"),animationstart:Cr("Animation","AnimationStart"),transitionend:Cr("Transition","TransitionEnd")},kr={},Sr={};function _r(e){if(kr[e])return kr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return kr[e]=n[t];return e}u&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var Er=_r("animationend"),xr=_r("animationiteration"),Tr=_r("animationstart"),Pr=_r("transitionend"),Rr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ir(e,t){Rr.set(e,t),c(t,[e])}for(var Mr=0;Mr<Or.length;Mr++){var Lr=Or[Mr];Ir(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Ir(Er,"onAnimationEnd"),Ir(xr,"onAnimationIteration"),Ir(Tr,"onAnimationStart"),Ir("dblclick","onDoubleClick"),Ir("focusin","onFocus"),Ir("focusout","onBlur"),Ir(Pr,"onTransitionEnd"),l("onMouseEnter",["mouseout","mouseover"]),l("onMouseLeave",["mouseout","mouseover"]),l("onPointerEnter",["pointerout","pointerover"]),l("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Nr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,c,l){if(Ue.apply(this,arguments),je){if(!je)throw Error(a(198));var u=Ne;je=!1,Ne=null,Be||(Be=!0,ze=u)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],c=s.instance,l=s.currentTarget;if(s=s.listener,c!==a&&o.isPropagationStopped())break e;Nr(o,s,l),a=c}else for(i=0;i<r.length;i++){if(c=(s=r[i]).instance,l=s.currentTarget,s=s.listener,c!==a&&o.isPropagationStopped())break e;Nr(o,s,l),a=c}}}if(Be)throw e=ze,Be=!1,ze=null,e}function zr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Vr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),Vr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Fr("selectionchange",!1,t))}}function Vr(e,t,n,r){switch(Qt(t)){case 1:var o=$t;break;case 4:o=Ht;break;default:o=Zt}n=o.bind(null,t,n,e),o=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===o||8===c.nodeType&&c.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=bo(s)))return;if(5===(c=i.tag)||6===c){r=a=i;continue e}s=s.parentNode}}r=r.return}Oe((function(){var r=a,o=Ce(n),i=[];e:{var s=Rr.get(e);if(void 0!==s){var c=un,l=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=xn;break;case"focusin":l="focus",c=gn;break;case"focusout":l="blur",c=gn;break;case"beforeblur":case"afterblur":c=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=Pn;break;case Er:case xr:case Tr:c=vn;break;case Pr:c=Rn;break;case"scroll":c=fn;break;case"wheel":c=In;break;case"copy":case"cut":case"paste":c=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=Tn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Ie(h,f))&&u.push($r(h,m,p))),d)break;h=h.return}0<u.length&&(s=new c(s,l,null,n,o),i.push({event:s,listeners:u}))}}if(0==(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ae||!(l=n.relatedTarget||n.fromElement)||!bo(l)&&!l[mo])&&(c||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,c?(c=r,null!==(l=(l=n.relatedTarget||n.toElement)?bo(l):null)&&(l!==(d=Ge(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(c=null,l=r),c!==l)){if(u=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=Tn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==c?s:Co(c),p=null==l?s:Co(l),(s=new u(m,h+"leave",c,n,o)).target=d,s.relatedTarget=p,m=null,bo(o)===r&&((u=new u(f,h+"enter",l,n,o)).target=p,u.relatedTarget=d,m=u),d=m,c&&l)e:{for(f=l,h=0,p=u=c;p;p=Zr(p))h++;for(p=0,m=f;m;m=Zr(m))p++;for(;0<h-p;)u=Zr(u),h--;for(;0<p-h;)f=Zr(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Zr(u),f=Zr(f)}u=null}else u=null;null!==c&&qr(i,s,c,u,!1),null!==l&&null!==d&&qr(i,d,l,u,!0)}if("select"===(c=(s=r?Co(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===c&&"file"===s.type)var g=Qn;else if(Wn(s))if(Kn)g=ir;else{g=or;var v=rr}else(c=s.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ar);switch(g&&(g=g(e,r))?$n(i,g,n,o):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ee(s,"number",s.value)),v=r?Co(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(i,n,o)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Gn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Nn&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gn&&(y=en()):(Jt="value"in(Kt=o)?Kt.value:Kt.textContent,Gn=!0)),0<(v=Hr(r,b)).length&&(b=new An(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,Bn);case"textInput":return(e=t.data)===Bn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!Ln&&Fn(e,t)?(e=en(),Xt=Jt=Kt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(o=new An("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Br(i,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ie(e,n))&&r.unshift($r(e,a,o)),null!=(a=Ie(e,t))&&r.push($r(e,a,o))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,c=s.alternate,l=s.stateNode;if(null!==c&&c===r)break;5===s.tag&&null!==l&&(s=l,o?null!=(c=Ie(n,a))&&i.unshift($r(n,c,s)):o||null!=(c=Ie(n,a))&&i.push($r(n,c,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Yr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Qr,"")}function Jr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(a(425))}function Xr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Gt(t)}function lo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function uo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,vo="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uo(e);null!==e;){if(n=e[po])return n;e=uo(e)}return t}n=(e=n).parentNode}return null}function Ao(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Co(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wo(e){return e[ho]||null}var ko=[],So=-1;function _o(e){return{current:e}}function Eo(e){0>So||(e.current=ko[So],ko[So]=null,So--)}function xo(e,t){So++,ko[So]=e.current,e.current=t}var To={},Po=_o(To),Ro=_o(!1),Oo=To;function Io(e,t){var n=e.type.contextTypes;if(!n)return To;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Mo(e){return null!=e.childContextTypes}function Lo(){Eo(Ro),Eo(Po)}function Do(e,t,n){if(Po.current!==To)throw Error(a(168));xo(Po,t),xo(Ro,n)}function jo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,V(e)||"Unknown",o));return N({},n,r)}function No(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||To,Oo=Po.current,xo(Po,e),xo(Ro,Ro.current),!0}function Bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=jo(e,t,Oo),r.__reactInternalMemoizedMergedChildContext=e,Eo(Ro),Eo(Po),xo(Po,e)):Eo(Ro),xo(Ro,n)}var zo=null,Fo=!1,Uo=!1;function Go(e){null===zo?zo=[e]:zo.push(e)}function Vo(){if(!Uo&&null!==zo){Uo=!0;var e=0,t=bt;try{var n=zo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Fo=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ze(Xe,Vo),t}finally{bt=t,Uo=!1}}return null}var Wo=[],$o=0,Ho=null,Zo=0,qo=[],Yo=0,Qo=null,Ko=1,Jo="";function Xo(e,t){Wo[$o++]=Zo,Wo[$o++]=Ho,Ho=e,Zo=t}function ea(e,t,n){qo[Yo++]=Ko,qo[Yo++]=Jo,qo[Yo++]=Qo,Qo=e;var r=Ko;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Ko=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Ko=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Xo(e,1),ea(e,1,0))}function na(e){for(;e===Ho;)Ho=Wo[--$o],Wo[$o]=null,Zo=Wo[--$o],Wo[$o]=null;for(;e===Qo;)Qo=qo[--Yo],qo[Yo]=null,Jo=qo[--Yo],qo[Yo]=null,Ko=qo[--Yo],qo[Yo]=null}var ra=null,oa=null,aa=!1,ia=null;function sa(e,t){var n=Ol(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=lo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Ko,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ol(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function la(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ua(e){if(aa){var t=oa;if(t){var n=t;if(!ca(e,t)){if(la(e))throw Error(a(418));t=lo(n.nextSibling);var r=ra;t&&ca(e,t)?sa(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function fa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(la(e))throw pa(),Error(a(418));for(;t;)sa(e,t),t=lo(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=lo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?lo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=lo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=A.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=N({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=_o(null),ba=null,Aa=null,Ca=null;function wa(){Ca=Aa=ba=null}function ka(e){var t=ya.current;Eo(ya),e._currentValue=t}function Sa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _a(e,t){ba=e,Ca=Aa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(As=!0),e.firstContext=null)}function Ea(e){var t=e._currentValue;if(Ca!==e)if(e={context:e,memoizedValue:t,next:null},null===Aa){if(null===ba)throw Error(a(308));Aa=e,ba.dependencies={lanes:0,firstContext:e}}else Aa=Aa.next=e;return t}var xa=null;function Ta(e){null===xa?xa=[e]:xa.push(e)}function Pa(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ta(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ra(e,r)}function Ra(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Oa=!1;function Ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ma(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function La(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Da(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tc)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ra(e,n)}return null===(o=r.interleaved)?(t.next=t,Ta(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ra(e,n)}function ja(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Na(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ba(e,t,n,r){var o=e.updateQueue;Oa=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var c=s,l=c.next;c.next=null,null===i?a=l:i.next=l,i=c;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===s?u.firstBaseUpdate=l:s.next=l,u.lastBaseUpdate=c)}if(null!==a){var d=o.baseState;for(i=0,u=l=c=null,s=a;;){var f=s.lane,p=s.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,m=s;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=N({},d,f);break e;case 2:Oa=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[s]:f.push(s))}else p={eventTime:p,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(l=u=p,c=d):u=u.next=p,i|=f;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(f=s).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===u&&(c=d),o.baseState=c,o.firstBaseUpdate=l,o.lastBaseUpdate=u,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);jc|=i,e.lanes=i,e.memoizedState=d}}function za(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Fa=(new r.Component).refs;function Ua(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:N({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=el(),o=tl(e),a=La(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Da(e,a,o))&&(nl(t,e,o,r),ja(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=el(),o=tl(e),a=La(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Da(e,a,o))&&(nl(t,e,o,r),ja(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=el(),r=tl(e),o=La(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Da(e,o,r))&&(nl(t,e,r,n),ja(t,e,r))}};function Va(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,a))}function Wa(e,t,n){var r=!1,o=To,a=t.contextType;return"object"==typeof a&&null!==a?a=Ea(a):(o=Mo(t)?Oo:Po.current,a=(r=null!=(r=t.contextTypes))?Io(e,o):To),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ga,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function $a(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ga.enqueueReplaceState(t,t.state,null)}function Ha(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fa,Ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ea(a):(a=Mo(t)?Oo:Po.current,o.context=Io(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ua(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ga.enqueueReplaceState(o,o.state,null),Ba(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Za(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Fa&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ya(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ml(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Nl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){var a=n.type;return a===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===I&&Ya(a)===t.type)?((r=o(t,n.props)).ref=Za(e,t,n),r.return=e,r):((r=Ll(n.type,n.key,n.props,null,e.mode,r)).ref=Za(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Dl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Nl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return(n=Ll(t.type,t.key,t.props,null,e.mode,n)).ref=Za(e,null,t),n.return=e,n;case w:return(t=Bl(t,e.mode,n)).return=e,t;case I:return f(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Dl(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case C:return n.key===o?l(e,t,n,r):null;case w:return n.key===o?u(e,t,n,r):null;case I:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||D(n))return null!==o?null:d(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o);case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case I:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||D(r))return d(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,s,c){for(var l=null,u=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(o,d,s[m],c);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(o,d),a=i(v,a,m),null===u?l=v:u.sibling=v,u=v,d=g}if(m===s.length)return n(o,d),aa&&Xo(o,m),l;if(null===d){for(;m<s.length;m++)null!==(d=f(o,s[m],c))&&(a=i(d,a,m),null===u?l=d:u.sibling=d,u=d);return aa&&Xo(o,m),l}for(d=r(o,d);m<s.length;m++)null!==(g=h(d,o,m,s[m],c))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===u?l=g:u.sibling=g,u=g);return e&&d.forEach((function(e){return t(o,e)})),aa&&Xo(o,m),l}function g(o,s,c,l){var u=D(c);if("function"!=typeof u)throw Error(a(150));if(null==(c=u.call(c)))throw Error(a(151));for(var d=u=null,m=s,g=s=0,v=null,y=c.next();null!==m&&!y.done;g++,y=c.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,l);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,g),null===d?u=b:d.sibling=b,d=b,m=v}if(y.done)return n(o,m),aa&&Xo(o,g),u;if(null===m){for(;!y.done;g++,y=c.next())null!==(y=f(o,y.value,l))&&(s=i(y,s,g),null===d?u=y:d.sibling=y,d=y);return aa&&Xo(o,g),u}for(m=r(o,m);!y.done;g++,y=c.next())null!==(y=h(m,o,g,y.value,l))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=i(y,s,g),null===d?u=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Xo(o,g),u}return function e(r,a,i,c){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case C:e:{for(var l=i.key,u=a;null!==u;){if(u.key===l){if((l=i.type)===k){if(7===u.tag){n(r,u.sibling),(a=o(u,i.props.children)).return=r,r=a;break e}}else if(u.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===I&&Ya(l)===u.type){n(r,u.sibling),(a=o(u,i.props)).ref=Za(r,u,i),a.return=r,r=a;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===k?((a=Dl(i.props.children,r.mode,c,i.key)).return=r,r=a):((c=Ll(i.type,i.key,i.props,null,r.mode,c)).ref=Za(r,a,i),c.return=r,r=c)}return s(r);case w:e:{for(u=i.key;null!==a;){if(a.key===u){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Bl(i,r.mode,c)).return=r,r=a}return s(r);case I:return e(r,a,(u=i._init)(i._payload),c)}if(te(i))return m(r,a,i,c);if(D(i))return g(r,a,i,c);qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Nl(i,r.mode,c)).return=r,r=a),s(r)):n(r,a)}}var Ka=Qa(!0),Ja=Qa(!1),Xa={},ei=_o(Xa),ti=_o(Xa),ni=_o(Xa);function ri(e){if(e===Xa)throw Error(a(174));return e}function oi(e,t){switch(xo(ni,t),xo(ti,e),xo(ei,Xa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Eo(ei),xo(ei,t)}function ai(){Eo(ei),Eo(ti),Eo(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ce(t,e.type);t!==n&&(xo(ti,e),xo(ei,n))}function si(e){ti.current===e&&(Eo(ei),Eo(ti))}var ci=_o(0);function li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ui=[];function di(){for(var e=0;e<ui.length;e++)ui[e]._workInProgressVersionPrimary=null;ui.length=0}var fi=A.ReactCurrentDispatcher,pi=A.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,vi=null,yi=!1,bi=!1,Ai=0,Ci=0;function wi(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Si(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ss:cs,e=n(r,o),bi){i=0;do{if(bi=!1,Ai=0,25<=i)throw Error(a(301));i+=1,vi=gi=null,t.updateQueue=null,fi.current=ls,e=n(r,o)}while(bi)}if(fi.current=is,t=null!==gi&&null!==gi.next,hi=0,vi=gi=mi=null,yi=!1,t)throw Error(a(300));return e}function _i(){var e=0!==Ai;return Ai=0,e}function Ei(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function xi(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Ti(e,t){return"function"==typeof t?t(e):t}function Pi(e){var t=xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var c=s=null,l=null,u=i;do{var d=u.lane;if((hi&d)===d)null!==l&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===l?(c=l=f,s=r):l=l.next=f,mi.lanes|=d,jc|=d}u=u.next}while(null!==u&&u!==i);null===l?s=r:l.next=c,sr(r,t.memoizedState)||(As=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=l,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,jc|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ri(e){var t=xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);sr(i,t.memoizedState)||(As=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Oi(){}function Ii(e,t){var n=mi,r=xi(),o=t(),i=!sr(r.memoizedState,o);if(i&&(r.memoizedState=o,As=!0),r=r.queue,Wi(Di.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,zi(9,Li.bind(null,n,r,o,t),void 0,null),null===Pc)throw Error(a(349));0!=(30&hi)||Mi(n,t,o)}return o}function Mi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Li(e,t,n,r){t.value=n,t.getSnapshot=r,ji(t)&&Ni(e)}function Di(e,t,n){return n((function(){ji(t)&&Ni(e)}))}function ji(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Ni(e){var t=Ra(e,1);null!==t&&nl(t,e,1,-1)}function Bi(e){var t=Ei();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ti,lastRenderedState:e},t.queue=e,e=e.dispatch=ns.bind(null,mi,e),[t.memoizedState,e]}function zi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Fi(){return xi().memoizedState}function Ui(e,t,n,r){var o=Ei();mi.flags|=e,o.memoizedState=zi(1|t,n,void 0,void 0===r?null:r)}function Gi(e,t,n,r){var o=xi();r=void 0===r?null:r;var a=void 0;if(null!==gi){var i=gi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=zi(t,n,a,r))}mi.flags|=e,o.memoizedState=zi(1|t,n,a,r)}function Vi(e,t){return Ui(8390656,8,e,t)}function Wi(e,t){return Gi(2048,8,e,t)}function $i(e,t){return Gi(4,2,e,t)}function Hi(e,t){return Gi(4,4,e,t)}function Zi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Gi(4,4,Zi.bind(null,t,e),n)}function Yi(){}function Qi(e,t){var n=xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ki(e,t){var n=xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,As=!0),e.memoizedState=n):(sr(n,t)||(n=mt(),mi.lanes|=n,jc|=n,e.baseState=!0),t)}function Xi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function es(){return xi().memoizedState}function ts(e,t,n){var r=tl(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(e)?os(t,n):null!==(n=Pa(e,t,n,r))&&(nl(n,e,r,el()),as(n,t,r))}function ns(e,t,n){var r=tl(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(e))os(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=a(i,n);if(o.hasEagerState=!0,o.eagerState=s,sr(s,i)){var c=t.interleaved;return null===c?(o.next=o,Ta(t)):(o.next=c.next,c.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Pa(e,t,o,r))&&(nl(n,e,r,o=el()),as(n,t,r))}}function rs(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function os(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function as(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var is={readContext:Ea,useCallback:wi,useContext:wi,useEffect:wi,useImperativeHandle:wi,useInsertionEffect:wi,useLayoutEffect:wi,useMemo:wi,useReducer:wi,useRef:wi,useState:wi,useDebugValue:wi,useDeferredValue:wi,useTransition:wi,useMutableSource:wi,useSyncExternalStore:wi,useId:wi,unstable_isNewReconciler:!1},ss={readContext:Ea,useCallback:function(e,t){return Ei().memoizedState=[e,void 0===t?null:t],e},useContext:Ea,useEffect:Vi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4194308,4,Zi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ui(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ui(4,2,e,t)},useMemo:function(e,t){var n=Ei();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ei();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ts.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ei().memoizedState=e},useState:Bi,useDebugValue:Yi,useDeferredValue:function(e){return Ei().memoizedState=e},useTransition:function(){var e=Bi(!1),t=e[0];return e=Xi.bind(null,e[1]),Ei().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Ei();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Pc)throw Error(a(349));0!=(30&hi)||Mi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Vi(Di.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Li.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ei(),t=Pc.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Ko&~(1<<32-it(Ko)-1)).toString(32)+n),0<(n=Ai++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ci++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cs={readContext:Ea,useCallback:Qi,useContext:Ea,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Hi,useMemo:Ki,useReducer:Pi,useRef:Fi,useState:function(){return Pi(Ti)},useDebugValue:Yi,useDeferredValue:function(e){return Ji(xi(),gi.memoizedState,e)},useTransition:function(){return[Pi(Ti)[0],xi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ii,useId:es,unstable_isNewReconciler:!1},ls={readContext:Ea,useCallback:Qi,useContext:Ea,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Hi,useMemo:Ki,useReducer:Ri,useRef:Fi,useState:function(){return Ri(Ti)},useDebugValue:Yi,useDeferredValue:function(e){var t=xi();return null===gi?t.memoizedState=e:Ji(t,gi.memoizedState,e)},useTransition:function(){return[Ri(Ti)[0],xi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ii,useId:es,unstable_isNewReconciler:!1};function us(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function ds(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=La(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wc||(Wc=!0,$c=r),fs(0,t)},n}function ms(e,t,n){(n=La(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fs(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Hc?Hc=new Set([this]):Hc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=_l.bind(null,e,t,n),t.then(e,e))}function vs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ys(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=La(-1,1)).tag=2,Da(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bs=A.ReactCurrentOwner,As=!1;function Cs(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Ka(t,e.child,n,r)}function ws(e,t,n,r,o){n=n.render;var a=t.ref;return _a(t,o),r=Si(e,t,n,r,a,o),n=_i(),null===e||As?(aa&&n&&ta(t),t.flags|=1,Cs(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Ws(e,t,o))}function ks(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Il(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ll(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ss(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(i,r)&&e.ref===t.ref)return Ws(e,t,o)}return t.flags|=1,(e=Ml(a,r)).ref=t.ref,e.return=t,t.child=e}function Ss(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(cr(a,r)&&e.ref===t.ref){if(As=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Ws(e,t,o);0!=(131072&e.flags)&&(As=!0)}}return xs(e,t,n,r,o)}function _s(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xo(Mc,Ic),Ic|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xo(Mc,Ic),Ic|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,xo(Mc,Ic),Ic|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,xo(Mc,Ic),Ic|=r;return Cs(e,t,o,n),t.child}function Es(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function xs(e,t,n,r,o){var a=Mo(n)?Oo:Po.current;return a=Io(t,a),_a(t,o),n=Si(e,t,n,r,a,o),r=_i(),null===e||As?(aa&&r&&ta(t),t.flags|=1,Cs(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Ws(e,t,o))}function Ts(e,t,n,r,o){if(Mo(n)){var a=!0;No(t)}else a=!1;if(_a(t,o),null===t.stateNode)Vs(e,t),Wa(t,n,r),Ha(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var c=i.context,l=n.contextType;l="object"==typeof l&&null!==l?Ea(l):Io(t,l=Mo(n)?Oo:Po.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||c!==l)&&$a(t,i,r,l),Oa=!1;var f=t.memoizedState;i.state=f,Ba(t,r,i,o),c=t.memoizedState,s!==r||f!==c||Ro.current||Oa?("function"==typeof u&&(Ua(t,n,u,r),c=t.memoizedState),(s=Oa||Va(t,n,s,r,f,c,l))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=l,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ma(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:va(t.type,s),i.props=l,d=t.pendingProps,f=i.context,c="object"==typeof(c=n.contextType)&&null!==c?Ea(c):Io(t,c=Mo(n)?Oo:Po.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||f!==c)&&$a(t,i,r,c),Oa=!1,f=t.memoizedState,i.state=f,Ba(t,r,i,o);var h=t.memoizedState;s!==d||f!==h||Ro.current||Oa?("function"==typeof p&&(Ua(t,n,p,r),h=t.memoizedState),(l=Oa||Va(t,n,l,r,f,h,c)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,c)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=c,r=l):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Ps(e,t,n,r,a,o)}function Ps(e,t,n,r,o,a){Es(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Bo(t,n,!1),Ws(e,t,a);r=t.stateNode,bs.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ka(t,e.child,null,a),t.child=Ka(t,null,s,a)):Cs(e,t,s,a),t.memoizedState=r.state,o&&Bo(t,n,!0),t.child}function Rs(e){var t=e.stateNode;t.pendingContext?Do(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Do(0,t.context,!1),oi(e,t.containerInfo)}function Os(e,t,n,r,o){return ha(),ma(o),t.flags|=256,Cs(e,t,n,r),t.child}var Is,Ms,Ls,Ds={dehydrated:null,treeContext:null,retryLane:0};function js(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ns(e,t,n){var r,o=t.pendingProps,i=ci.current,s=!1,c=0!=(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xo(ci,1&i),null===e)return ua(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(c=o.children,e=o.fallback,s?(o=t.mode,s=t.child,c={mode:"hidden",children:c},0==(1&o)&&null!==s?(s.childLanes=0,s.pendingProps=c):s=jl(c,o,0,null),e=Dl(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=js(n),t.memoizedState=Ds,e):Bs(t,c));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,s){if(n)return 256&t.flags?(t.flags&=-257,zs(e,t,s,r=ds(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=jl({mode:"visible",children:r.children},o,0,null),(i=Dl(i,o,s,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Ka(t,e.child,null,s),t.child.memoizedState=js(s),t.memoizedState=Ds,i);if(0==(1&t.mode))return zs(e,t,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var c=r.dgst;return r=c,zs(e,t,s,r=ds(i=Error(a(419)),r,void 0))}if(c=0!=(s&e.childLanes),As||c){if(null!==(r=Pc)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|s))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ra(e,o),nl(r,e,o,-1))}return ml(),zs(e,t,s,r=ds(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=xl.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=lo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(qo[Yo++]=Ko,qo[Yo++]=Jo,qo[Yo++]=Qo,Ko=e.id,Jo=e.overflow,Qo=t),(t=Bs(t,r.children)).flags|=4096,t)}(e,t,c,o,r,i,n);if(s){s=o.fallback,c=t.mode,r=(i=e.child).sibling;var l={mode:"hidden",children:o.children};return 0==(1&c)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=l,t.deletions=null):(o=Ml(i,l)).subtreeFlags=14680064&i.subtreeFlags,null!==r?s=Ml(r,s):(s=Dl(s,c,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,c=null===(c=e.child.memoizedState)?js(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},s.memoizedState=c,s.childLanes=e.childLanes&~n,t.memoizedState=Ds,o}return e=(s=e.child).sibling,o=Ml(s,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Bs(e,t){return(t=jl({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zs(e,t,n,r){return null!==r&&ma(r),Ka(t,e.child,null,n),(e=Bs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Sa(e.return,t,n)}function Us(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Gs(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Cs(e,t,r.children,n),0!=(2&(r=ci.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,n,t);else if(19===e.tag)Fs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xo(ci,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Us(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Us(t,!0,n,null,a);break;case"together":Us(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vs(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ws(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jc|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ml(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ml(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $s(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Zs(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hs(t),null;case 1:case 17:return Mo(t.type)&&Lo(),Hs(t),null;case 3:return r=t.stateNode,ai(),Eo(Ro),Eo(Po),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(il(ia),ia=null))),Hs(t),null;case 5:si(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ms(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Hs(t),null}if(e=ri(ei.current),fa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Dr.length;o++)zr(Dr[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Q(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":oe(r,i),zr("invalid",r)}for(var c in ye(n,i),o=null,i)if(i.hasOwnProperty(c)){var l=i[c];"children"===c?"string"==typeof l?r.textContent!==l&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,l,e),o=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,l,e),o=["children",""+l]):s.hasOwnProperty(c)&&null!=l&&"onScroll"===c&&zr("scroll",r)}switch(n){case"input":H(r),X(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Xr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[po]=t,e[ho]=r,Is(e,t),t.stateNode=e;e:{switch(c=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Dr.length;o++)zr(Dr[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":Q(e,r),o=Y(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=N({},r,{value:void 0}),zr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),zr("invalid",e)}for(i in ye(n,o),l=o)if(l.hasOwnProperty(i)){var u=l[i];"style"===i?ge(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=u&&"onScroll"===i&&zr("scroll",e):null!=u&&b(e,i,u,c))}switch(n){case"input":H(e),X(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hs(t),null;case 6:if(e&&null!=t.stateNode)Ls(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Hs(t),null;case 13:if(Eo(ci),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hs(t),i=!1}else null!==ia&&(il(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ci.current)?0===Lc&&(Lc=3):ml())),null!==t.updateQueue&&(t.flags|=4),Hs(t),null);case 4:return ai(),null===e&&Gr(t.stateNode.containerInfo),Hs(t),null;case 10:return ka(t.type._context),Hs(t),null;case 19:if(Eo(ci),null===(i=t.memoizedState))return Hs(t),null;if(r=0!=(128&t.flags),null===(c=i.rendering))if(r)$s(i,!1);else{if(0!==Lc||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(c=li(e))){for(t.flags|=128,$s(i,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xo(ci,1&ci.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>Gc&&(t.flags|=128,r=!0,$s(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=li(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$s(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!aa)return Hs(t),null}else 2*Ke()-i.renderingStartTime>Gc&&1073741824!==n&&(t.flags|=128,r=!0,$s(i,!1),t.lanes=4194304);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=ci.current,xo(ci,r?1&n|2:1&n),t):(Hs(t),null);case 22:case 23:return dl(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ic)&&(Hs(t),6&t.subtreeFlags&&(t.flags|=8192)):Hs(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function qs(e,t){switch(na(t),t.tag){case 1:return Mo(t.type)&&Lo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Eo(Ro),Eo(Po),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return si(t),null;case 13:if(Eo(ci),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Eo(ci),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return dl(),null;default:return null}}Is=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ms=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=Y(e,o),r=Y(e,r),i=[];break;case"select":o=N({},o,{value:void 0}),r=N({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(u in ye(n,r),n=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u){var c=o[u];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var l=r[u];if(c=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&l!==c&&(null!=l||null!=c))if("style"===u)if(c){for(a in c)!c.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&c[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(i||(i=[]),i.push(u,n)),n=l;else"dangerouslySetInnerHTML"===u?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(u,l)):"children"===u?"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(u,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=l&&"onScroll"===u&&zr("scroll",e),i||c===l||(i=[])):(i=i||[]).push(u,l))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},Ls=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ys=!1,Qs=!1,Ks="function"==typeof WeakSet?WeakSet:Set,Js=null;function Xs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sl(e,t,n)}else n.current=null}function ec(e,t,n){try{n()}catch(n){Sl(e,t,n)}}var tc=!1;function nc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&ec(t,n,a)}o=o.next}while(o!==r)}}function rc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function oc(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ac(e){var t=e.alternate;null!==t&&(e.alternate=null,ac(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[vo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ic(e){return 5===e.tag||3===e.tag||4===e.tag}function sc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ic(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(cc(e,t,n),e=e.sibling;null!==e;)cc(e,t,n),e=e.sibling}function lc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(lc(e,t,n),e=e.sibling;null!==e;)lc(e,t,n),e=e.sibling}var uc=null,dc=!1;function fc(e,t,n){for(n=n.child;null!==n;)pc(e,t,n),n=n.sibling}function pc(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Qs||Xs(n,t);case 6:var r=uc,o=dc;uc=null,fc(e,t,n),dc=o,null!==(uc=r)&&(dc?(e=uc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):uc.removeChild(n.stateNode));break;case 18:null!==uc&&(dc?(e=uc,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),Gt(e)):co(uc,n.stateNode));break;case 4:r=uc,o=dc,uc=n.stateNode.containerInfo,dc=!0,fc(e,t,n),uc=r,dc=o;break;case 0:case 11:case 14:case 15:if(!Qs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&ec(n,t,i),o=o.next}while(o!==r)}fc(e,t,n);break;case 1:if(!Qs&&(Xs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sl(n,t,e)}fc(e,t,n);break;case 21:fc(e,t,n);break;case 22:1&n.mode?(Qs=(r=Qs)||null!==n.memoizedState,fc(e,t,n),Qs=r):fc(e,t,n);break;default:fc(e,t,n)}}function hc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ks),t.forEach((function(t){var r=Tl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,s=t,c=s;e:for(;null!==c;){switch(c.tag){case 5:uc=c.stateNode,dc=!1;break e;case 3:case 4:uc=c.stateNode.containerInfo,dc=!0;break e}c=c.return}if(null===uc)throw Error(a(160));pc(i,s,o),uc=null,dc=!1;var l=o.alternate;null!==l&&(l.return=null),o.return=null}catch(e){Sl(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gc(t,e),t=t.sibling}function gc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mc(t,e),vc(e),4&r){try{nc(3,e,e.return),rc(3,e)}catch(t){Sl(e,e.return,t)}try{nc(5,e,e.return)}catch(t){Sl(e,e.return,t)}}break;case 1:mc(t,e),vc(e),512&r&&null!==n&&Xs(n,n.return);break;case 5:if(mc(t,e),vc(e),512&r&&null!==n&&Xs(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Sl(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,s=null!==n?n.memoizedProps:i,c=e.type,l=e.updateQueue;if(e.updateQueue=null,null!==l)try{"input"===c&&"radio"===i.type&&null!=i.name&&K(o,i),be(c,s);var u=be(c,i);for(s=0;s<l.length;s+=2){var d=l[s],f=l[s+1];"style"===d?ge(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,u)}switch(c){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Sl(e,e.return,t)}}break;case 6:if(mc(t,e),vc(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Sl(e,e.return,t)}}break;case 3:if(mc(t,e),vc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){Sl(e,e.return,t)}break;case 4:default:mc(t,e),vc(e);break;case 13:mc(t,e),vc(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Uc=Ke())),4&r&&hc(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Qs=(u=Qs)||d,mc(t,e),Qs=u):mc(t,e),vc(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&0!=(1&e.mode))for(Js=e,d=e.child;null!==d;){for(f=Js=d;null!==Js;){switch(h=(p=Js).child,p.tag){case 0:case 11:case 14:case 15:nc(4,p,p.return);break;case 1:Xs(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Sl(r,n,e)}}break;case 5:Xs(p,p.return);break;case 22:if(null!==p.memoizedState){Cc(f);continue}}null!==h?(h.return=p,Js=h):Cc(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,u?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(c=f.stateNode,s=null!=(l=f.memoizedProps.style)&&l.hasOwnProperty("display")?l.display:null,c.style.display=me("display",s))}catch(t){Sl(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){Sl(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:mc(t,e),vc(e),4&r&&hc(e);case 21:}}function vc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ic(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),lc(e,sc(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cc(e,sc(e),i);break;default:throw Error(a(161))}}catch(t){Sl(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yc(e,t,n){Js=e,bc(e,t,n)}function bc(e,t,n){for(var r=0!=(1&e.mode);null!==Js;){var o=Js,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Ys;if(!i){var s=o.alternate,c=null!==s&&null!==s.memoizedState||Qs;s=Ys;var l=Qs;if(Ys=i,(Qs=c)&&!l)for(Js=o;null!==Js;)c=(i=Js).child,22===i.tag&&null!==i.memoizedState?wc(o):null!==c?(c.return=i,Js=c):wc(o);for(;null!==a;)Js=a,bc(a,t,n),a=a.sibling;Js=o,Ys=s,Qs=l}Ac(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Js=a):Ac(e)}}function Ac(e){for(;null!==Js;){var t=Js;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Qs||rc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qs)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&za(t,i,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}za(t,s,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Gt(f)}}}break;default:throw Error(a(163))}Qs||512&t.flags&&oc(t)}catch(e){Sl(t,t.return,e)}}if(t===e){Js=null;break}if(null!==(n=t.sibling)){n.return=t.return,Js=n;break}Js=t.return}}function Cc(e){for(;null!==Js;){var t=Js;if(t===e){Js=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Js=n;break}Js=t.return}}function wc(e){for(;null!==Js;){var t=Js;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rc(4,t)}catch(e){Sl(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Sl(t,o,e)}}var a=t.return;try{oc(t)}catch(e){Sl(t,a,e)}break;case 5:var i=t.return;try{oc(t)}catch(e){Sl(t,i,e)}}}catch(e){Sl(t,t.return,e)}if(t===e){Js=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Js=s;break}Js=t.return}}var kc,Sc=Math.ceil,_c=A.ReactCurrentDispatcher,Ec=A.ReactCurrentOwner,xc=A.ReactCurrentBatchConfig,Tc=0,Pc=null,Rc=null,Oc=0,Ic=0,Mc=_o(0),Lc=0,Dc=null,jc=0,Nc=0,Bc=0,zc=null,Fc=null,Uc=0,Gc=1/0,Vc=null,Wc=!1,$c=null,Hc=null,Zc=!1,qc=null,Yc=0,Qc=0,Kc=null,Jc=-1,Xc=0;function el(){return 0!=(6&Tc)?Ke():-1!==Jc?Jc:Jc=Ke()}function tl(e){return 0==(1&e.mode)?1:0!=(2&Tc)&&0!==Oc?Oc&-Oc:null!==ga.transition?(0===Xc&&(Xc=mt()),Xc):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function nl(e,t,n,r){if(50<Qc)throw Qc=0,Kc=null,Error(a(185));vt(e,n,r),0!=(2&Tc)&&e===Pc||(e===Pc&&(0==(2&Tc)&&(Nc|=n),4===Lc&&sl(e,Oc)),rl(e,r),1===n&&0===Tc&&0==(1&t.mode)&&(Gc=Ke()+500,Fo&&Vo()))}function rl(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),s=1<<i,c=o[i];-1===c?0!=(s&n)&&0==(s&r)||(o[i]=pt(s,t)):c<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var r=ft(e,e===Pc?Oc:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Fo=!0,Go(e)}(cl.bind(null,e)):Go(cl.bind(null,e)),io((function(){0==(6&Tc)&&Vo()})),n=null;else{switch(At(r)){case 1:n=Xe;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pl(n,ol.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ol(e,t){if(Jc=-1,Xc=0,0!=(6&Tc))throw Error(a(327));var n=e.callbackNode;if(wl()&&e.callbackNode!==n)return null;var r=ft(e,e===Pc?Oc:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gl(e,r);else{t=r;var o=Tc;Tc|=2;var i=hl();for(Pc===e&&Oc===t||(Vc=null,Gc=Ke()+500,fl(e,t));;)try{yl();break}catch(t){pl(e,t)}wa(),_c.current=i,Tc=o,null!==Rc?t=0:(Pc=null,Oc=0,t=Lc)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=al(e,o)),1===t)throw n=Dc,fl(e,0),sl(e,r),rl(e,Ke()),n;if(6===t)sl(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!sr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=gl(e,r))&&0!==(i=ht(e))&&(r=i,t=al(e,i)),1===t))throw n=Dc,fl(e,0),sl(e,r),rl(e,Ke()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Cl(e,Fc,Vc);break;case 3:if(sl(e,r),(130023424&r)===r&&10<(t=Uc+500-Ke())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){el(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Cl.bind(null,e,Fc,Vc),t);break}Cl(e,Fc,Vc);break;case 4:if(sl(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-it(r);i=1<<s,(s=t[s])>o&&(o=s),r&=~i}if(r=o,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sc(r/1960))-r)){e.timeoutHandle=ro(Cl.bind(null,e,Fc,Vc),r);break}Cl(e,Fc,Vc);break;default:throw Error(a(329))}}}return rl(e,Ke()),e.callbackNode===n?ol.bind(null,e):null}function al(e,t){var n=zc;return e.current.memoizedState.isDehydrated&&(fl(e,t).flags|=256),2!==(e=gl(e,t))&&(t=Fc,Fc=n,null!==t&&il(t)),e}function il(e){null===Fc?Fc=e:Fc.push.apply(Fc,e)}function sl(e,t){for(t&=~Bc,t&=~Nc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cl(e){if(0!=(6&Tc))throw Error(a(327));wl();var t=ft(e,0);if(0==(1&t))return rl(e,Ke()),null;var n=gl(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=al(e,r))}if(1===n)throw n=Dc,fl(e,0),sl(e,t),rl(e,Ke()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cl(e,Fc,Vc),rl(e,Ke()),null}function ll(e,t){var n=Tc;Tc|=1;try{return e(t)}finally{0===(Tc=n)&&(Gc=Ke()+500,Fo&&Vo())}}function ul(e){null!==qc&&0===qc.tag&&0==(6&Tc)&&wl();var t=Tc;Tc|=1;var n=xc.transition,r=bt;try{if(xc.transition=null,bt=1,e)return e()}finally{bt=r,xc.transition=n,0==(6&(Tc=t))&&Vo()}}function dl(){Ic=Mc.current,Eo(Mc)}function fl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Rc)for(n=Rc.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Lo();break;case 3:ai(),Eo(Ro),Eo(Po),di();break;case 5:si(r);break;case 4:ai();break;case 13:case 19:Eo(ci);break;case 10:ka(r.type._context);break;case 22:case 23:dl()}n=n.return}if(Pc=e,Rc=e=Ml(e.current,null),Oc=Ic=t,Lc=0,Dc=null,Bc=Nc=jc=0,Fc=zc=null,null!==xa){for(t=0;t<xa.length;t++)if(null!==(r=(n=xa[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}xa=null}return e}function pl(e,t){for(;;){var n=Rc;try{if(wa(),fi.current=is,yi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yi=!1}if(hi=0,vi=gi=mi=null,bi=!1,Ai=0,Ec.current=null,null===n||null===n.return){Lc=1,Dc=t,Rc=null;break}e:{var i=e,s=n.return,c=n,l=t;if(t=Oc,c.flags|=32768,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l,d=c,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=vs(s);if(null!==h){h.flags&=-257,ys(h,s,c,0,t),1&h.mode&&gs(i,u,t),l=u;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(l),t.updateQueue=g}else m.add(l);break e}if(0==(1&t)){gs(i,u,t),ml();break e}l=Error(a(426))}else if(aa&&1&c.mode){var v=vs(s);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),ys(v,s,c,0,t),ma(us(l,c));break e}}i=l=us(l,c),4!==Lc&&(Lc=2),null===zc?zc=[i]:zc.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Na(i,hs(0,l,t));break e;case 1:c=l;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hc||!Hc.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Na(i,ms(i,c,t));break e}}i=i.return}while(null!==i)}Al(n)}catch(e){t=e,Rc===n&&null!==n&&(Rc=n=n.return);continue}break}}function hl(){var e=_c.current;return _c.current=is,null===e?is:e}function ml(){0!==Lc&&3!==Lc&&2!==Lc||(Lc=4),null===Pc||0==(268435455&jc)&&0==(268435455&Nc)||sl(Pc,Oc)}function gl(e,t){var n=Tc;Tc|=2;var r=hl();for(Pc===e&&Oc===t||(Vc=null,fl(e,t));;)try{vl();break}catch(t){pl(e,t)}if(wa(),Tc=n,_c.current=r,null!==Rc)throw Error(a(261));return Pc=null,Oc=0,Lc}function vl(){for(;null!==Rc;)bl(Rc)}function yl(){for(;null!==Rc&&!Ye();)bl(Rc)}function bl(e){var t=kc(e.alternate,e,Ic);e.memoizedProps=e.pendingProps,null===t?Al(e):Rc=t,Ec.current=null}function Al(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Zs(n,t,Ic)))return void(Rc=n)}else{if(null!==(n=qs(n,t)))return n.flags&=32767,void(Rc=n);if(null===e)return Lc=6,void(Rc=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Rc=t);Rc=t=e}while(null!==t);0===Lc&&(Lc=5)}function Cl(e,t,n){var r=bt,o=xc.transition;try{xc.transition=null,bt=1,function(e,t,n,r){do{wl()}while(null!==qc);if(0!=(6&Tc))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Pc&&(Rc=Pc=null,Oc=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Zc||(Zc=!0,Pl(tt,(function(){return wl(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=xc.transition,xc.transition=null;var s=bt;bt=1;var c=Tc;Tc|=4,Ec.current=null,function(e,t){if(eo=Wt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var s=0,c=-1,l=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(c=s+o),f!==i||0!==r&&3!==f.nodeType||(l=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===o&&(c=s),p===i&&++d===r&&(l=s),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===c||-1===l?null:{start:c,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Wt=!1,Js=t;null!==Js;)if(e=(t=Js).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Js=e;else for(;null!==Js;){t=Js;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:va(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(a(163))}}catch(e){Sl(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Js=e;break}Js=t.return}m=tc,tc=!1}(e,n),gc(n,e),hr(to),Wt=!!eo,to=eo=null,e.current=n,yc(n,e,o),Qe(),Tc=c,bt=s,xc.transition=i}else e.current=n;if(Zc&&(Zc=!1,qc=e,Yc=o),0===(i=e.pendingLanes)&&(Hc=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rl(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Wc)throw Wc=!1,e=$c,$c=null,e;0!=(1&Yc)&&0!==e.tag&&wl(),0!=(1&(i=e.pendingLanes))?e===Kc?Qc++:(Qc=0,Kc=e):Qc=0,Vo()}(e,t,n,r)}finally{xc.transition=o,bt=r}return null}function wl(){if(null!==qc){var e=At(Yc),t=xc.transition,n=bt;try{if(xc.transition=null,bt=16>e?16:e,null===qc)var r=!1;else{if(e=qc,qc=null,Yc=0,0!=(6&Tc))throw Error(a(331));var o=Tc;for(Tc|=4,Js=e.current;null!==Js;){var i=Js,s=i.child;if(0!=(16&Js.flags)){var c=i.deletions;if(null!==c){for(var l=0;l<c.length;l++){var u=c[l];for(Js=u;null!==Js;){var d=Js;switch(d.tag){case 0:case 11:case 15:nc(8,d,i)}var f=d.child;if(null!==f)f.return=d,Js=f;else for(;null!==Js;){var p=(d=Js).sibling,h=d.return;if(ac(d),d===u){Js=null;break}if(null!==p){p.return=h,Js=p;break}Js=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Js=i}}if(0!=(2064&i.subtreeFlags)&&null!==s)s.return=i,Js=s;else e:for(;null!==Js;){if(0!=(2048&(i=Js).flags))switch(i.tag){case 0:case 11:case 15:nc(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Js=y;break e}Js=i.return}}var b=e.current;for(Js=b;null!==Js;){var A=(s=Js).child;if(0!=(2064&s.subtreeFlags)&&null!==A)A.return=s,Js=A;else e:for(s=b;null!==Js;){if(0!=(2048&(c=Js).flags))try{switch(c.tag){case 0:case 11:case 15:rc(9,c)}}catch(e){Sl(c,c.return,e)}if(c===s){Js=null;break e}var C=c.sibling;if(null!==C){C.return=c.return,Js=C;break e}Js=c.return}}if(Tc=o,Vo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,xc.transition=t}}return!1}function kl(e,t,n){e=Da(e,t=hs(0,t=us(n,t),1),1),t=el(),null!==e&&(vt(e,1,t),rl(e,t))}function Sl(e,t,n){if(3===e.tag)kl(e,e,n);else for(;null!==t;){if(3===t.tag){kl(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hc||!Hc.has(r))){t=Da(t,e=ms(t,e=us(n,e),1),1),e=el(),null!==t&&(vt(t,1,e),rl(t,e));break}}t=t.return}}function _l(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=el(),e.pingedLanes|=e.suspendedLanes&n,Pc===e&&(Oc&n)===n&&(4===Lc||3===Lc&&(130023424&Oc)===Oc&&500>Ke()-Uc?fl(e,0):Bc|=n),rl(e,t)}function El(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=el();null!==(e=Ra(e,t))&&(vt(e,t,n),rl(e,n))}function xl(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),El(e,n)}function Tl(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),El(e,n)}function Pl(e,t){return Ze(e,t)}function Rl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ol(e,t,n,r){return new Rl(e,t,n,r)}function Il(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ml(e,t){var n=e.alternate;return null===n?((n=Ol(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ll(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Il(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return Dl(n.children,o,i,t);case S:s=8,o|=8;break;case _:return(e=Ol(12,n,t,2|o)).elementType=_,e.lanes=i,e;case P:return(e=Ol(13,n,t,o)).elementType=P,e.lanes=i,e;case R:return(e=Ol(19,n,t,o)).elementType=R,e.lanes=i,e;case M:return jl(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:s=10;break e;case x:s=9;break e;case T:s=11;break e;case O:s=14;break e;case I:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ol(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Dl(e,t,n,r){return(e=Ol(7,e,r,t)).lanes=n,e}function jl(e,t,n,r){return(e=Ol(22,e,r,t)).elementType=M,e.lanes=n,e.stateNode={isHidden:!1},e}function Nl(e,t,n){return(e=Ol(6,e,null,t)).lanes=n,e}function Bl(e,t,n){return(t=Ol(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zl(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fl(e,t,n,r,o,a,i,s,c){return e=new zl(e,t,n,s,c),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ol(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ia(a),e}function Ul(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gl(e){if(!e)return To;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Mo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Mo(n))return jo(e,n,t)}return t}function Vl(e,t,n,r,o,a,i,s,c){return(e=Fl(n,r,!0,e,0,a,0,s,c)).context=Gl(null),n=e.current,(a=La(r=el(),o=tl(n))).callback=null!=t?t:null,Da(n,a,o),e.current.lanes=o,vt(e,o,r),rl(e,r),e}function Wl(e,t,n,r){var o=t.current,a=el(),i=tl(o);return n=Gl(n),null===t.context?t.context=n:t.pendingContext=n,(t=La(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Da(o,t,i))&&(nl(e,o,i,a),ja(e,o,i)),i}function $l(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Zl(e,t){Hl(e,t),(e=e.alternate)&&Hl(e,t)}kc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ro.current)As=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return As=!1,function(e,t,n){switch(t.tag){case 3:Rs(t),ha();break;case 5:ii(t);break;case 1:Mo(t.type)&&No(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;xo(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xo(ci,1&ci.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ns(e,t,n):(xo(ci,1&ci.current),null!==(e=Ws(e,t,n))?e.sibling:null);xo(ci,1&ci.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Gs(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),xo(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,_s(e,t,n)}return Ws(e,t,n)}(e,t,n);As=0!=(131072&e.flags)}else As=!1,aa&&0!=(1048576&t.flags)&&ea(t,Zo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vs(e,t),e=t.pendingProps;var o=Io(t,Po.current);_a(t,n),o=Si(null,t,r,e,o,n);var i=_i();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Mo(r)?(i=!0,No(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ia(t),o.updater=Ga,t.stateNode=o,o._reactInternals=t,Ha(t,r,e,n),t=Ps(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Cs(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vs(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Il(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===O)return 14}return 2}(r),e=va(r,e),o){case 0:t=xs(null,t,r,e,n);break e;case 1:t=Ts(null,t,r,e,n);break e;case 11:t=ws(null,t,r,e,n);break e;case 14:t=ks(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,xs(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ts(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Rs(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ma(e,t),Ba(t,r,null,n);var s=t.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Os(e,t,r,n,o=us(Error(a(423)),t));break e}if(r!==o){t=Os(e,t,r,n,o=us(Error(a(424)),t));break e}for(oa=lo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Ws(e,t,n);break e}Cs(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,no(r,o)?s=null:null!==i&&no(r,i)&&(t.flags|=32),Es(e,t),Cs(e,t,s,n),t.child;case 6:return null===e&&ua(t),null;case 13:return Ns(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ka(t,null,r,n):Cs(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ws(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return Cs(e,t,t.pendingProps,n),t.child;case 8:case 12:return Cs(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,s=o.value,xo(ya,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===o.children&&!Ro.current){t=Ws(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){s=i.child;for(var l=c.firstContext;null!==l;){if(l.context===r){if(1===i.tag){(l=La(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?l.next=l:(l.next=d.next,d.next=l),u.pending=l}}i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),Sa(i.return,n,t),c.lanes|=n;break}l=l.next}}else if(10===i.tag)s=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(a(341));s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),Sa(s,n,t),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===t){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}Cs(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,_a(t,n),r=r(o=Ea(o)),t.flags|=1,Cs(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),ks(e,t,r,o=va(r.type,o),n);case 15:return Ss(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Vs(e,t),t.tag=1,Mo(r)?(e=!0,No(t)):e=!1,_a(t,n),Wa(t,r,o),Ha(t,r,o,n),Ps(null,t,r,!0,e,n);case 19:return Gs(e,t,n);case 22:return _s(e,t,n)}throw Error(a(156,t.tag))};var ql="function"==typeof reportError?reportError:function(e){console.error(e)};function Yl(e){this._internalRoot=e}function Ql(e){this._internalRoot=e}function Kl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xl(){}function eu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var s=o;o=function(){var e=$l(i);s.call(e)}}Wl(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=$l(i);a.call(e)}}var i=Vl(t,r,e,0,null,!1,0,"",Xl);return e._reactRootContainer=i,e[mo]=i.current,Gr(8===e.nodeType?e.parentNode:e),ul(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=$l(c);s.call(e)}}var c=Fl(e,0,!1,null,0,!1,0,"",Xl);return e._reactRootContainer=c,e[mo]=c.current,Gr(8===e.nodeType?e.parentNode:e),ul((function(){Wl(t,c,n,r)})),c}(n,t,e,o,r);return $l(i)}Ql.prototype.render=Yl.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Wl(e,t,null,null)},Ql.prototype.unmount=Yl.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ul((function(){Wl(null,e,null,null)})),t[mo]=null}},Ql.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mt.length&&0!==t&&t<Mt[n].priority;n++);Mt.splice(n,0,e),0===n&&Nt(e)}},Ct=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rl(t,Ke()),0==(6&Tc)&&(Gc=Ke()+500,Vo()))}break;case 13:ul((function(){var t=Ra(e,1);if(null!==t){var n=el();nl(t,e,1,n)}})),Zl(e,1)}},wt=function(e){if(13===e.tag){var t=Ra(e,134217728);null!==t&&nl(t,e,134217728,el()),Zl(e,134217728)}},kt=function(e){if(13===e.tag){var t=tl(e),n=Ra(e,t);null!==n&&nl(n,e,t,el()),Zl(e,t)}},St=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=wo(r);if(!o)throw Error(a(90));Z(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=ll,Pe=ul;var tu={usingClientEntryPoint:!1,Events:[Ao,Co,wo,Ee,xe,ll]},nu={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{ot=ou.inject(ru),at=ou}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kl(t))throw Error(a(200));return Ul(e,t,null,n)},t.createRoot=function(e,t){if(!Kl(e))throw Error(a(299));var n=!1,r="",o=ql;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fl(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Gr(8===e.nodeType?e.parentNode:e),new Yl(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return ul(e)},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kl(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",s=ql;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Vl(t,null,e,1,null!=n?n:null,o,0,i,s),e[mo]=t.current,Gr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ql(t)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(ul((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ll,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,c=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case a:case s:case i:case p:return e;default:switch(e=e&&e.$$typeof){case l:case f:case g:case m:case c:return e;default:return t}}case o:return t}}}function w(e){return C(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=c,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||C(e)===u},t.isConcurrentMode=w,t.isContextConsumer=function(e){return C(e)===l},t.isContextProvider=function(e){return C(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return C(e)===f},t.isFragment=function(e){return C(e)===a},t.isLazy=function(e){return C(e)===g},t.isMemo=function(e){return C(e)===m},t.isPortal=function(e){return C(e)===o},t.isProfiler=function(e){return C(e)===s},t.isStrictMode=function(e){return C(e)===i},t.isSuspense=function(e){return C(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===c||e.$$typeof===l||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===A||e.$$typeof===v)},t.typeOf=C},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),c=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var A=b.prototype=new y;A.constructor=b,m(A,v.prototype),A.isPureReactComponent=!0;var C=Array.isArray,w=Object.prototype.hasOwnProperty,k={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var o,a={},i=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];a.children=l}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:n,type:e,key:i,ref:s,props:a,_owner:k.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,o,a,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var c=!1;if(null===e)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return i=i(c=e),e=""===a?"."+T(c,0):a,C(i)?(o="",null!=e&&(o=e.replace(x,"$&/")+"/"),P(i,t,o,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(c=0,a=""===a?".":a+":",C(e))for(var l=0;l<e.length;l++){var u=a+T(s=e[l],l);c+=P(s,t,o,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),l=0;!(s=e.next()).done;)c+=P(s=s.value,t,o,u=a+T(s,l++),i);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function R(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var I={current:null},M={transition:null},L={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:M,ReactCurrentOwner:k};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)w.call(t,l)&&!S.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){c=Array(l);for(var u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return I.current.useCallback(e,t)},t.useContext=function(e){return I.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return I.current.useDeferredValue(e)},t.useEffect=function(e,t){return I.current.useEffect(e,t)},t.useId=function(){return I.current.useId()},t.useImperativeHandle=function(e,t,n){return I.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return I.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return I.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return I.current.useMemo(e,t)},t.useReducer=function(e,t,n){return I.current.useReducer(e,t,n)},t.useRef=function(e){return I.current.useRef(e)},t.useState=function(e){return I.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return I.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return I.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},539:(e,t,n)=>{"use strict";var r=n(882);function o(e,t,n,o,a){var i=r.writeRtpDescription(e.kind,t);if(i+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":a||"active"),i+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var s=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=s;var c="msid:"+(o?o.id:"-")+" "+s+"\r\n";i+="a="+c,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+c,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+c,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),i}function a(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},o=function(e,t,n,o){var a=r(e.parameters.apt,n),i=r(t.parameters.apt,o);return a&&i&&a.name.toLowerCase()===i.name.toLowerCase()};return e.codecs.forEach((function(r){for(var a=0;a<t.codecs.length;a++){var i=t.codecs[a];if(r.name.toLowerCase()===i.name.toLowerCase()&&r.clockRate===i.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&i.parameters.apt&&!o(r,i,e.codecs,t.codecs))continue;(i=JSON.parse(JSON.stringify(i))).numChannels=Math.min(r.numChannels,i.numChannels),n.codecs.push(i),i.rtcpFeedback=i.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var o=t.headerExtensions[r];if(e.uri===o.uri){n.headerExtensions.push(o);break}}})),n}function i(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function s(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function c(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function l(t,n,r,o){var a=new Event("track");a.track=n,a.receiver=r,a.transceiver={receiver:r},a.streams=o,e.setTimeout((function(){t._dispatchEvent("track",a)}))}var u=function(n){var o=this,a=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){o[e]=a[e].bind(a)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw c("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var o="string"==typeof r;return o&&(r=[r]),r=r.filter((function(e){return 0!==e.indexOf("turn:")||-1===e.indexOf("transport=udp")||-1!==e.indexOf("turn:[")||n?0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp"):(n=!0,!0)})),delete e.url,e.urls=o?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var i=n.iceCandidatePoolSize;i>0;i--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(u.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(u.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),u.prototype.onicecandidate=null,u.prototype.onaddstream=null,u.prototype.ontrack=null,u.prototype.onremovestream=null,u.prototype.onsignalingstatechange=null,u.prototype.oniceconnectionstatechange=null,u.prototype.onconnectionstatechange=null,u.prototype.onicegatheringstatechange=null,u.prototype.onnegotiationneeded=null,u.prototype.ondatachannel=null,u.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},u.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},u.prototype.getConfiguration=function(){return this._config},u.prototype.getLocalStreams=function(){return this.localStreams},u.prototype.getRemoteStreams=function(){return this.remoteStreams},u.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var o=this._createIceAndDtlsTransports();r.iceTransport=o.iceTransport,r.dtlsTransport=o.dtlsTransport}return t||this.transceivers.push(r),r},u.prototype.addTrack=function(t,n){if(this._isClosed)throw c("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw c("InvalidAccessError","Track already exists.");for(var o=0;o<this.transceivers.length;o++)this.transceivers[o].track||this.transceivers[o].kind!==t.kind||(r=this.transceivers[o]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},u.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},u.prototype.removeTrack=function(t){if(this._isClosed)throw c("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw c("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},u.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},u.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},u.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},u.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var o=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(o,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;o.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},o.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),o},u.prototype._gather=function(t,n){var o=this,a=this.transceivers[n].iceGatherer;if(!a.onlocalcandidate){var i=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,a.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),a.onlocalcandidate=function(e){if(!(o.usingBundle&&n>0)){var i=new Event("icecandidate");i.candidate={sdpMid:t,sdpMLineIndex:n};var s=e.candidate,c=!s||0===Object.keys(s).length;if(c)"new"!==a.state&&"gathering"!==a.state||(a.state="completed");else{"new"===a.state&&(a.state="gathering"),s.component=1,s.ufrag=a.getLocalParameters().usernameFragment;var l=r.writeCandidate(s);i.candidate=Object.assign(i.candidate,r.parseCandidate(l)),i.candidate.candidate=l,i.candidate.toJSON=function(){return{candidate:i.candidate.candidate,sdpMid:i.candidate.sdpMid,sdpMLineIndex:i.candidate.sdpMLineIndex,usernameFragment:i.candidate.usernameFragment}}}var u=r.getMediaSections(o._localDescription.sdp);u[i.candidate.sdpMLineIndex]+=c?"a=end-of-candidates\r\n":"a="+i.candidate.candidate+"\r\n",o._localDescription.sdp=r.getDescription(o._localDescription.sdp)+u.join("");var d=o.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==o.iceGatheringState&&(o.iceGatheringState="gathering",o._emitGatheringStateChange()),c||o._dispatchEvent("icecandidate",i),d&&(o._dispatchEvent("icecandidate",new Event("icecandidate")),o.iceGatheringState="complete",o._emitGatheringStateChange())}},e.setTimeout((function(){i.forEach((function(e){a.onlocalcandidate(e)}))}),0)}},u.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},u.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},u.prototype._transceive=function(e,n,o){var i=a(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(i.encodings=e.sendEncodingParameters,i.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(i.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(i)),o&&e.rtpReceiver&&i.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?i.encodings=e.recvEncodingParameters:i.encodings=[{}],i.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(i.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(i.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(i))},u.prototype.setLocalDescription=function(e){var t,n,o=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(c("TypeError",'Unsupported type "'+e.type+'"'));if(!i("setLocalDescription",e.type,o.signalingState)||o._isClosed)return Promise.reject(c("InvalidStateError","Can not set local "+e.type+" in state "+o.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);o.transceivers[t].localCapabilities=n})),o.transceivers.forEach((function(e,t){o._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(o._remoteDescription.sdp),n=t.shift();var s=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var i=o.transceivers[t],c=i.iceGatherer,l=i.iceTransport,u=i.dtlsTransport,d=i.localCapabilities,f=i.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length||i.rejected)){var p=r.getIceParameters(e,n),h=r.getDtlsParameters(e,n);s&&(h.role="server"),o.usingBundle&&0!==t||(o._gather(i.mid,t),"new"===l.state&&l.start(c,p,s?"controlling":"controlled"),"new"===u.state&&u.start(h));var m=a(d,f);o._transceive(i,m.codecs.length>0,!1)}}))}return o._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?o._updateSignalingState("have-local-offer"):o._updateSignalingState("stable"),Promise.resolve()},u.prototype.setRemoteDescription=function(o){var u=this;if(-1===["offer","answer"].indexOf(o.type))return Promise.reject(c("TypeError",'Unsupported type "'+o.type+'"'));if(!i("setRemoteDescription",o.type,u.signalingState)||u._isClosed)return Promise.reject(c("InvalidStateError","Can not set remote "+o.type+" in state "+u.signalingState));var d={};u.remoteStreams.forEach((function(e){d[e.id]=e}));var f=[],p=r.splitSections(o.sdp),h=p.shift(),m=r.matchPrefix(h,"a=ice-lite").length>0,g=r.matchPrefix(h,"a=group:BUNDLE ").length>0;u.usingBundle=g;var v=r.matchPrefix(h,"a=ice-options:")[0];return u.canTrickleIceCandidates=!!v&&v.substr(14).split(" ").indexOf("trickle")>=0,p.forEach((function(i,c){var l=r.splitLines(i),p=r.getKind(i),v=r.isRejected(i)&&0===r.matchPrefix(i,"a=bundle-only").length,y=l[0].substr(2).split(" ")[2],b=r.getDirection(i,h),A=r.parseMsid(i),C=r.getMid(i)||r.generateIdentifier();if(v||"application"===p&&("DTLS/SCTP"===y||"UDP/DTLS/SCTP"===y))u.transceivers[c]={mid:C,kind:p,protocol:y,rejected:!0};else{var w,k,S,_,E,x,T,P,R;!v&&u.transceivers[c]&&u.transceivers[c].rejected&&(u.transceivers[c]=u._createTransceiver(p,!0));var O,I,M=r.parseRtpParameters(i);v||(O=r.getIceParameters(i,h),(I=r.getDtlsParameters(i,h)).role="client"),T=r.parseRtpEncodingParameters(i);var L=r.parseRtcpParameters(i),D=r.matchPrefix(i,"a=end-of-candidates",h).length>0,j=r.matchPrefix(i,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===o.type||"answer"===o.type)&&!v&&g&&c>0&&u.transceivers[c]&&(u._disposeIceAndDtlsTransports(c),u.transceivers[c].iceGatherer=u.transceivers[0].iceGatherer,u.transceivers[c].iceTransport=u.transceivers[0].iceTransport,u.transceivers[c].dtlsTransport=u.transceivers[0].dtlsTransport,u.transceivers[c].rtpSender&&u.transceivers[c].rtpSender.setTransport(u.transceivers[0].dtlsTransport),u.transceivers[c].rtpReceiver&&u.transceivers[c].rtpReceiver.setTransport(u.transceivers[0].dtlsTransport)),"offer"!==o.type||v)"answer"!==o.type||v||(k=(w=u.transceivers[c]).iceGatherer,S=w.iceTransport,_=w.dtlsTransport,E=w.rtpReceiver,x=w.sendEncodingParameters,P=w.localCapabilities,u.transceivers[c].recvEncodingParameters=T,u.transceivers[c].remoteCapabilities=M,u.transceivers[c].rtcpParameters=L,j.length&&"new"===S.state&&(!m&&!D||g&&0!==c?j.forEach((function(e){s(w.iceTransport,e)})):S.setRemoteCandidates(j)),g&&0!==c||("new"===S.state&&S.start(k,O,"controlling"),"new"===_.state&&_.start(I)),!a(w.localCapabilities,w.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&w.sendEncodingParameters[0].rtx&&delete w.sendEncodingParameters[0].rtx,u._transceive(w,"sendrecv"===b||"recvonly"===b,"sendrecv"===b||"sendonly"===b),!E||"sendrecv"!==b&&"sendonly"!==b?delete w.rtpReceiver:(R=E.track,A?(d[A.stream]||(d[A.stream]=new e.MediaStream),n(R,d[A.stream]),f.push([R,E,d[A.stream]])):(d.default||(d.default=new e.MediaStream),n(R,d.default),f.push([R,E,d.default]))));else{(w=u.transceivers[c]||u._createTransceiver(p)).mid=C,w.iceGatherer||(w.iceGatherer=u._createIceGatherer(c,g)),j.length&&"new"===w.iceTransport.state&&(!D||g&&0!==c?j.forEach((function(e){s(w.iceTransport,e)})):w.iceTransport.setRemoteCandidates(j)),P=e.RTCRtpReceiver.getCapabilities(p),t<15019&&(P.codecs=P.codecs.filter((function(e){return"rtx"!==e.name}))),x=w.sendEncodingParameters||[{ssrc:1001*(2*c+2)}];var N,B=!1;"sendrecv"===b||"sendonly"===b?(B=!w.rtpReceiver,E=w.rtpReceiver||new e.RTCRtpReceiver(w.dtlsTransport,p),B&&(R=E.track,A&&"-"===A.stream||(A?(d[A.stream]||(d[A.stream]=new e.MediaStream,Object.defineProperty(d[A.stream],"id",{get:function(){return A.stream}})),Object.defineProperty(R,"id",{get:function(){return A.track}}),N=d[A.stream]):(d.default||(d.default=new e.MediaStream),N=d.default)),N&&(n(R,N),w.associatedRemoteMediaStreams.push(N)),f.push([R,E,N]))):w.rtpReceiver&&w.rtpReceiver.track&&(w.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===w.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),w.associatedRemoteMediaStreams=[]),w.localCapabilities=P,w.remoteCapabilities=M,w.rtpReceiver=E,w.rtcpParameters=L,w.sendEncodingParameters=x,w.recvEncodingParameters=T,u._transceive(u.transceivers[c],!1,B)}}})),void 0===u._dtlsRole&&(u._dtlsRole="offer"===o.type?"active":"passive"),u._remoteDescription={type:o.type,sdp:o.sdp},"offer"===o.type?u._updateSignalingState("have-remote-offer"):u._updateSignalingState("stable"),Object.keys(d).forEach((function(t){var n=d[t];if(n.getTracks().length){if(-1===u.remoteStreams.indexOf(n)){u.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){u._dispatchEvent("addstream",r)}))}f.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&l(u,t,r,[n])}))}})),f.forEach((function(e){e[2]||l(u,e[0],e[1],[])})),e.setTimeout((function(){u&&u.transceivers&&u.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},u.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},u.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},u.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},u.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},u.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},u.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createOffer after close"));var a=n.transceivers.filter((function(e){return"audio"===e.kind})).length,i=n.transceivers.filter((function(e){return"video"===e.kind})).length,s=arguments[0];if(s){if(s.mandatory||s.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==s.offerToReceiveAudio&&(a=!0===s.offerToReceiveAudio?1:!1===s.offerToReceiveAudio?0:s.offerToReceiveAudio),void 0!==s.offerToReceiveVideo&&(i=!0===s.offerToReceiveVideo?1:!1===s.offerToReceiveVideo?0:s.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--a<0&&(e.wantReceive=!1):"video"===e.kind&&--i<0&&(e.wantReceive=!1)}));a>0||i>0;)a>0&&(n._createTransceiver("audio"),a--),i>0&&(n._createTransceiver("video"),i--);var l=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(o,a){var i=o.track,s=o.kind,c=o.mid||r.generateIdentifier();o.mid=c,o.iceGatherer||(o.iceGatherer=n._createIceGatherer(a,n.usingBundle));var l=e.RTCRtpSender.getCapabilities(s);t<15019&&(l.codecs=l.codecs.filter((function(e){return"rtx"!==e.name}))),l.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),o.remoteCapabilities&&o.remoteCapabilities.codecs&&o.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),l.headerExtensions.forEach((function(e){(o.remoteCapabilities&&o.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var u=o.sendEncodingParameters||[{ssrc:1001*(2*a+1)}];i&&t>=15019&&"video"===s&&!u[0].rtx&&(u[0].rtx={ssrc:u[0].ssrc+1}),o.wantReceive&&(o.rtpReceiver=new e.RTCRtpReceiver(o.dtlsTransport,s)),o.localCapabilities=l,o.sendEncodingParameters=u})),"max-compat"!==n._config.bundlePolicy&&(l+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),l+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){l+=o(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),l+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,l+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(l+="a=end-of-candidates\r\n"))}));var u=new e.RTCSessionDescription({type:"offer",sdp:l});return Promise.resolve(u)},u.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(c("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var i=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(i+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),i+="a=ice-options:trickle\r\n";var s=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>s)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?i+="m=application 0 DTLS/SCTP 5000\r\n":i+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?i+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(i+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(i+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var c;e.stream&&("audio"===e.kind?c=e.stream.getAudioTracks()[0]:"video"===e.kind&&(c=e.stream.getVideoTracks()[0]),c&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1}));var l=a(e.localCapabilities,e.remoteCapabilities);!l.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,i+=o(e,l,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(i+="a=rtcp-rsize\r\n")}}));var l=new e.RTCSessionDescription({type:"answer",sdp:i});return Promise.resolve(l)},u.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(o,a){if(!n._remoteDescription)return a(c("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var i=e.sdpMLineIndex;if(e.sdpMid)for(var l=0;l<n.transceivers.length;l++)if(n.transceivers[l].mid===e.sdpMid){i=l;break}var u=n.transceivers[i];if(!u)return a(c("OperationError","Can not add ICE candidate"));if(u.rejected)return o();var d=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===d.protocol&&(0===d.port||9===d.port))return o();if(d.component&&1!==d.component)return o();if((0===i||i>0&&u.iceTransport!==n.transceivers[0].iceTransport)&&!s(u.iceTransport,d))return a(c("OperationError","Can not add ICE candidate"));var f=e.candidate.trim();0===f.indexOf("a=")&&(f=f.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[i]+="a="+(d.type?f:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var p=0;p<n.transceivers.length&&(n.transceivers[p].rejected||(n.transceivers[p].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[p]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));p++);o()}))},u.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw c("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))},["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var d=["createOffer","createAnswer"];return d.forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(d=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=u.prototype[e];u.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),u}},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var s=2*(r+1)-1,c=e[s],l=s+1,u=e[l];if(0>a(c,n))l<o&&0>a(u,c)?(e[r]=u,e[l]=n,r=l):(e[r]=c,e[s]=n,r=s);else{if(!(l<o&&0>a(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,c=s.now();t.unstable_now=function(){return s.now()-c}}var l=[],u=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(u);null!==t;){if(null===t.callback)o(u);else{if(!(t.startTime<=e))break;o(u),t.sortIndex=t.expirationTime,n(l,t)}t=r(u)}}function C(e){if(g=!1,A(e),!m)if(null!==r(l))m=!0,M(w);else{var t=r(u);null!==t&&L(C,t.startTime-e)}}function w(e,n){m=!1,g&&(g=!1,y(E),E=-1),h=!0;var a=p;try{for(A(n),f=r(l);null!==f&&(!(f.expirationTime>n)||e&&!P());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var s=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(l)&&o(l),A(n)}else o(l);f=r(l)}if(null!==f)var c=!0;else{var d=r(u);null!==d&&L(C,d.startTime-n),c=!1}return c}finally{f=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,S=!1,_=null,E=-1,x=5,T=-1;function P(){return!(t.unstable_now()-T<x)}function R(){if(null!==_){var e=t.unstable_now();T=e;var n=!0;try{n=_(!0,e)}finally{n?k():(S=!1,_=null)}}else S=!1}if("function"==typeof b)k=function(){b(R)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,I=O.port2;O.port1.onmessage=R,k=function(){I.postMessage(null)}}else k=function(){v(R,0)};function M(e){_=e,S||(S=!0,k())}function L(e,n){E=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,M(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(l)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>i?(e.sortIndex=a,n(u,e),null===r(l)&&e===r(u)&&(g?(y(E),E=-1):g=!0,L(C,a-i))):(e.sortIndex=s,n(l,e),m||h||(m=!0,M(w))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},882:e=>{"use strict";var t={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};t.localCName=t.generateIdentifier(),t.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},t.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},t.getDescription=function(e){var n=t.splitSections(e);return n&&n[0]},t.getMediaSections=function(e){var n=t.splitSections(e);return n.shift(),n},t.matchPrefix=function(e,n){return t.splitLines(e).filter((function(e){return 0===e.indexOf(n)}))},t.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},t.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},t.parseIceOptions=function(e){return e.substr(14).split(" ")},t.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},t.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},t.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},t.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},t.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),o=0;o<r.length;o++)n[(t=r[o].trim().split("="))[0].trim()]=t[1];return n},t.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},t.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},t.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},t.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},t.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},t.getMid=function(e){var n=t.matchPrefix(e,"a=mid:")[0];if(n)return n.substr(6)},t.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},t.getDtlsParameters=function(e,n){return{role:"auto",fingerprints:t.matchPrefix(e+n,"a=fingerprint:").map(t.parseFingerprint)}},t.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},t.parseCryptoLine=function(e){var t=e.substr(9).split(" ");return{tag:parseInt(t[0],10),cryptoSuite:t[1],keyParams:t[2],sessionParams:t.slice(3)}},t.writeCryptoLine=function(e){return"a=crypto:"+e.tag+" "+e.cryptoSuite+" "+("object"==typeof e.keyParams?t.writeCryptoKeyParams(e.keyParams):e.keyParams)+(e.sessionParams?" "+e.sessionParams.join(" "):"")+"\r\n"},t.parseCryptoKeyParams=function(e){if(0!==e.indexOf("inline:"))return null;var t=e.substr(7).split("|");return{keyMethod:"inline",keySalt:t[0],lifeTime:t[1],mkiValue:t[2]?t[2].split(":")[0]:void 0,mkiLength:t[2]?t[2].split(":")[1]:void 0}},t.writeCryptoKeyParams=function(e){return e.keyMethod+":"+e.keySalt+(e.lifeTime?"|"+e.lifeTime:"")+(e.mkiValue&&e.mkiLength?"|"+e.mkiValue+":"+e.mkiLength:"")},t.getCryptoParameters=function(e,n){return t.matchPrefix(e+n,"a=crypto:").map(t.parseCryptoLine)},t.getIceParameters=function(e,n){var r=t.matchPrefix(e+n,"a=ice-ufrag:")[0],o=t.matchPrefix(e+n,"a=ice-pwd:")[0];return r&&o?{usernameFragment:r.substr(12),password:o.substr(10)}:null},t.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},t.parseRtpParameters=function(e){for(var n={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},r=t.splitLines(e)[0].split(" "),o=3;o<r.length;o++){var a=r[o],i=t.matchPrefix(e,"a=rtpmap:"+a+" ")[0];if(i){var s=t.parseRtpMap(i),c=t.matchPrefix(e,"a=fmtp:"+a+" ");switch(s.parameters=c.length?t.parseFmtp(c[0]):{},s.rtcpFeedback=t.matchPrefix(e,"a=rtcp-fb:"+a+" ").map(t.parseRtcpFb),n.codecs.push(s),s.name.toUpperCase()){case"RED":case"ULPFEC":n.fecMechanisms.push(s.name.toUpperCase())}}}return t.matchPrefix(e,"a=extmap:").forEach((function(e){n.headerExtensions.push(t.parseExtmap(e))})),n},t.writeRtpDescription=function(e,n){var r="";r+="m="+e+" ",r+=n.codecs.length>0?"9":"0",r+=" UDP/TLS/RTP/SAVPF ",r+=n.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",r+="c=IN IP4 0.0.0.0\r\n",r+="a=rtcp:9 IN IP4 0.0.0.0\r\n",n.codecs.forEach((function(e){r+=t.writeRtpMap(e),r+=t.writeFmtp(e),r+=t.writeRtcpFb(e)}));var o=0;return n.codecs.forEach((function(e){e.maxptime>o&&(o=e.maxptime)})),o>0&&(r+="a=maxptime:"+o+"\r\n"),r+="a=rtcp-mux\r\n",n.headerExtensions&&n.headerExtensions.forEach((function(e){r+=t.writeExtmap(e)})),r},t.parseRtpEncodingParameters=function(e){var n,r=[],o=t.parseRtpParameters(e),a=-1!==o.fecMechanisms.indexOf("RED"),i=-1!==o.fecMechanisms.indexOf("ULPFEC"),s=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),c=s.length>0&&s[0].ssrc,l=t.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));l.length>0&&l[0].length>1&&l[0][0]===c&&(n=l[0][1]),o.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var t={ssrc:c,codecPayloadType:parseInt(e.parameters.apt,10)};c&&n&&(t.rtx={ssrc:n}),r.push(t),a&&((t=JSON.parse(JSON.stringify(t))).fec={ssrc:c,mechanism:i?"red+ulpfec":"red"},r.push(t))}})),0===r.length&&c&&r.push({ssrc:c});var u=t.matchPrefix(e,"b=");return u.length&&(u=0===u[0].indexOf("b=TIAS:")?parseInt(u[0].substr(7),10):0===u[0].indexOf("b=AS:")?1e3*parseInt(u[0].substr(5),10)*.95-16e3:void 0,r.forEach((function(e){e.maxBitrate=u}))),r},t.parseRtcpParameters=function(e){var n={},r=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];r&&(n.cname=r.value,n.ssrc=r.ssrc);var o=t.matchPrefix(e,"a=rtcp-rsize");n.reducedSize=o.length>0,n.compound=0===o.length;var a=t.matchPrefix(e,"a=rtcp-mux");return n.mux=a.length>0,n},t.parseMsid=function(e){var n,r=t.matchPrefix(e,"a=msid:");if(1===r.length)return{stream:(n=r[0].substr(7).split(" "))[0],track:n[1]};var o=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return o.length>0?{stream:(n=o[0].value.split(" "))[0],track:n[1]}:void 0},t.parseSctpDescription=function(e){var n,r=t.parseMLine(e),o=t.matchPrefix(e,"a=max-message-size:");o.length>0&&(n=parseInt(o[0].substr(19),10)),isNaN(n)&&(n=65536);var a=t.matchPrefix(e,"a=sctp-port:");if(a.length>0)return{port:parseInt(a[0].substr(12),10),protocol:r.fmt,maxMessageSize:n};if(t.matchPrefix(e,"a=sctpmap:").length>0){var i=t.matchPrefix(e,"a=sctpmap:")[0].substr(10).split(" ");return{port:parseInt(i[0],10),protocol:i[1],maxMessageSize:n}}},t.writeSctpDescription=function(e,t){var n=[];return n="DTLS/SCTP"!==e.protocol?["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctp-port:"+t.port+"\r\n"]:["m="+e.kind+" 9 "+e.protocol+" "+t.port+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctpmap:"+t.port+" "+t.protocol+" 65535\r\n"],void 0!==t.maxMessageSize&&n.push("a=max-message-size:"+t.maxMessageSize+"\r\n"),n.join("")},t.generateSessionId=function(){return Math.random().toString().substr(2,21)},t.writeSessionBoilerplate=function(e,n,r){var o=void 0!==n?n:2;return"v=0\r\no="+(r||"thisisadapterortc")+" "+(e||t.generateSessionId())+" "+o+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},t.writeMediaSection=function(e,n,r,o){var a=t.writeRtpDescription(e.kind,n);if(a+=t.writeIceParameters(e.iceGatherer.getLocalParameters()),a+=t.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===r?"actpass":"active"),a+="a=mid:"+e.mid+"\r\n",e.direction?a+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?a+="a=sendrecv\r\n":e.rtpSender?a+="a=sendonly\r\n":e.rtpReceiver?a+="a=recvonly\r\n":a+="a=inactive\r\n",e.rtpSender){var i="msid:"+o.id+" "+e.rtpSender.track.id+"\r\n";a+="a="+i,a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+i,e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+i,a+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+t.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+t.localCName+"\r\n"),a},t.getDirection=function(e,n){for(var r=t.splitLines(e),o=0;o<r.length;o++)switch(r[o]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return r[o].substr(2)}return n?t.getDirection(n):"sendrecv"},t.getKind=function(e){return t.splitLines(e)[0].split(" ")[0].substr(2)},t.isRejected=function(e){return"0"===e.split(" ",2)[1]},t.parseMLine=function(e){var n=t.splitLines(e)[0].substr(2).split(" ");return{kind:n[0],port:parseInt(n[1],10),protocol:n[2],fmt:n.slice(3).join(" ")}},t.parseOLine=function(e){var n=t.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:n[0],sessionId:n[1],sessionVersion:parseInt(n[2],10),netType:n[3],addressType:n[4],address:n[5]}},t.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var n=t.splitLines(e),r=0;r<n.length;r++)if(n[r].length<2||"="!==n[r].charAt(1))return!1;return!0},e.exports=t},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),c=0;c<a.length;c++){var l=a[c];if(!s(l))return!1;var u=e[l],d=t[l];if(!1===(o=n?n.call(r,u,d,l):void 0)||void 0===o&&u!==d)return!1}return!0}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var f=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=r(e,o),l=0;l<a.length;l++){var u=n(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},61:(e,t,n)=>{var r=n(698).default;function o(){"use strict";e.exports=o=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},n=Object.prototype,a=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},s=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function d(e,t,n,r){var o=t&&t.prototype instanceof h?t:h,a=Object.create(o.prototype),i=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=k(i,n);if(s){if(s===p)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var c=f(e,t,n);if("normal"===c.type){if(r=n.done?"completed":"suspendedYield",c.arg===p)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r="completed",n.method="throw",n.arg=c.arg)}}}(e,n,i),a}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=d;var p={};function h(){}function m(){}function g(){}var v={};u(v,s,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(x([])));b&&b!==n&&a.call(b,s)&&(v=b);var A=g.prototype=h.prototype=Object.create(v);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function n(o,i,s,c){var l=f(e[o],e,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==r(d)&&a.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,s,c)}),(function(e){n("throw",e,s,c)})):t.resolve(d).then((function(e){u.value=e,s(u)}),(function(e){return n("throw",e,s,c)}))}c(l.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function k(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method))return p;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var r=f(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,p;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function x(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(a.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:T}}function T(){return{value:void 0,done:!0}}return m.prototype=g,u(A,"constructor",g),u(g,"constructor",m),m.displayName=u(g,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u(e,l,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(w.prototype),u(w.prototype,c,(function(){return this})),t.AsyncIterator=w,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new w(d(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,l,"Generator"),u(A,s,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=x,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&a.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],i=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=a.call(o,"catchLoc"),c=a.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&a.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:x(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},t}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},698:e=>{function t(n){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},687:(e,t,n)=>{var r=n(61)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{"use strict";var e={};n.r(e),n.d(e,{fixNegotiationNeeded:()=>Wt,shimAddTrackRemoveTrack:()=>Gt,shimAddTrackRemoveTrackWithNative:()=>Ut,shimGetDisplayMedia:()=>Dt,shimGetSendersWithDtmf:()=>Bt,shimGetStats:()=>zt,shimGetUserMedia:()=>Lt,shimMediaStream:()=>jt,shimOnTrack:()=>Nt,shimPeerConnection:()=>Vt,shimSenderReceiverGetStats:()=>Ft});var t={};n.r(t),n.d(t,{shimGetDisplayMedia:()=>qt,shimGetUserMedia:()=>Zt,shimPeerConnection:()=>Yt,shimReplaceTrack:()=>Qt});var r={};n.r(r),n.d(r,{shimAddTransceiver:()=>an,shimCreateAnswer:()=>ln,shimCreateOffer:()=>cn,shimGetDisplayMedia:()=>Jt,shimGetParameters:()=>sn,shimGetUserMedia:()=>Kt,shimOnTrack:()=>Xt,shimPeerConnection:()=>en,shimRTCDataChannel:()=>on,shimReceiverGetStats:()=>nn,shimRemoveStream:()=>rn,shimSenderGetStats:()=>tn});var o={};n.r(o),n.d(o,{shimAudioContext:()=>yn,shimCallbacksAPI:()=>fn,shimConstraints:()=>hn,shimCreateOfferLegacy:()=>vn,shimGetUserMedia:()=>pn,shimLocalStreamsAPI:()=>un,shimRTCIceServerUrls:()=>mn,shimRemoteStreamsAPI:()=>dn,shimTrackEventTransceiver:()=>gn});var a={};function i(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}n.r(a),n.d(a,{removeExtmapAllowMixed:()=>_n,shimAddIceCandidateNullOrEmpty:()=>En,shimConnectionState:()=>Sn,shimMaxMessageSize:()=>wn,shimRTCIceCandidate:()=>Cn,shimSendThrowTypeError:()=>kn});var s,c=n(294),l=n(745);function u(){return u=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(s||(s={}));var d="beforeunload";function f(e){e.preventDefault(),e.returnValue=""}function p(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function h(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const m=(0,c.createContext)(null),g=(0,c.createContext)(null),v=(0,c.createContext)({outlet:null,matches:[]});function y(e,t){if(!e)throw new Error(t)}function b(e,t,n){void 0===n&&(n="/");let r=E(("string"==typeof t?h(t):t).pathname||"/",n);if(null==r)return null;let o=A(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=S(o[e],r);return a}function A(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(r)||y(!1),a.relativePath=a.relativePath.slice(r.length));let i=x([r,a.relativePath]),s=n.concat(a);e.children&&e.children.length>0&&(!0===e.index&&y(!1),A(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:k(i,e.index),routesMeta:s})})),t}const C=/^:\w+$/,w=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(w)&&(r+=-2),t&&(r+=2),n.filter((e=>!w(e))).reduce(((e,t)=>e+(C.test(t)?3:""===t?1:10)),r)}function S(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],s=e===n.length-1,c="/"===o?t:t.slice(o.length)||"/",l=_({path:i.relativePath,caseSensitive:i.caseSensitive,end:s},c);if(!l)return null;Object.assign(r,l.params);let u=i.route;a.push({params:r,pathname:x([o,l.pathname]),pathnameBase:T(x([o,l.pathnameBase])),route:u}),"/"!==l.pathnameBase&&(o=x([o,l.pathnameBase]))}return a}function _(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),s=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=s[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(s[n]||""),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function E(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const x=e=>e.join("/").replace(/\/\/+/g,"/"),T=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),P=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",R=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function O(){return null!=(0,c.useContext)(g)}function I(){return O()||y(!1),(0,c.useContext)(g).location}function M(){O()||y(!1);let{basename:e,navigator:t}=(0,c.useContext)(m),{matches:n}=(0,c.useContext)(v),{pathname:r}=I(),o=JSON.stringify(n.map((e=>e.pathnameBase))),a=(0,c.useRef)(!1);(0,c.useEffect)((()=>{a.current=!0}));let i=(0,c.useCallback)((function(n,i){if(void 0===i&&(i={}),!a.current)return;if("number"==typeof n)return void t.go(n);let s=function(e,t,n){let r,o="string"==typeof e?h(e):e,a=""===e||""===o.pathname?"/":o.pathname;if(null==a)r=n;else{let e=t.length-1;if(a.startsWith("..")){let t=a.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}r=e>=0?t[e]:"/"}let i=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?h(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:P(r),hash:R(o)}}(o,r);return a&&"/"!==a&&a.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}(n,JSON.parse(o),r);"/"!==e&&(s.pathname=x([e,s.pathname])),(i.replace?t.replace:t.push)(s,i.state)}),[e,t,o,r]);return i}function L(){let{matches:e}=(0,c.useContext)(v),t=e[e.length-1];return t?t.params:{}}function D(e){y(!1)}function j(e){let{basename:t="/",children:n=null,location:r,navigationType:o=s.Pop,navigator:a,static:i=!1}=e;O()&&y(!1);let l=T(t),u=(0,c.useMemo)((()=>({basename:l,navigator:a,static:i})),[l,a,i]);"string"==typeof r&&(r=h(r));let{pathname:d="/",search:f="",hash:p="",state:v=null,key:b="default"}=r,A=(0,c.useMemo)((()=>{let e=E(d,l);return null==e?null:{pathname:e,search:f,hash:p,state:v,key:b}}),[l,d,f,p,v,b]);return null==A?null:(0,c.createElement)(m.Provider,{value:u},(0,c.createElement)(g.Provider,{children:n,value:{location:A,navigationType:o}}))}function N(e){let{children:t,location:n}=e;return function(e,t){O()||y(!1);let{matches:n}=(0,c.useContext)(v),r=n[n.length-1],o=r?r.params:{},a=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let i,s=I();if(t){var l;let e="string"==typeof t?h(t):t;"/"===a||(null==(l=e.pathname)?void 0:l.startsWith(a))||y(!1),i=e}else i=s;let u=i.pathname||"/",d=b(e,{pathname:"/"===a?u:u.slice(a.length)||"/"});return function(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,r,o)=>(0,c.createElement)(v.Provider,{children:void 0!==r.route.element?r.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,o+1))}})),null)}(d&&d.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:x([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:x([a,e.pathnameBase])}))),n)}(B(t),n)}function B(e){let t=[];return c.Children.forEach(e,(e=>{if(!(0,c.isValidElement)(e))return;if(e.type===c.Fragment)return void t.push.apply(t,B(e.props.children));e.type!==D&&y(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=B(e.props.children)),t.push(n)})),t}function z(e){let{basename:t,children:n,window:r}=e,o=(0,c.useRef)();null==o.current&&(o.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,r=n.history;function o(){var e=n.location,t=e.pathname,o=e.search,a=e.hash,i=r.state||{};return[i.idx,{pathname:t,search:o,hash:a,state:i.usr||null,key:i.key||"default"}]}var a=null;n.addEventListener("popstate",(function(){if(a)v.call(a),a=null;else{var e=s.Pop,t=o(),n=t[0],r=t[1];if(v.length){if(null!=n){var i=l-n;i&&(a={action:e,location:r,retry:function(){k(-1*i)}},k(i))}}else w(e)}}));var i=s.Pop,c=o(),l=c[0],m=c[1],g=p(),v=p();function y(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,o=void 0===r?"":r,a=e.hash,i=void 0===a?"":a;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),i&&"#"!==i&&(n+="#"===i.charAt(0)?i:"#"+i),n}(e)}function b(e,t){return void 0===t&&(t=null),u({pathname:m.pathname,hash:"",search:""},"string"==typeof e?h(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function A(e,t){return[{usr:e.state,key:e.key,idx:t},y(e)]}function C(e,t,n){return!v.length||(v.call({action:e,location:t,retry:n}),!1)}function w(e){i=e;var t=o();l=t[0],m=t[1],g.call({action:i,location:m})}function k(e){r.go(e)}null==l&&(l=0,r.replaceState(u({},r.state,{idx:l}),""));var S={get action(){return i},get location(){return m},createHref:y,push:function e(t,o){var a=s.Push,i=b(t,o);if(C(a,i,(function(){e(t,o)}))){var c=A(i,l+1),u=c[0],d=c[1];try{r.pushState(u,"",d)}catch(e){n.location.assign(d)}w(a)}},replace:function e(t,n){var o=s.Replace,a=b(t,n);if(C(o,a,(function(){e(t,n)}))){var i=A(a,l),c=i[0],u=i[1];r.replaceState(c,"",u),w(o)}},go:k,back:function(){k(-1)},forward:function(){k(1)},listen:function(e){return g.push(e)},block:function(e){var t=v.push(e);return 1===v.length&&n.addEventListener(d,f),function(){t(),v.length||n.removeEventListener(d,f)}}};return S}({window:r}));let a=o.current,[i,l]=(0,c.useState)({action:a.action,location:a.location});return(0,c.useLayoutEffect)((()=>a.listen(l)),[a]),(0,c.createElement)(j,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:a})}var F=n(864),U=n(774),G=n.n(U);const V=function(e){function t(e,r,c,l,f){for(var p,h,m,g,A,w=0,k=0,S=0,_=0,E=0,I=0,L=m=p=0,j=0,N=0,B=0,z=0,F=c.length,U=F-1,G="",V="",W="",$="";j<F;){if(h=c.charCodeAt(j),j===U&&0!==k+_+S+w&&(0!==k&&(h=47===k?10:47),_=S=w=0,F++,U++),0===k+_+S+w){if(j===U&&(0<N&&(G=G.replace(d,"")),0<G.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:G+=c.charAt(j)}h=59}switch(h){case 123:for(p=(G=G.trim()).charCodeAt(0),m=1,z=++j;j<F;){switch(h=c.charCodeAt(j)){case 123:m++;break;case 125:m--;break;case 47:switch(h=c.charCodeAt(j+1)){case 42:case 47:e:{for(L=j+1;L<U;++L)switch(c.charCodeAt(L)){case 47:if(42===h&&42===c.charCodeAt(L-1)&&j+2!==L){j=L+1;break e}break;case 10:if(47===h){j=L+1;break e}}j=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;j++<U&&c.charCodeAt(j)!==h;);}if(0===m)break;j++}if(m=c.substring(z,j),0===p&&(p=(G=G.replace(u,"").trim()).charCodeAt(0)),64===p){switch(0<N&&(G=G.replace(d,"")),h=G.charCodeAt(1)){case 100:case 109:case 115:case 45:N=r;break;default:N=O}if(z=(m=t(r,N,m,h,f+1)).length,0<M&&(A=s(3,m,N=n(O,G,B),r,T,x,z,h,f,l),G=N.join(""),void 0!==A&&0===(z=(m=A.trim()).length)&&(h=0,m="")),0<z)switch(h){case 115:G=G.replace(C,i);case 100:case 109:case 45:m=G+"{"+m+"}";break;case 107:m=(G=G.replace(v,"$1 $2"))+"{"+m+"}",m=1===R||2===R&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=G+m,112===l&&(V+=m,m="")}else m=""}else m=t(r,n(r,G,B),m,l,f+1);W+=m,m=B=N=L=p=0,G="",h=c.charCodeAt(++j);break;case 125:case 59:if(1<(z=(G=(0<N?G.replace(d,""):G).trim()).length))switch(0===L&&(p=G.charCodeAt(0),45===p||96<p&&123>p)&&(z=(G=G.replace(" ",":")).length),0<M&&void 0!==(A=s(1,G,r,e,T,x,V.length,l,f,l))&&0===(z=(G=A.trim()).length)&&(G="\0\0"),p=G.charCodeAt(0),h=G.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){$+=G+c.charAt(j);break}default:58!==G.charCodeAt(z-1)&&(V+=o(G,p,h,G.charCodeAt(2)))}B=N=L=p=0,G="",h=c.charCodeAt(++j)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==l&&0<G.length&&(N=1,G+="\0"),0<M*D&&s(0,G,r,e,T,x,V.length,l,f,l),x=1,T++;break;case 59:case 125:if(0===k+_+S+w){x++;break}default:switch(x++,g=c.charAt(j),h){case 9:case 32:if(0===_+w+k)switch(E){case 44:case 58:case 9:case 32:g="";break;default:32!==h&&(g=" ")}break;case 0:g="\\0";break;case 12:g="\\f";break;case 11:g="\\v";break;case 38:0===_+k+w&&(N=B=1,g="\f"+g);break;case 108:if(0===_+k+w+P&&0<L)switch(j-L){case 2:112===E&&58===c.charCodeAt(j-3)&&(P=E);case 8:111===I&&(P=I)}break;case 58:0===_+k+w&&(L=j);break;case 44:0===k+S+_+w&&(N=1,g+="\r");break;case 34:case 39:0===k&&(_=_===h?0:0===_?h:_);break;case 91:0===_+k+S&&w++;break;case 93:0===_+k+S&&w--;break;case 41:0===_+k+w&&S--;break;case 40:0===_+k+w&&(0===p&&(2*E+3*I==533||(p=1)),S++);break;case 64:0===k+S+_+w+L+m&&(m=1);break;case 42:case 47:if(!(0<_+w+S))switch(k){case 0:switch(2*h+3*c.charCodeAt(j+1)){case 235:k=47;break;case 220:z=j,k=42}break;case 42:47===h&&42===E&&z+2!==j&&(33===c.charCodeAt(z+2)&&(V+=c.substring(z,j+1)),g="",k=0)}}0===k&&(G+=g)}I=E,E=h,j++}if(0<(z=V.length)){if(N=r,0<M&&void 0!==(A=s(2,V,N,e,T,x,z,l,f,l))&&0===(V=A).length)return $+V+W;if(V=N.join(",")+"{"+V+"}",0!=R*P){switch(2!==R||a(V,2)||(P=0),P){case 111:V=V.replace(b,":-moz-$1")+V;break;case 112:V=V.replace(y,"::-webkit-input-$1")+V.replace(y,"::-moz-$1")+V.replace(y,":-ms-input-$1")+V}P=0}}return $+V+W}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var s=0;for(e=0===i?"":e[0]+" ";s<a;++s)t[s]=r(e,t[s],n).trim();break;default:var c=s=0;for(t=[];s<a;++s)for(var l=0;l<i;++l)t[c++]=r(e[l]+" ",o[s],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",s=2*t+3*n+4*r;if(944===s){e=i.indexOf(":",9)+1;var c=i.substring(e,i.length-1).trim();return c=i.substring(0,e).trim()+c+";",1===R||2===R&&a(c,1)?"-webkit-"+c+c:c}if(0===R||2===R&&!a(i,1))return i;switch(s){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(E,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(c=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+c+i;case 1005:return p.test(i)?i.replace(f,":-webkit-")+i.replace(f,":-moz-")+i:i;case 1e3:switch(t=(c=i.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(t)){case 226:c=i.replace(A,"tb");break;case 232:c=i.replace(A,"tb-rl");break;case 220:c=i.replace(A,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+c+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,s=(c=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:i=i.replace(c,"-webkit-"+c)+";"+i;break;case 207:case 102:i=i.replace(c,"-webkit-"+(102<s?"inline-":"")+"box")+";"+i.replace(c,"-webkit-"+c)+";"+i.replace(c,"-ms-"+c+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return c=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+c+"-ms-flex-"+c+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===_.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(c,"-webkit-"+c)+i.replace(c,"-moz-"+c.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(S,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,a,i,s,c,u){for(var d,f=0,p=t;f<M;++f)switch(d=I[f].call(l,e,p,n,r,o,a,i,s,c,u)){case void 0:case!1:case!0:case null:break;default:p=d}if(p!==t)return p}function c(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?R=1:(R=2,L=e):R=0),c}function l(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<M){var o=s(-1,n,r,r,T,x,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(O,r,n,0,0);return 0<M&&void 0!==(o=s(-2,a,r,r,T,x,a.length,0,0,0))&&(a=o),P=0,x=T=1,a}var u=/^\0+/g,d=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,A=/[svh]\w+-[tblr]{2}/,C=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,k=/-self|flex-/g,S=/[^]*?(:[rp][el]a[\w-]+)[^]*/,_=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,x=1,T=1,P=0,R=1,O=[],I=[],M=0,L=null,D=0;return l.use=function e(t){switch(t){case void 0:case null:M=I.length=0;break;default:if("function"==typeof t)I[M++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else D=0|!!t}return e},l.set=c,void 0!==e&&c(e),l},W={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var $=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const H=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(n=e,$.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}();var Z=n(679),q=n.n(Z);function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Q=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},K=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,F.typeOf)(e)},J=Object.freeze([]),X=Object.freeze({});function ee(e){return"function"==typeof e}function te(e){return e.displayName||e.name||"Component"}function ne(e){return e&&"string"==typeof e.styledComponentId}var re="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",oe="undefined"!=typeof window&&"HTMLElement"in window,ae=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function ie(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var se=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&ie(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),s=0,c=t.length;s<c;s++)this.tag.insertRule(i,t[s])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),ce=new Map,le=new Map,ue=1,de=function(e){if(ce.has(e))return ce.get(e);for(;le.has(ue);)ue++;var t=ue++;return ce.set(e,t),le.set(t,e),t},fe=function(e){return le.get(e)},pe=function(e,t){t>=ue&&(ue=t+1),ce.set(e,t),le.set(t,e)},he="style["+re+'][data-styled-version="5.3.5"]',me=new RegExp("^"+re+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),ge=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},ve=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var s=i.match(me);if(s){var c=0|parseInt(s[1],10),l=s[2];0!==c&&(pe(l,c),ge(e,l,s[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},ye=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},be=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(re))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(re,"active"),r.setAttribute("data-styled-version","5.3.5");var i=ye();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},Ae=function(){function e(e){var t=this.element=be(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}ie(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),Ce=function(){function e(e){var t=this.element=be(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),we=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),ke=oe,Se={isServer:!oe,useCSSOMInjection:!ae},_e=function(){function e(e,t,n){void 0===e&&(e=X),void 0===t&&(t={}),this.options=Y({},Se,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&oe&&ke&&(ke=!1,function(e){for(var t=document.querySelectorAll(he),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(re)&&(ve(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return de(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Y({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new we(o):r?new Ae(o):new Ce(o),new se(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(de(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(de(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(de(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=fe(o);if(void 0!==a){var i=e.names.get(a),s=t.getGroup(o);if(i&&s&&i.size){var c=re+".g"+o+'[id="'+a+'"]',l="";void 0!==i&&i.forEach((function(e){e.length>0&&(l+=e+",")})),r+=""+s+c+'{content:"'+l+'"}/*!sc*/\n'}}}return r}(this)},e}(),Ee=/(a)(d)/gi,xe=function(e){return String.fromCharCode(e+(e>25?39:97))};function Te(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=xe(t%52)+n;return(xe(t%52)+n).replace(Ee,"$1-$2")}var Pe=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Re=function(e){return Pe(5381,e)};function Oe(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(ee(n)&&!ne(n))return!1}return!0}var Ie=Re("5.3.5"),Me=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Oe(e),this.componentId=t,this.baseHash=Pe(Ie,t),this.baseStyle=n,_e.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=Qe(this.rules,e,t,n).join(""),i=Te(Pe(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var s=n(a,"."+i,void 0,r);t.insertRules(r,i,s)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,l=Pe(this.baseHash,n.hash),u="",d=0;d<c;d++){var f=this.rules[d];if("string"==typeof f)u+=f;else if(f){var p=Qe(f,e,t,n),h=Array.isArray(p)?p.join(""):p;l=Pe(l,h+d),u+=h}}if(u){var m=Te(l>>>0);if(!t.hasNameForId(r,m)){var g=n(u,"."+m,void 0,r);t.insertRules(r,m,g)}o.push(m)}}return o.join(" ")},e}(),Le=/^\s*\/\/.*$/gm,De=[":","[",".","#"];function je(e){var t,n,r,o,a=void 0===e?X:e,i=a.options,s=void 0===i?X:i,c=a.plugins,l=void 0===c?J:c,u=new V(s),d=[],f=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,c,l,u,d){switch(n){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),p=function(e,r,a){return 0===r&&-1!==De.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,s){void 0===s&&(s="&");var c=e.replace(Le,""),l=a&&i?i+" "+a+" { "+c+" }":c;return t=s,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),u(i||!a?"":a,l)}return u.use([].concat(l,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},f,function(e){if(-2===e){var t=d;return d=[],t}}])),h.hash=l.length?l.reduce((function(e,t){return t.name||ie(15),Pe(e,t.name)}),5381).toString():"",h}var Ne=c.createContext(),Be=(Ne.Consumer,c.createContext()),ze=(Be.Consumer,new _e),Fe=je();function Ue(){return(0,c.useContext)(Ne)||ze}function Ge(e){var t=(0,c.useState)(e.stylisPlugins),n=t[0],r=t[1],o=Ue(),a=(0,c.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),i=(0,c.useMemo)((function(){return je({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,c.useEffect)((function(){G()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),c.createElement(Ne.Provider,{value:a},c.createElement(Be.Provider,{value:i},e.children))}var Ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Fe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return ie(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Fe),this.name+e.hash},e}(),We=/([A-Z])/,$e=/([A-Z])/g,He=/^ms-/,Ze=function(e){return"-"+e.toLowerCase()};function qe(e){return We.test(e)?e.replace($e,Ze).replace(He,"-ms-"):e}var Ye=function(e){return null==e||!1===e||""===e};function Qe(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,s=e.length;i<s;i+=1)""!==(o=Qe(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return Ye(e)?"":ne(e)?"."+e.styledComponentId:ee(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!t?e:Qe(e(t),t,n,r):e instanceof Ve?n?(e.inject(n,r),e.getName(r)):e:K(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!Ye(t[i])&&(Array.isArray(t[i])&&t[i].isCss||ee(t[i])?a.push(qe(i)+":",t[i],";"):K(t[i])?a.push.apply(a,e(t[i],i)):a.push(qe(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in W?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var c}var Ke=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Je(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return ee(e)||K(e)?Ke(Qe(Q(J,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ke(Qe(Q(e,n)))}new Set;var Xe=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,et=/(^-|-$)/g;function tt(e){return e.replace(Xe,"-").replace(et,"")}function nt(e){return"string"==typeof e&&!0}var rt=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},ot=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function at(e,t,n){var r=e[n];rt(t)&&rt(r)?it(r,t):e[n]=t}function it(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(rt(i))for(var s in i)ot(s)&&at(e,i[s],s)}return e}var st=c.createContext();st.Consumer;var ct={};function lt(e,t,n){var r=ne(e),o=!nt(e),a=t.attrs,i=void 0===a?J:a,s=t.componentId,l=void 0===s?function(e,t){var n="string"!=typeof e?"sc":tt(e);ct[n]=(ct[n]||0)+1;var r=n+"-"+function(e){return Te(Re(e)>>>0)}("5.3.5"+n+ct[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):s,u=t.displayName,d=void 0===u?function(e){return nt(e)?"styled."+e:"Styled("+te(e)+")"}(e):u,f=t.displayName&&t.componentId?tt(t.displayName)+"-"+t.componentId:t.componentId||l,p=r&&e.attrs?Array.prototype.concat(e.attrs,i).filter(Boolean):i,h=t.shouldForwardProp;r&&e.shouldForwardProp&&(h=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var m,g=new Me(n,f,r?e.componentStyle:void 0),v=g.isStatic&&0===i.length,y=function(e,t){return function(e,t,n,r){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,s=e.foldedComponentIds,l=e.shouldForwardProp,u=e.styledComponentId,d=e.target,f=function(e,t,n){void 0===e&&(e=X);var r=Y({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in ee(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(function(e,t,n){return void 0===n&&(n=X),e.theme!==n.theme&&e.theme||t||n.theme}(t,(0,c.useContext)(st),i)||X,t,o),p=f[0],h=f[1],m=function(e,t,n,r){var o=Ue(),a=(0,c.useContext)(Be)||Fe;return t?e.generateAndInjectStyles(X,o,a):e.generateAndInjectStyles(n,o,a)}(a,r,p),g=n,v=h.$as||t.$as||h.as||t.as||d,y=nt(v),b=h!==t?Y({},t,{},h):t,A={};for(var C in b)"$"!==C[0]&&"as"!==C&&("forwardedAs"===C?A.as=b[C]:(l?l(C,H,v):!y||H(C))&&(A[C]=b[C]));return t.style&&h.style!==t.style&&(A.style=Y({},t.style,{},h.style)),A.className=Array.prototype.concat(s,u,m!==u?m:null,t.className,h.className).filter(Boolean).join(" "),A.ref=g,(0,c.createElement)(v,A)}(m,e,t,v)};return y.displayName=d,(m=c.forwardRef(y)).attrs=p,m.componentStyle=g,m.displayName=d,m.shouldForwardProp=h,m.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):J,m.styledComponentId=f,m.target=r?e.target:e,m.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),a=r&&r+"-"+(nt(e)?e:tt(te(e)));return lt(e,Y({},o,{attrs:p,componentId:a}),n)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?it({},e.defaultProps,t):t}}),m.toString=function(){return"."+m.styledComponentId},o&&q()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var ut,dt=function(e){return function e(t,n,r){if(void 0===r&&(r=X),!(0,F.isValidElementType)(n))return ie(1,String(n));var o=function(){return t(n,r,Je.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Y({},r,{},o))},o.attrs=function(o){return e(t,n,Y({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(lt,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){dt[e]=dt(e)})),ut=function(e,t){this.rules=e,this.componentId=t,this.isStatic=Oe(e),_e.registerId(this.componentId+1)}.prototype,ut.createStyles=function(e,t,n,r){var o=r(Qe(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},ut.removeStyles=function(e,t){t.clearRules(this.componentId+e)},ut.renderStyles=function(e,t,n,r){e>2&&_e.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=ye();return"<style "+[n&&'nonce="'+n+'"',re+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?ie(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return ie(2);var n=((t={})[re]="",t["data-styled-version"]="5.3.5",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=ye();return r&&(n.nonce=r),[c.createElement("style",Y({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new _e({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?ie(2):c.createElement(Ge,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return ie(3)}}();const ft=dt;function pt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ht(e,t){if(e){if("string"==typeof e)return pt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pt(e,t):void 0}}function mt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(e,t)||ht(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gt(e,t,n,r,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function vt(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gt(a,r,o,i,s,"next",e)}function s(e){gt(a,r,o,i,s,"throw",e)}i(void 0)}))}}var yt=n(687),bt=n.n(yt),At=n(6);let Ct=!0,wt=!0;function kt(e,t,n){const r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function St(e,t,n){if(!e.RTCPeerConnection)return;const r=e.RTCPeerConnection.prototype,o=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return o.apply(this,arguments);const a=e=>{const t=n(e);t&&(r.handleEvent?r.handleEvent(t):r(t))};return this._eventMap=this._eventMap||{},this._eventMap[t]||(this._eventMap[t]=new Map),this._eventMap[t].set(r,a),o.apply(this,[e,a])};const a=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[t])return a.apply(this,arguments);if(!this._eventMap[t].has(n))return a.apply(this,arguments);const r=this._eventMap[t].get(n);return this._eventMap[t].delete(n),0===this._eventMap[t].size&&delete this._eventMap[t],0===Object.keys(this._eventMap).length&&delete this._eventMap,a.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}function _t(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(Ct=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function Et(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(wt=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function xt(){if("object"==typeof window){if(Ct)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}}function Tt(e,t){wt&&console.warn(e+" is deprecated, please use "+t+" instead.")}function Pt(e){return"[object Object]"===Object.prototype.toString.call(e)}function Rt(e){return Pt(e)?Object.keys(e).reduce((function(t,n){const r=Pt(e[n]),o=r?Rt(e[n]):e[n],a=r&&!Object.keys(o).length;return void 0===o||a?t:Object.assign(t,{[n]:o})}),{}):e}function Ot(e,t,n){t&&!n.has(t.id)&&(n.set(t.id,t),Object.keys(t).forEach((r=>{r.endsWith("Id")?Ot(e,e.get(t[r]),n):r.endsWith("Ids")&&t[r].forEach((t=>{Ot(e,e.get(t),n)}))})))}function It(e,t,n){const r=n?"outbound-rtp":"inbound-rtp",o=new Map;if(null===t)return o;const a=[];return e.forEach((e=>{"track"===e.type&&e.trackIdentifier===t.id&&a.push(e)})),a.forEach((t=>{e.forEach((n=>{n.type===r&&n.trackId===t.id&&Ot(e,n,o)}))})),o}const Mt=xt;function Lt(e,t){const n=e&&e.navigator;if(!n.mediaDevices)return;const r=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;const t={};return Object.keys(e).forEach((n=>{if("require"===n||"advanced"===n||"mediaSource"===n)return;const r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);const o=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];let e={};"number"==typeof r.ideal?(e[o("min",n)]=r.ideal,t.optional.push(e),e={},e[o("max",n)]=r.ideal,t.optional.push(e)):(e[o("",n)]=r.ideal,t.optional.push(e))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[o("",n)]=r.exact):["min","max"].forEach((e=>{void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[o(e,n)]=r[e])}))})),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},o=function(e,o){if(t.version>=61)return o(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){const t=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};t((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),t(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"==typeof e.video){let a=e.video.facingMode;a=a&&("object"==typeof a?a:{ideal:a});const i=t.version<66;if(a&&("user"===a.exact||"environment"===a.exact||"user"===a.ideal||"environment"===a.ideal)&&(!n.mediaDevices.getSupportedConstraints||!n.mediaDevices.getSupportedConstraints().facingMode||i)){let t;if(delete e.video.facingMode,"environment"===a.exact||"environment"===a.ideal?t=["back","rear"]:"user"!==a.exact&&"user"!==a.ideal||(t=["front"]),t)return n.mediaDevices.enumerateDevices().then((n=>{let i=(n=n.filter((e=>"videoinput"===e.kind))).find((e=>t.some((t=>e.label.toLowerCase().includes(t)))));return!i&&n.length&&t.includes("back")&&(i=n[n.length-1]),i&&(e.video.deviceId=a.exact?{exact:i.deviceId}:{ideal:i.deviceId}),e.video=r(e.video),Mt("chrome: "+JSON.stringify(e)),o(e)}))}e.video=r(e.video)}return Mt("chrome: "+JSON.stringify(e)),o(e)},a=function(e){return t.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}};if(n.getUserMedia=function(e,t,r){o(e,(e=>{n.webkitGetUserMedia(e,t,(e=>{r&&r(a(e))}))}))}.bind(n),n.mediaDevices.getUserMedia){const e=n.mediaDevices.getUserMedia.bind(n.mediaDevices);n.mediaDevices.getUserMedia=function(t){return o(t,(t=>e(t).then((e=>{if(t.audio&&!e.getAudioTracks().length||t.video&&!e.getVideoTracks().length)throw e.getTracks().forEach((e=>{e.stop()})),new DOMException("","NotFoundError");return e}),(e=>Promise.reject(a(e))))))}}}function Dt(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then((t=>{const r=n.video&&n.video.width,o=n.video&&n.video.height,a=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:a||3}},r&&(n.video.mandatory.maxWidth=r),o&&(n.video.mandatory.maxHeight=o),e.navigator.mediaDevices.getUserMedia(n)}))}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}function jt(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function Nt(e){if("object"==typeof e&&e.RTCPeerConnection&&!("ontrack"in e.RTCPeerConnection.prototype)){Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=t=>{t.stream.addEventListener("addtrack",(n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find((e=>e.track&&e.track.id===n.track.id)):{track:n.track};const o=new Event("track");o.track=n.track,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)})),t.stream.getTracks().forEach((n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find((e=>e.track&&e.track.id===n.id)):{track:n};const o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=[t.stream],this.dispatchEvent(o)}))},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}else St(e,"track",(e=>(e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e)))}function Bt(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){const t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};const n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){let o=n.apply(this,arguments);return o||(o=t(this,e),this._senders.push(o)),o};const r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);const t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._senders=this._senders||[],n.apply(this,[e]),e.getTracks().forEach((e=>{this._senders.push(t(this,e))}))};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._senders=this._senders||[],r.apply(this,[e]),e.getTracks().forEach((e=>{const t=this._senders.find((t=>t.track===e));t&&this._senders.splice(this._senders.indexOf(t),1)}))}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function zt(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,n,r]=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof e))return t.apply(this,[]);const o=function(e){const t={};return e.result().forEach((e=>{const n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach((t=>{n[t]=e.stat(t)})),t[n.id]=n})),t},a=function(e){return new Map(Object.keys(e).map((t=>[t,e[t]])))};if(arguments.length>=2){const r=function(e){n(a(o(e)))};return t.apply(this,[r,e])}return new Promise(((e,n)=>{t.apply(this,[function(t){e(a(o(t)))},n])})).then(n,r)}}function Ft(e){if(!("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){const e=this;return this._pc.getStats().then((t=>It(t,e.track,!0)))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e}),St(e,"track",(e=>(e.receiver._pc=e.srcElement,e))),e.RTCRtpReceiver.prototype.getStats=function(){const e=this;return this._pc.getStats().then((t=>It(t,e.track,!1)))}}if(!("getStats"in e.RTCRtpSender.prototype)||!("getStats"in e.RTCRtpReceiver.prototype))return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){const e=arguments[0];let t,n,r;return this.getSenders().forEach((n=>{n.track===e&&(t?r=!0:t=n)})),this.getReceivers().forEach((t=>(t.track===e&&(n?r=!0:n=t),t.track===e))),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function Ut(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map((e=>this._shimmedLocalStreams[e][0]))};const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};const r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach((e=>{if(this.getSenders().find((t=>t.track===e)))throw new DOMException("Track already exists.","InvalidAccessError")}));const t=this.getSenders();n.apply(this,arguments);const r=this.getSenders().filter((e=>-1===t.indexOf(e)));this._shimmedLocalStreams[e.id]=[e].concat(r)};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};const o=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach((t=>{const n=this._shimmedLocalStreams[t].indexOf(e);-1!==n&&this._shimmedLocalStreams[t].splice(n,1),1===this._shimmedLocalStreams[t].length&&delete this._shimmedLocalStreams[t]})),o.apply(this,arguments)}}function Gt(e,t){if(!e.RTCPeerConnection)return;if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return Ut(e);const n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){const e=n.apply(this);return this._reverseStreams=this._reverseStreams||{},e.map((e=>this._reverseStreams[e.id]))};const r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach((e=>{if(this.getSenders().find((t=>t.track===e)))throw new DOMException("Track already exists.","InvalidAccessError")})),!this._reverseStreams[t.id]){const n=new e.MediaStream(t.getTracks());this._streams[t.id]=n,this._reverseStreams[n.id]=t,t=n}r.apply(this,[t])};const o=e.RTCPeerConnection.prototype.removeStream;function a(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(o.id,"g"),r.id)})),new RTCSessionDescription({type:t.type,sdp:n})}function i(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((t=>{const r=e._reverseStreams[t],o=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),o.id)})),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},o.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");const r=[].slice.call(arguments,1);if(1!==r.length||!r[0].getTracks().find((e=>e===t)))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");const o=this.getSenders().find((e=>e.track===t));if(o)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};const a=this._streams[n.id];if(a)a.addTrack(t),Promise.resolve().then((()=>{this.dispatchEvent(new Event("negotiationneeded"))}));else{const r=new e.MediaStream([t]);this._streams[n.id]=r,this._reverseStreams[r.id]=n,this.addStream(r)}return this.getSenders().find((e=>e.track===t))},["createOffer","createAnswer"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){const e=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(this,[t=>{const n=a(this,t);e[0].apply(null,[n])},t=>{e[1]&&e[1].apply(null,t)},arguments[2]]):n.apply(this,arguments).then((e=>a(this,e)))}};e.RTCPeerConnection.prototype[t]=r[t]}));const s=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=i(this,arguments[0]),s.apply(this,arguments)):s.apply(this,arguments)};const c=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){const e=c.get.apply(this);return""===e.type?e:a(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(e._pc!==this)throw new DOMException("Sender was not created by this connection.","InvalidAccessError");let t;this._streams=this._streams||{},Object.keys(this._streams).forEach((n=>{this._streams[n].getTracks().find((t=>e.track===t))&&(t=this._streams[n])})),t&&(1===t.getTracks().length?this.removeStream(this._reverseStreams[t.id]):t.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function Vt(e,t){!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),e.RTCPeerConnection&&t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}))}function Wt(e,t){St(e,"negotiationneeded",(e=>{const n=e.target;if(!(t.version<72||n.getConfiguration&&"plan-b"===n.getConfiguration().sdpSemantics)||"stable"===n.signalingState)return e}))}var $t=n(539),Ht=n.n($t);function Zt(e){const t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch((e=>Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString(){return this.name}}}(e))))}}function qt(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator)))}function Yt(e,t){if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){const t=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set(e){t.set.call(this,e);const n=new Event("enabled");n.enabled=e,this.dispatchEvent(n)}})}e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)&&Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);const n=Ht()(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=function(e,t){let n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((e=>{if(e&&(e.urls||e.url)){let t=e.urls||e.url;e.url&&!e.urls&&Tt("RTCIceServer.url","RTCIceServer.urls");const r="string"==typeof t;return r&&(t=[t]),t=t.filter((e=>{if(0===e.indexOf("stun:"))return!1;const t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n})),delete e.url,e.urls=r?t[0]:t,!!t.length}}))}(e.iceServers,t.version),xt("ICE servers after filtering:",e.iceServers)),new n(e)},e.RTCPeerConnection.prototype=n.prototype}function Qt(e){e.RTCRtpSender&&!("replaceTrack"in e.RTCRtpSender.prototype)&&(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}function Kt(e,t){const n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){Tt("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){const e=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},t=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(n){return"object"==typeof n&&"object"==typeof n.audio&&(n=JSON.parse(JSON.stringify(n)),e(n.audio,"autoGainControl","mozAutoGainControl"),e(n.audio,"noiseSuppression","mozNoiseSuppression")),t(n)},r&&r.prototype.getSettings){const t=r.prototype.getSettings;r.prototype.getSettings=function(){const n=t.apply(this,arguments);return e(n,"mozAutoGainControl","autoGainControl"),e(n,"mozNoiseSuppression","noiseSuppression"),n}}if(r&&r.prototype.applyConstraints){const t=r.prototype.applyConstraints;r.prototype.applyConstraints=function(n){return"audio"===this.kind&&"object"==typeof n&&(n=JSON.parse(JSON.stringify(n)),e(n,"autoGainControl","mozAutoGainControl"),e(n,"noiseSuppression","mozNoiseSuppression")),t.apply(this,[n])}}}}function Jt(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){const e=new DOMException("getDisplayMedia without video constraints is undefined");return e.name="NotFoundError",e.code=8,Promise.reject(e)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}function Xt(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function en(e,t){if("object"!=typeof e||!e.RTCPeerConnection&&!e.mozRTCPeerConnection)return;!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}));const n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,o,a]=arguments;return r.apply(this,[e||null]).then((e=>{if(t.version<53&&!o)try{e.forEach((e=>{e.type=n[e.type]||e.type}))}catch(t){if("TypeError"!==t.name)throw t;e.forEach(((t,r)=>{e.set(r,Object.assign({},t,{type:n[t.type]||t.type}))}))}return e})).then(o,a)}}function tn(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function nn(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e}),St(e,"track",(e=>(e.receiver._pc=e.srcElement,e))),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function rn(e){e.RTCPeerConnection&&!("removeStream"in e.RTCPeerConnection.prototype)&&(e.RTCPeerConnection.prototype.removeStream=function(e){Tt("removeStream","removeTrack"),this.getSenders().forEach((t=>{t.track&&e.getTracks().includes(t.track)&&this.removeTrack(t)}))})}function on(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function an(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];const e=arguments[1],n=e&&"sendEncodings"in e;n&&e.sendEncodings.forEach((e=>{if("rid"in e&&!/^[a-z0-9]{0,16}$/i.test(e.rid))throw new TypeError("Invalid RID value provided.");if("scaleResolutionDownBy"in e&&!(parseFloat(e.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in e&&!(parseFloat(e.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")}));const r=t.apply(this,arguments);if(n){const{sender:t}=r,n=t.getParameters();(!("encodings"in n)||1===n.encodings.length&&0===Object.keys(n.encodings[0]).length)&&(n.encodings=e.sendEncodings,t.sendEncodings=e.sendEncodings,this.setParametersPromises.push(t.setParameters(n).then((()=>{delete t.sendEncodings})).catch((()=>{delete t.sendEncodings}))))}return r})}function sn(e){if("object"!=typeof e||!e.RTCRtpSender)return;const t=e.RTCRtpSender.prototype.getParameters;t&&(e.RTCRtpSender.prototype.getParameters=function(){const e=t.apply(this,arguments);return"encodings"in e||(e.encodings=[].concat(this.sendEncodings||[{}])),e})}function cn(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then((()=>t.apply(this,arguments))).finally((()=>{this.setParametersPromises=[]})):t.apply(this,arguments)}}function ln(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then((()=>t.apply(this,arguments))).finally((()=>{this.setParametersPromises=[]})):t.apply(this,arguments)}}function un(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getAudioTracks().forEach((n=>t.call(this,n,e))),e.getVideoTracks().forEach((n=>t.call(this,n,e)))},e.RTCPeerConnection.prototype.addTrack=function(e,...n){return n&&n.forEach((e=>{this._localStreams?this._localStreams.includes(e)||this._localStreams.push(e):this._localStreams=[e]})),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);const t=this._localStreams.indexOf(e);if(-1===t)return;this._localStreams.splice(t,1);const n=e.getTracks();this.getSenders().forEach((e=>{n.includes(e.track)&&this.removeTrack(e)}))})}}function dn(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=e=>{e.streams.forEach((e=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(e))return;this._remoteStreams.push(e);const t=new Event("addstream");t.stream=e,this.dispatchEvent(t)}))})}});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){const e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach((t=>{if(e._remoteStreams||(e._remoteStreams=[]),e._remoteStreams.indexOf(t)>=0)return;e._remoteStreams.push(t);const n=new Event("addstream");n.stream=t,e.dispatchEvent(n)}))}),t.apply(e,arguments)}}}function fn(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,o=t.setLocalDescription,a=t.setRemoteDescription,i=t.addIceCandidate;t.createOffer=function(e,t){const r=arguments.length>=2?arguments[2]:arguments[0],o=n.apply(this,[r]);return t?(o.then(e,t),Promise.resolve()):o},t.createAnswer=function(e,t){const n=arguments.length>=2?arguments[2]:arguments[0],o=r.apply(this,[n]);return t?(o.then(e,t),Promise.resolve()):o};let s=function(e,t,n){const r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=s,s=function(e,t,n){const r=a.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=s,s=function(e,t,n){const r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=s}function pn(e){const t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){const e=t.mediaDevices,n=e.getUserMedia.bind(e);t.mediaDevices.getUserMedia=e=>n(hn(e))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))}function hn(e){return e&&void 0!==e.video?Object.assign({},e,{video:Rt(e.video)}):e}function mn(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){const t=[];for(let n=0;n<e.iceServers.length;n++){let r=e.iceServers[n];!r.hasOwnProperty("urls")&&r.hasOwnProperty("url")?(Tt("RTCIceServer.url","RTCIceServer.urls"),r=JSON.parse(JSON.stringify(r)),r.urls=r.url,delete r.url,t.push(r)):t.push(e.iceServers[n])}e.iceServers=t}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in t&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:()=>t.generateCertificate})}function gn(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function vn(e){const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);const t=this.getTransceivers().find((e=>"audio"===e.receiver.track.kind));!1===e.offerToReceiveAudio&&t?"sendrecv"===t.direction?t.setDirection?t.setDirection("sendonly"):t.direction="sendonly":"recvonly"===t.direction&&(t.setDirection?t.setDirection("inactive"):t.direction="inactive"):!0!==e.offerToReceiveAudio||t||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);const n=this.getTransceivers().find((e=>"video"===e.receiver.track.kind));!1===e.offerToReceiveVideo&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveVideo||n||this.addTransceiver("video")}return t.apply(this,arguments)}}function yn(e){"object"!=typeof e||e.AudioContext||(e.AudioContext=e.webkitAudioContext)}var bn=n(882),An=n.n(bn);function Cn(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;const t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){const n=new t(e),r=An().parseCandidate(e.candidate),o=Object.assign(n,r);return o.toJSON=function(){return{candidate:o.candidate,sdpMid:o.sdpMid,sdpMLineIndex:o.sdpMLineIndex,usernameFragment:o.usernameFragment}},o}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,St(e,"icecandidate",(t=>(t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t)))}function wn(e,t){if(!e.RTCPeerConnection)return;"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return void 0===this._sctp?null:this._sctp}});const n=function(e){if(!e||!e.sdp)return!1;const t=An().splitSections(e.sdp);return t.shift(),t.some((e=>{const t=An().parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")}))},r=function(e){const t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;const n=parseInt(t[1],10);return n!=n?-1:n},o=function(e){let n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},a=function(e,n){let r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);const o=An().matchPrefix(e.sdp,"a=max-message-size:");return o.length>0?r=parseInt(o[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},i=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,"chrome"===t.browser&&t.version>=76){const{sdpSemantics:e}=this.getConfiguration();"plan-b"===e&&Object.defineProperty(this,"sctp",{get(){return void 0===this._sctp?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){const e=r(arguments[0]),t=o(e),n=a(arguments[0],e);let i;i=0===t&&0===n?Number.POSITIVE_INFINITY:0===t||0===n?Math.max(t,n):Math.min(t,n);const s={};Object.defineProperty(s,"maxMessageSize",{get:()=>i}),this._sctp=s}return i.apply(this,arguments)}}function kn(e){if(!e.RTCPeerConnection||!("createDataChannel"in e.RTCPeerConnection.prototype))return;function t(e,t){const n=e.send;e.send=function(){const r=arguments[0],o=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&o>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}const n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){const e=n.apply(this,arguments);return t(e,this),e},St(e,"datachannel",(e=>(t(e.channel,e.target),e)))}function Sn(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;const t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach((e=>{const n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=e=>{const t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;const n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}}))}function _n(e,t){if(!e.RTCPeerConnection)return;if("chrome"===t.browser&&t.version>=71)return;if("safari"===t.browser&&t.version>=605)return;const n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(t){if(t&&t.sdp&&-1!==t.sdp.indexOf("\na=extmap-allow-mixed")){const n=t.sdp.split("\n").filter((e=>"a=extmap-allow-mixed"!==e.trim())).join("\n");e.RTCSessionDescription&&t instanceof e.RTCSessionDescription?arguments[0]=new e.RTCSessionDescription({type:t.type,sdp:n}):t.sdp=n}return n.apply(this,arguments)}}function En(e,t){if(!e.RTCPeerConnection||!e.RTCPeerConnection.prototype)return;const n=e.RTCPeerConnection.prototype.addIceCandidate;n&&0!==n.length&&(e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?("chrome"===t.browser&&t.version<78||"firefox"===t.browser&&t.version<68||"safari"===t.browser)&&arguments[0]&&""===arguments[0].candidate?Promise.resolve():n.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())})}const xn=function({window:n}={},i={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0}){const s=xt,c=function(e){const t={browser:null,version:null};if(void 0===e||!e.navigator)return t.browser="Not a browser.",t;const{navigator:n}=e;if(n.mozGetUserMedia)t.browser="firefox",t.version=kt(n.userAgent,/Firefox\/(\d+)\./,1);else if(n.webkitGetUserMedia||!1===e.isSecureContext&&e.webkitRTCPeerConnection&&!e.RTCIceGatherer)t.browser="chrome",t.version=kt(n.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(n.mediaDevices&&n.userAgent.match(/Edge\/(\d+).(\d+)$/))t.browser="edge",t.version=kt(n.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!n.userAgent.match(/AppleWebKit\/(\d+)\./))return t.browser="Not a supported browser.",t;t.browser="safari",t.version=kt(n.userAgent,/AppleWebKit\/(\d+)\./,1),t.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype}return t}(n),l={browserDetails:c,commonShim:a,extractVersion:kt,disableLog:_t,disableWarnings:Et};switch(c.browser){case"chrome":if(!e||!Vt||!i.shimChrome)return s("Chrome shim is not included in this adapter release."),l;if(null===c.version)return s("Chrome shim can not determine version, not shimming."),l;s("adapter.js shimming chrome."),l.browserShim=e,En(n,c),Lt(n,c),jt(n),Vt(n,c),Nt(n),Gt(n,c),Bt(n),zt(n),Ft(n),Wt(n,c),Cn(n),Sn(n),wn(n,c),kn(n),_n(n,c);break;case"firefox":if(!r||!en||!i.shimFirefox)return s("Firefox shim is not included in this adapter release."),l;s("adapter.js shimming firefox."),l.browserShim=r,En(n,c),Kt(n,c),en(n,c),Xt(n),rn(n),tn(n),nn(n),on(n),an(n),sn(n),cn(n),ln(n),Cn(n),Sn(n),wn(n,c),kn(n);break;case"edge":if(!t||!Yt||!i.shimEdge)return s("MS edge shim is not included in this adapter release."),l;s("adapter.js shimming edge."),l.browserShim=t,Zt(n),qt(n),Yt(n,c),Qt(n),wn(n,c),kn(n);break;case"safari":if(!o||!i.shimSafari)return s("Safari shim is not included in this adapter release."),l;s("adapter.js shimming safari."),l.browserShim=o,En(n,c),mn(n),vn(n),fn(n),un(n),dn(n),gn(n),pn(n),yn(n),Cn(n),wn(n,c),kn(n),_n(n,c);break;default:s("Unsupported browser!")}return l}({window:"undefined"==typeof window?void 0:window}),Tn=xn;function Pn(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var Rn=Tn.default||Tn,On=new(function(){function e(){this.isIOS=["iPad","iPhone","iPod"].includes(navigator.platform),this.supportedBrowsers=["firefox","chrome","safari"],this.minFirefoxVersion=59,this.minChromeVersion=72,this.minSafariVersion=605}return e.prototype.isWebRTCSupported=function(){return"undefined"!=typeof RTCPeerConnection},e.prototype.isBrowserSupported=function(){var e=this.getBrowser(),t=this.getVersion();return!!this.supportedBrowsers.includes(e)&&("chrome"===e?t>=this.minChromeVersion:"firefox"===e?t>=this.minFirefoxVersion:"safari"===e&&!this.isIOS&&t>=this.minSafariVersion)},e.prototype.getBrowser=function(){return Rn.browserDetails.browser},e.prototype.getVersion=function(){return Rn.browserDetails.version||0},e.prototype.isUnifiedPlanSupported=function(){var e,t=this.getBrowser(),n=Rn.browserDetails.version||0;if("chrome"===t&&n<this.minChromeVersion)return!1;if("firefox"===t&&n>=this.minFirefoxVersion)return!0;if(!window.RTCRtpTransceiver||!("currentDirection"in RTCRtpTransceiver.prototype))return!1;var r=!1;try{(e=new RTCPeerConnection).addTransceiver("audio"),r=!0}catch(e){}finally{e&&e.close()}return r},e.prototype.toString=function(){return"Supports:\n    browser:".concat(this.getBrowser(),"\n    version:").concat(this.getVersion(),"\n    isIOS:").concat(this.isIOS,"\n    isWebRTCSupported:").concat(this.isWebRTCSupported(),"\n    isBrowserSupported:").concat(this.isBrowserSupported(),"\n    isUnifiedPlanSupported:").concat(this.isUnifiedPlanSupported())},e}()),In={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:["turn:eu-0.turn.peerjs.com:3478","turn:us-0.turn.peerjs.com:3478"],username:"peerjs",credential:"peerjsp"}],sdpSemantics:"unified-plan"},Mn=function(){function e(){this.CLOUD_HOST="0.peerjs.com",this.CLOUD_PORT=443,this.chunkedBrowsers={Chrome:1,chrome:1},this.chunkedMTU=16300,this.defaultConfig=In,this.browser=On.getBrowser(),this.browserVersion=On.getVersion(),this.supports=function(){var e,t={browser:On.isBrowserSupported(),webRTC:On.isWebRTCSupported(),audioVideo:!1,data:!1,binaryBlob:!1,reliable:!1};if(!t.webRTC)return t;try{e=new RTCPeerConnection(In),t.audioVideo=!0;var n=void 0;try{n=e.createDataChannel("_PEERJSTEST",{ordered:!0}),t.data=!0,t.reliable=!!n.ordered;try{n.binaryType="blob",t.binaryBlob=!On.isIOS}catch(e){}}catch(e){}finally{n&&n.close()}}catch(e){}finally{e&&e.close()}return t}(),this.pack=At.pack,this.unpack=At.unpack,this._dataCount=1}return e.prototype.noop=function(){},e.prototype.validateId=function(e){return!e||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(e)},e.prototype.chunk=function(e){for(var t=[],n=e.size,r=Math.ceil(n/Ln.chunkedMTU),o=0,a=0;a<n;){var i=Math.min(n,a+Ln.chunkedMTU),s=e.slice(a,i),c={__peerData:this._dataCount,n:o,data:s,total:r};t.push(c),a=i,o++}return this._dataCount++,t},e.prototype.blobToArrayBuffer=function(e,t){var n=new FileReader;return n.onload=function(e){e.target&&t(e.target.result)},n.readAsArrayBuffer(e),n},e.prototype.binaryStringToArrayBuffer=function(e){for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=255&e.charCodeAt(n);return t.buffer},e.prototype.randomToken=function(){return Math.random().toString(36).slice(2)},e.prototype.isSecure=function(){return"https:"===location.protocol},e}(),Ln=new Mn,Dn={};Pn(Dn,"Peer",(()=>Ir),(e=>Ir=e));var jn,Nn=Object.prototype.hasOwnProperty,Bn="~";function zn(){}function Fn(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function Un(e,t,n,r,o){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new Fn(n,r||e,o),i=Bn?Bn+t:t;return e._events[i]?e._events[i].fn?e._events[i]=[e._events[i],a]:e._events[i].push(a):(e._events[i]=a,e._eventsCount++),e}function Gn(e,t){0==--e._eventsCount?e._events=new zn:delete e._events[t]}function Vn(){this._events=new zn,this._eventsCount=0}Object.create&&(zn.prototype=Object.create(null),(new zn).__proto__||(Bn=!1)),Vn.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)Nn.call(e,t)&&n.push(Bn?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},Vn.prototype.listeners=function(e){var t=Bn?Bn+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,o=n.length,a=new Array(o);r<o;r++)a[r]=n[r].fn;return a},Vn.prototype.listenerCount=function(e){var t=Bn?Bn+e:e,n=this._events[t];return n?n.fn?1:n.length:0},Vn.prototype.emit=function(e,t,n,r,o,a){var i=Bn?Bn+e:e;if(!this._events[i])return!1;var s,c,l=this._events[i],u=arguments.length;if(l.fn){switch(l.once&&this.removeListener(e,l.fn,void 0,!0),u){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,t),!0;case 3:return l.fn.call(l.context,t,n),!0;case 4:return l.fn.call(l.context,t,n,r),!0;case 5:return l.fn.call(l.context,t,n,r,o),!0;case 6:return l.fn.call(l.context,t,n,r,o,a),!0}for(c=1,s=new Array(u-1);c<u;c++)s[c-1]=arguments[c];l.fn.apply(l.context,s)}else{var d,f=l.length;for(c=0;c<f;c++)switch(l[c].once&&this.removeListener(e,l[c].fn,void 0,!0),u){case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context,t);break;case 3:l[c].fn.call(l[c].context,t,n);break;case 4:l[c].fn.call(l[c].context,t,n,r);break;default:if(!s)for(d=1,s=new Array(u-1);d<u;d++)s[d-1]=arguments[d];l[c].fn.apply(l[c].context,s)}}return!0},Vn.prototype.on=function(e,t,n){return Un(this,e,t,n,!1)},Vn.prototype.once=function(e,t,n){return Un(this,e,t,n,!0)},Vn.prototype.removeListener=function(e,t,n,r){var o=Bn?Bn+e:e;if(!this._events[o])return this;if(!t)return Gn(this,o),this;var a=this._events[o];if(a.fn)a.fn!==t||r&&!a.once||n&&a.context!==n||Gn(this,o);else{for(var i=0,s=[],c=a.length;i<c;i++)(a[i].fn!==t||r&&!a[i].once||n&&a[i].context!==n)&&s.push(a[i]);s.length?this._events[o]=1===s.length?s[0]:s:Gn(this,o)}return this},Vn.prototype.removeAllListeners=function(e){var t;return e?(t=Bn?Bn+e:e,this._events[t]&&Gn(this,t)):(this._events=new zn,this._eventsCount=0),this},Vn.prototype.off=Vn.prototype.removeListener,Vn.prototype.addListener=Vn.prototype.on,Vn.prefixed=Bn,Vn.EventEmitter=Vn,jn=Vn;var Wn={};Pn(Wn,"LogLevel",(()=>$n),(e=>$n=e)),Pn(Wn,"default",(()=>tr),(e=>tr=e));var $n,Hn=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},Zn=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},qn="PeerJS: ";!function(e){e[e.Disabled=0]="Disabled",e[e.Errors=1]="Errors",e[e.Warnings=2]="Warnings",e[e.All=3]="All"}($n||($n={}));var Yn,Qn,Kn,Jn,Xn,er,tr=new(function(){function e(){this._logLevel=$n.Disabled}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){this._logLevel=e},enumerable:!1,configurable:!0}),e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logLevel>=$n.All&&this._print.apply(this,Zn([$n.All],Hn(e),!1))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logLevel>=$n.Warnings&&this._print.apply(this,Zn([$n.Warnings],Hn(e),!1))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logLevel>=$n.Errors&&this._print.apply(this,Zn([$n.Errors],Hn(e),!1))},e.prototype.setLogFunction=function(e){this._print=e},e.prototype._print=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=Zn([qn],Hn(t),!1);for(var o in r)r[o]instanceof Error&&(r[o]="("+r[o].name+") "+r[o].message);e>=$n.All?console.log.apply(console,Zn([],Hn(r),!1)):e>=$n.Warnings?console.warn.apply(console,Zn(["WARNING"],Hn(r),!1)):e>=$n.Errors&&console.error.apply(console,Zn(["ERROR"],Hn(r),!1))},e}()),nr={};Pn(nr,"Socket",(()=>ar),(e=>ar=e)),function(e){e.Data="data",e.Media="media"}(Yn||(Yn={})),function(e){e.BrowserIncompatible="browser-incompatible",e.Disconnected="disconnected",e.InvalidID="invalid-id",e.InvalidKey="invalid-key",e.Network="network",e.PeerUnavailable="peer-unavailable",e.SslUnavailable="ssl-unavailable",e.ServerError="server-error",e.SocketError="socket-error",e.SocketClosed="socket-closed",e.UnavailableID="unavailable-id",e.WebRTC="webrtc"}(Qn||(Qn={})),function(e){e.Binary="binary",e.BinaryUTF8="binary-utf8",e.JSON="json"}(Kn||(Kn={})),function(e){e.Message="message",e.Disconnected="disconnected",e.Error="error",e.Close="close"}(Jn||(Jn={})),function(e){e.Heartbeat="HEARTBEAT",e.Candidate="CANDIDATE",e.Offer="OFFER",e.Answer="ANSWER",e.Open="OPEN",e.Error="ERROR",e.IdTaken="ID-TAKEN",e.InvalidKey="INVALID-KEY",e.Leave="LEAVE",e.Expire="EXPIRE"}(Xn||(Xn={})),er=JSON.parse('{"name":"peerjs","version":"1.4.7","keywords":["peerjs","webrtc","p2p","rtc"],"description":"PeerJS client","homepage":"https://peerjs.com","bugs":{"url":"https://github.com/peers/peerjs/issues"},"repository":{"type":"git","url":"https://github.com/peers/peerjs"},"license":"MIT","contributors":["Michelle Bu <michelle@michellebu.com>","afrokick <devbyru@gmail.com>","ericz <really.ez@gmail.com>","Jairo <kidandcat@gmail.com>","Jonas Gloning <34194370+jonasgloning@users.noreply.github.com>","Jairo Caro-Accino Viciana <jairo@galax.be>","Carlos Caballero <carlos.caballero.gonzalez@gmail.com>","hc <hheennrryy@gmail.com>","Muhammad Asif <capripio@gmail.com>","PrashoonB <prashoonbhattacharjee@gmail.com>","Harsh Bardhan Mishra <47351025+HarshCasper@users.noreply.github.com>","akotynski <aleksanderkotbury@gmail.com>","lmb <i@lmb.io>","Jairooo <jairocaro@msn.com>","Moritz Stückler <moritz.stueckler@gmail.com>","Simon <crydotsnakegithub@gmail.com>","Denis Lukov <denismassters@gmail.com>","Philipp Hancke <fippo@andyet.net>","Hans Oksendahl <hansoksendahl@gmail.com>","Jess <jessachandler@gmail.com>","khankuan <khankuan@gmail.com>","DUODVK <kurmanov.work@gmail.com>","XiZhao <kwang1imsa@gmail.com>","Matthias Lohr <matthias@lohr.me>","=frank tree <=frnktrb@googlemail.com>","Andre Eckardt <aeckardt@outlook.com>","Chris Cowan <agentme49@gmail.com>","Alex Chuev <alex@chuev.com>","alxnull <alxnull@e.mail.de>","Yemel Jardi <angel.jardi@gmail.com>","Ben Parnell <benjaminparnell.94@gmail.com>","Benny Lichtner <bennlich@gmail.com>","fresheneesz <bitetrudpublic@gmail.com>","bob.barstead@exaptive.com <bob.barstead@exaptive.com>","chandika <chandika@gmail.com>","emersion <contact@emersion.fr>","Christopher Van <cvan@users.noreply.github.com>","eddieherm <edhermoso@gmail.com>","Eduardo Pinho <enet4mikeenet@gmail.com>","Evandro Zanatta <ezanatta@tray.net.br>","Gardner Bickford <gardner@users.noreply.github.com>","Gian Luca <gianluca.cecchi@cynny.com>","PatrickJS <github@gdi2290.com>","jonnyf <github@jonathanfoss.co.uk>","Hizkia Felix <hizkifw@gmail.com>","Hristo Oskov <hristo.oskov@gmail.com>","Isaac Madwed <i.madwed@gmail.com>","Ilya Konanykhin <ilya.konanykhin@gmail.com>","jasonbarry <jasbarry@me.com>","Jonathan Burke <jonathan.burke.1311@googlemail.com>","Josh Hamit <josh.hamit@gmail.com>","Jordan Austin <jrax86@gmail.com>","Joel Wetzell <jwetzell@yahoo.com>","xizhao <kevin.wang@cloudera.com>","Alberto Torres <kungfoobar@gmail.com>","Jonathan Mayol <mayoljonathan@gmail.com>","Jefferson Felix <me@jsfelix.dev>","Rolf Erik Lekang <me@rolflekang.com>","Kevin Mai-Husan Chia <mhchia@users.noreply.github.com>","Pepijn de Vos <pepijndevos@gmail.com>","JooYoung <qkdlql@naver.com>","Tobias Speicher <rootcommander@gmail.com>","Steve Blaurock <sblaurock@gmail.com>","Kyrylo Shegeda <shegeda@ualberta.ca>","Diwank Singh Tomer <singh@diwank.name>","Sören Balko <Soeren.Balko@gmail.com>","Arpit Solanki <solankiarpit1997@gmail.com>","Yuki Ito <yuki@gnnk.net>","Artur Zayats <zag2art@gmail.com>"],"funding":{"type":"opencollective","url":"https://opencollective.com/peer"},"collective":{"type":"opencollective","url":"https://opencollective.com/peer"},"files":["dist/*"],"sideEffects":["lib/global.ts","lib/supports.ts"],"main":"dist/bundler.cjs","module":"dist/bundler.mjs","browser-minified":"dist/peerjs.min.js","browser-unminified":"dist/peerjs.js","types":"dist/types.d.ts","engines":{"node":">= 10"},"targets":{"types":{"source":"lib/exports.ts"},"main":{"source":"lib/exports.ts","sourceMap":{"inlineSources":true}},"module":{"source":"lib/exports.ts","includeNodeModules":["eventemitter3"],"sourceMap":{"inlineSources":true}},"browser-minified":{"context":"browser","outputFormat":"global","optimize":true,"engines":{"browsers":"cover 99%, not dead"},"source":"lib/global.ts"},"browser-unminified":{"context":"browser","outputFormat":"global","optimize":false,"engines":{"browsers":"cover 99%, not dead"},"source":"lib/global.ts"}},"scripts":{"contributors":"git-authors-cli --print=false && prettier --write package.json && git add package.json package-lock.json && git commit -m \\"chore(contributors): update and sort contributors list\\"","check":"tsc --noEmit","watch":"parcel watch","build":"rm -rf dist && parcel build","prepublishOnly":"npm run build","test":"mocha -r ts-node/register -r jsdom-global/register test/**/*.ts","format":"prettier --write .","semantic-release":"semantic-release"},"devDependencies":{"@parcel/config-default":"^2.5.0","@parcel/packager-ts":"^2.5.0","@parcel/transformer-typescript-tsc":"^2.5.0","@parcel/transformer-typescript-types":"^2.5.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.18","chai":"^4.3.6","git-authors-cli":"^1.0.40","jsdom":"^19.0.0","jsdom-global":"^3.0.2","mocha":"^9.2.0","mock-socket":"8.0.5","parcel":"^2.5.0","parcel-transformer-tsc-sourcemaps":"^1.0.2","prettier":"^2.6.2","semantic-release":"^19.0.2","standard":"^16.0.4","ts-node":"^10.5.0","typescript":"^4.5.5"},"dependencies":{"@swc/helpers":"^0.3.13","eventemitter3":"^4.0.7","peerjs-js-binarypack":"1.0.1","webrtc-adapter":"^7.7.1"}}');var rr,or=(rr=function(e,t){return rr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},rr(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}rr(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ar=function(e){function t(t,n,r,o,a,i){void 0===i&&(i=5e3);var s=e.call(this)||this;s.pingInterval=i,s._disconnected=!0,s._messagesQueue=[];var c=t?"wss://":"ws://";return s._baseUrl=c+n+":"+r+o+"peerjs?key="+a,s}return or(t,e),t.prototype.start=function(e,t){var n=this;this._id=e;var r="".concat(this._baseUrl,"&id=").concat(e,"&token=").concat(t);!this._socket&&this._disconnected&&(this._socket=new WebSocket(r+"&version="+er.version),this._disconnected=!1,this._socket.onmessage=function(e){var t;try{t=JSON.parse(e.data),Wn.default.log("Server message received:",t)}catch(t){return void Wn.default.log("Invalid server message",e.data)}n.emit(Jn.Message,t)},this._socket.onclose=function(e){n._disconnected||(Wn.default.log("Socket closed.",e),n._cleanup(),n._disconnected=!0,n.emit(Jn.Disconnected))},this._socket.onopen=function(){n._disconnected||(n._sendQueuedMessages(),Wn.default.log("Socket open"),n._scheduleHeartbeat())})},t.prototype._scheduleHeartbeat=function(){var e=this;this._wsPingTimer=setTimeout((function(){e._sendHeartbeat()}),this.pingInterval)},t.prototype._sendHeartbeat=function(){if(this._wsOpen()){var e=JSON.stringify({type:Xn.Heartbeat});this._socket.send(e),this._scheduleHeartbeat()}else Wn.default.log("Cannot send heartbeat, because socket closed")},t.prototype._wsOpen=function(){return!!this._socket&&1===this._socket.readyState},t.prototype._sendQueuedMessages=function(){var e,t,n=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([],function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}(this._messagesQueue),!1);this._messagesQueue=[];try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),o=r.next();!o.done;o=r.next()){var a=o.value;this.send(a)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}},t.prototype.send=function(e){if(!this._disconnected)if(this._id)if(e.type){if(this._wsOpen()){var t=JSON.stringify(e);this._socket.send(t)}}else this.emit(Jn.Error,"Invalid message");else this._messagesQueue.push(e)},t.prototype.close=function(){this._disconnected||(this._cleanup(),this._disconnected=!0)},t.prototype._cleanup=function(){this._socket&&(this._socket.onopen=this._socket.onmessage=this._socket.onclose=null,this._socket.close(),this._socket=void 0),clearTimeout(this._wsPingTimer)},t}(jn.EventEmitter),ir={};Pn(ir,"MediaConnection",(()=>vr),(e=>vr=e));var sr={};Pn(sr,"Negotiator",(()=>dr),(e=>dr=e));var cr=function(){return cr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},cr.apply(this,arguments)},lr=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}c((r=r.apply(e,t||[])).next())}))},ur=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},dr=function(){function e(e){this.connection=e}return e.prototype.startConnection=function(e){var t=this._startPeerConnection();if(this.connection.peerConnection=t,this.connection.type===Yn.Media&&e._stream&&this._addTracksToConnection(e._stream,t),e.originator){if(this.connection.type===Yn.Data){var n=this.connection,r={ordered:!!e.reliable},o=t.createDataChannel(n.label,r);n.initialize(o)}this._makeOffer()}else this.handleSDP("OFFER",e.sdp)},e.prototype._startPeerConnection=function(){Wn.default.log("Creating RTCPeerConnection.");var e=new RTCPeerConnection(this.connection.provider.options.config);return this._setupListeners(e),e},e.prototype._setupListeners=function(e){var t=this,n=this.connection.peer,r=this.connection.connectionId,o=this.connection.type,a=this.connection.provider;Wn.default.log("Listening for ICE candidates."),e.onicecandidate=function(e){e.candidate&&e.candidate.candidate&&(Wn.default.log("Received ICE candidates for ".concat(n,":"),e.candidate),a.socket.send({type:Xn.Candidate,payload:{candidate:e.candidate,type:o,connectionId:r},dst:n}))},e.oniceconnectionstatechange=function(){switch(e.iceConnectionState){case"failed":Wn.default.log("iceConnectionState is failed, closing connections to "+n),t.connection.emit("error",new Error("Negotiation of connection to "+n+" failed.")),t.connection.close();break;case"closed":Wn.default.log("iceConnectionState is closed, closing connections to "+n),t.connection.emit("error",new Error("Connection to "+n+" closed.")),t.connection.close();break;case"disconnected":Wn.default.log("iceConnectionState changed to disconnected on the connection with "+n);break;case"completed":e.onicecandidate=Ln.noop}t.connection.emit("iceStateChanged",e.iceConnectionState)},Wn.default.log("Listening for data channel"),e.ondatachannel=function(e){Wn.default.log("Received data channel");var t=e.channel;a.getConnection(n,r).initialize(t)},Wn.default.log("Listening for remote stream"),e.ontrack=function(e){Wn.default.log("Received remote stream");var o=e.streams[0],i=a.getConnection(n,r);if(i.type===Yn.Media){var s=i;t._addStreamToMediaConnection(o,s)}}},e.prototype.cleanup=function(){Wn.default.log("Cleaning up PeerConnection to "+this.connection.peer);var e=this.connection.peerConnection;if(e){this.connection.peerConnection=null,e.onicecandidate=e.oniceconnectionstatechange=e.ondatachannel=e.ontrack=function(){};var t="closed"!==e.signalingState,n=!1;if(this.connection.type===Yn.Data){var r=this.connection.dataChannel;r&&(n=!!r.readyState&&"closed"!==r.readyState)}(t||n)&&e.close()}},e.prototype._makeOffer=function(){return lr(this,void 0,Promise,(function(){var e,t,n,r,o,a,i;return ur(this,(function(s){switch(s.label){case 0:e=this.connection.peerConnection,t=this.connection.provider,s.label=1;case 1:return s.trys.push([1,7,,8]),[4,e.createOffer(this.connection.options.constraints)];case 2:n=s.sent(),Wn.default.log("Created offer."),this.connection.options.sdpTransform&&"function"==typeof this.connection.options.sdpTransform&&(n.sdp=this.connection.options.sdpTransform(n.sdp)||n.sdp),s.label=3;case 3:return s.trys.push([3,5,,6]),[4,e.setLocalDescription(n)];case 4:return s.sent(),Wn.default.log("Set localDescription:",n,"for:".concat(this.connection.peer)),r={sdp:n,type:this.connection.type,connectionId:this.connection.connectionId,metadata:this.connection.metadata,browser:Ln.browser},this.connection.type===Yn.Data&&(o=this.connection,r=cr(cr({},r),{label:o.label,reliable:o.reliable,serialization:o.serialization})),t.socket.send({type:Xn.Offer,payload:r,dst:this.connection.peer}),[3,6];case 5:return"OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer"!=(a=s.sent())&&(t.emitError(Qn.WebRTC,a),Wn.default.log("Failed to setLocalDescription, ",a)),[3,6];case 6:return[3,8];case 7:return i=s.sent(),t.emitError(Qn.WebRTC,i),Wn.default.log("Failed to createOffer, ",i),[3,8];case 8:return[2]}}))}))},e.prototype._makeAnswer=function(){return lr(this,void 0,Promise,(function(){var e,t,n,r,o;return ur(this,(function(a){switch(a.label){case 0:e=this.connection.peerConnection,t=this.connection.provider,a.label=1;case 1:return a.trys.push([1,7,,8]),[4,e.createAnswer()];case 2:n=a.sent(),Wn.default.log("Created answer."),this.connection.options.sdpTransform&&"function"==typeof this.connection.options.sdpTransform&&(n.sdp=this.connection.options.sdpTransform(n.sdp)||n.sdp),a.label=3;case 3:return a.trys.push([3,5,,6]),[4,e.setLocalDescription(n)];case 4:return a.sent(),Wn.default.log("Set localDescription:",n,"for:".concat(this.connection.peer)),t.socket.send({type:Xn.Answer,payload:{sdp:n,type:this.connection.type,connectionId:this.connection.connectionId,browser:Ln.browser},dst:this.connection.peer}),[3,6];case 5:return r=a.sent(),t.emitError(Qn.WebRTC,r),Wn.default.log("Failed to setLocalDescription, ",r),[3,6];case 6:return[3,8];case 7:return o=a.sent(),t.emitError(Qn.WebRTC,o),Wn.default.log("Failed to create answer, ",o),[3,8];case 8:return[2]}}))}))},e.prototype.handleSDP=function(e,t){return lr(this,void 0,Promise,(function(){var n,r,o,a;return ur(this,(function(i){switch(i.label){case 0:t=new RTCSessionDescription(t),n=this.connection.peerConnection,r=this.connection.provider,Wn.default.log("Setting remote description",t),o=this,i.label=1;case 1:return i.trys.push([1,5,,6]),[4,n.setRemoteDescription(t)];case 2:return i.sent(),Wn.default.log("Set remoteDescription:".concat(e," for:").concat(this.connection.peer)),"OFFER"!==e?[3,4]:[4,o._makeAnswer()];case 3:i.sent(),i.label=4;case 4:return[3,6];case 5:return a=i.sent(),r.emitError(Qn.WebRTC,a),Wn.default.log("Failed to setRemoteDescription, ",a),[3,6];case 6:return[2]}}))}))},e.prototype.handleCandidate=function(e){return lr(this,void 0,Promise,(function(){var t,n,r,o,a,i;return ur(this,(function(s){switch(s.label){case 0:Wn.default.log("handleCandidate:",e),t=e.candidate,n=e.sdpMLineIndex,r=e.sdpMid,o=this.connection.peerConnection,a=this.connection.provider,s.label=1;case 1:return s.trys.push([1,3,,4]),[4,o.addIceCandidate(new RTCIceCandidate({sdpMid:r,sdpMLineIndex:n,candidate:t}))];case 2:return s.sent(),Wn.default.log("Added ICE candidate for:".concat(this.connection.peer)),[3,4];case 3:return i=s.sent(),a.emitError(Qn.WebRTC,i),Wn.default.log("Failed to handleCandidate, ",i),[3,4];case 4:return[2]}}))}))},e.prototype._addTracksToConnection=function(e,t){if(Wn.default.log("add tracks from stream ".concat(e.id," to peer connection")),!t.addTrack)return Wn.default.error("Your browser does't support RTCPeerConnection#addTrack. Ignored.");e.getTracks().forEach((function(n){t.addTrack(n,e)}))},e.prototype._addStreamToMediaConnection=function(e,t){Wn.default.log("add stream ".concat(e.id," to media connection ").concat(t.connectionId)),t.addStream(e)},e}(),fr={};Pn(fr,"BaseConnection",(()=>hr),(e=>hr=e));var pr=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),hr=function(e){function t(t,n,r){var o=e.call(this)||this;return o.peer=t,o.provider=n,o.options=r,o._open=!1,o.metadata=r.metadata,o}return pr(t,e),Object.defineProperty(t.prototype,"open",{get:function(){return this._open},enumerable:!1,configurable:!0}),t}(jn.EventEmitter),mr=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),gr=function(){return gr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},gr.apply(this,arguments)},vr=function(e){function t(n,r,o){var a=e.call(this,n,r,o)||this;return a._localStream=a.options._stream,a.connectionId=a.options.connectionId||t.ID_PREFIX+Ln.randomToken(),a._negotiator=new sr.Negotiator(a),a._localStream&&a._negotiator.startConnection({_stream:a._localStream,originator:!0}),a}return mr(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return Yn.Media},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"localStream",{get:function(){return this._localStream},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"remoteStream",{get:function(){return this._remoteStream},enumerable:!1,configurable:!0}),t.prototype.addStream=function(t){Wn.default.log("Receiving stream",t),this._remoteStream=t,e.prototype.emit.call(this,"stream",t)},t.prototype.handleMessage=function(e){var t=e.type,n=e.payload;switch(e.type){case Xn.Answer:this._negotiator.handleSDP(t,n.sdp),this._open=!0;break;case Xn.Candidate:this._negotiator.handleCandidate(n.candidate);break;default:Wn.default.warn("Unrecognized message type:".concat(t," from peer:").concat(this.peer))}},t.prototype.answer=function(e,t){var n,r;if(void 0===t&&(t={}),this._localStream)Wn.default.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");else{this._localStream=e,t&&t.sdpTransform&&(this.options.sdpTransform=t.sdpTransform),this._negotiator.startConnection(gr(gr({},this.options._payload),{_stream:e}));var o=this.provider._getMessages(this.connectionId);try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(o),i=a.next();!i.done;i=a.next()){var s=i.value;this.handleMessage(s)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}this._open=!0}},t.prototype.close=function(){this._negotiator&&(this._negotiator.cleanup(),this._negotiator=null),this._localStream=null,this._remoteStream=null,this.provider&&(this.provider._removeConnection(this),this.provider=null),this.options&&this.options._stream&&(this.options._stream=null),this.open&&(this._open=!1,e.prototype.emit.call(this,"close"))},t.ID_PREFIX="mc_",t}(fr.BaseConnection),yr={};Pn(yr,"DataConnection",(()=>kr),(e=>kr=e));var br={};Pn(br,"EncodingQueue",(()=>Cr),(e=>Cr=e));var Ar=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Cr=function(e){function t(){var t=e.call(this)||this;return t.fileReader=new FileReader,t._queue=[],t._processing=!1,t.fileReader.onload=function(e){t._processing=!1,e.target&&t.emit("done",e.target.result),t.doNextTask()},t.fileReader.onerror=function(e){Wn.default.error("EncodingQueue error:",e),t._processing=!1,t.destroy(),t.emit("error",e)},t}return Ar(t,e),Object.defineProperty(t.prototype,"queue",{get:function(){return this._queue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this.queue.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"processing",{get:function(){return this._processing},enumerable:!1,configurable:!0}),t.prototype.enque=function(e){this.queue.push(e),this.processing||this.doNextTask()},t.prototype.destroy=function(){this.fileReader.abort(),this._queue=[]},t.prototype.doNextTask=function(){0!==this.size&&(this.processing||(this._processing=!0,this.fileReader.readAsArrayBuffer(this.queue.shift())))},t}(jn.EventEmitter),wr=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),kr=function(e){function t(n,r,o){var a=e.call(this,n,r,o)||this;return a.stringify=JSON.stringify,a.parse=JSON.parse,a._buffer=[],a._bufferSize=0,a._buffering=!1,a._chunkedData={},a._encodingQueue=new br.EncodingQueue,a.connectionId=a.options.connectionId||t.ID_PREFIX+Ln.randomToken(),a.label=a.options.label||a.connectionId,a.serialization=a.options.serialization||Kn.Binary,a.reliable=!!a.options.reliable,a._encodingQueue.on("done",(function(e){a._bufferedSend(e)})),a._encodingQueue.on("error",(function(){Wn.default.error("DC#".concat(a.connectionId,": Error occured in encoding from blob to arraybuffer, close DC")),a.close()})),a._negotiator=new sr.Negotiator(a),a._negotiator.startConnection(a.options._payload||{originator:!0}),a}return wr(t,e),Object.defineProperty(t.prototype,"type",{get:function(){return Yn.Data},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dataChannel",{get:function(){return this._dc},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bufferSize",{get:function(){return this._bufferSize},enumerable:!1,configurable:!0}),t.prototype.initialize=function(e){this._dc=e,this._configureDataChannel()},t.prototype._configureDataChannel=function(){var e=this;Ln.supports.binaryBlob&&!Ln.supports.reliable||(this.dataChannel.binaryType="arraybuffer"),this.dataChannel.onopen=function(){Wn.default.log("DC#".concat(e.connectionId," dc connection success")),e._open=!0,e.emit("open")},this.dataChannel.onmessage=function(t){Wn.default.log("DC#".concat(e.connectionId," dc onmessage:"),t.data),e._handleDataMessage(t)},this.dataChannel.onclose=function(){Wn.default.log("DC#".concat(e.connectionId," dc closed for:"),e.peer),e.close()}},t.prototype._handleDataMessage=function(t){var n=this,r=t.data,o=r.constructor,a=r;if(this.serialization===Kn.Binary||this.serialization===Kn.BinaryUTF8){if(o===Blob)return void Ln.blobToArrayBuffer(r,(function(e){var t=Ln.unpack(e);n.emit("data",t)}));if(o===ArrayBuffer)a=Ln.unpack(r);else if(o===String){var i=Ln.binaryStringToArrayBuffer(r);a=Ln.unpack(i)}}else this.serialization===Kn.JSON&&(a=this.parse(r));a.__peerData?this._handleChunk(a):e.prototype.emit.call(this,"data",a)},t.prototype._handleChunk=function(e){var t=e.__peerData,n=this._chunkedData[t]||{data:[],count:0,total:e.total};if(n.data[e.n]=e.data,n.count++,this._chunkedData[t]=n,n.total===n.count){delete this._chunkedData[t];var r=new Blob(n.data);this._handleDataMessage({data:r})}},t.prototype.close=function(){this._buffer=[],this._bufferSize=0,this._chunkedData={},this._negotiator&&(this._negotiator.cleanup(),this._negotiator=null),this.provider&&(this.provider._removeConnection(this),this.provider=null),this.dataChannel&&(this.dataChannel.onopen=null,this.dataChannel.onmessage=null,this.dataChannel.onclose=null,this._dc=null),this._encodingQueue&&(this._encodingQueue.destroy(),this._encodingQueue.removeAllListeners(),this._encodingQueue=null),this.open&&(this._open=!1,e.prototype.emit.call(this,"close"))},t.prototype.send=function(t,n){if(this.open)if(this.serialization===Kn.JSON)this._bufferedSend(this.stringify(t));else if(this.serialization===Kn.Binary||this.serialization===Kn.BinaryUTF8){var r=Ln.pack(t);if(!n&&r.size>Ln.chunkedMTU)return void this._sendChunks(r);Ln.supports.binaryBlob?this._bufferedSend(r):this._encodingQueue.enque(r)}else this._bufferedSend(t);else e.prototype.emit.call(this,"error",new Error("Connection is not open. You should listen for the `open` event before sending messages."))},t.prototype._bufferedSend=function(e){!this._buffering&&this._trySend(e)||(this._buffer.push(e),this._bufferSize=this._buffer.length)},t.prototype._trySend=function(e){var n=this;if(!this.open)return!1;if(this.dataChannel.bufferedAmount>t.MAX_BUFFERED_AMOUNT)return this._buffering=!0,setTimeout((function(){n._buffering=!1,n._tryBuffer()}),50),!1;try{this.dataChannel.send(e)}catch(e){return Wn.default.error("DC#:".concat(this.connectionId," Error when sending:"),e),this._buffering=!0,this.close(),!1}return!0},t.prototype._tryBuffer=function(){if(this.open&&0!==this._buffer.length){var e=this._buffer[0];this._trySend(e)&&(this._buffer.shift(),this._bufferSize=this._buffer.length,this._tryBuffer())}},t.prototype._sendChunks=function(e){var t,n,r=Ln.chunk(e);Wn.default.log("DC#".concat(this.connectionId," Try to send ").concat(r.length," chunks..."));try{for(var o=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(r),a=o.next();!a.done;a=o.next()){var i=a.value;this.send(i,!0)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}},t.prototype.handleMessage=function(e){var t=e.payload;switch(e.type){case Xn.Answer:this._negotiator.handleSDP(e.type,t.sdp);break;case Xn.Candidate:this._negotiator.handleCandidate(t.candidate);break;default:Wn.default.warn("Unrecognized message type:",e.type,"from peer:",this.peer)}},t.ID_PREFIX="dc_",t.MAX_BUFFERED_AMOUNT=8388608,t}(fr.BaseConnection),Sr={};Pn(Sr,"API",(()=>xr),(e=>xr=e));var _r=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function s(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}c((r=r.apply(e,t||[])).next())}))},Er=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},xr=function(){function e(e){this._options=e}return e.prototype._buildRequest=function(e){var t=this._options.secure?"https":"http",n=this._options,r=n.host,o=n.port,a=n.path,i=n.key,s=new URL("".concat(t,"://").concat(r,":").concat(o).concat(a).concat(i,"/").concat(e));return s.searchParams.set("ts","".concat(Date.now()).concat(Math.random())),s.searchParams.set("version",er.version),fetch(s.href,{referrerPolicy:this._options.referrerPolicy})},e.prototype.retrieveId=function(){return _r(this,void 0,Promise,(function(){var e,t,n;return Er(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this._buildRequest("id")];case 1:if(200!==(e=r.sent()).status)throw new Error("Error. Status:".concat(e.status));return[2,e.text()];case 2:throw t=r.sent(),Wn.default.error("Error retrieving ID",t),n="","/"===this._options.path&&this._options.host!==Ln.CLOUD_HOST&&(n=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),new Error("Could not get an ID from the server."+n);case 3:return[2]}}))}))},e.prototype.listAllPeers=function(){return _r(this,void 0,Promise,(function(){var e,t,n;return Er(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this._buildRequest("peers")];case 1:if(200!==(e=r.sent()).status){if(401===e.status)throw"",t=this._options.host===Ln.CLOUD_HOST?"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",new Error("It doesn't look like you have permission to list peers IDs. "+t);throw new Error("Error. Status:".concat(e.status))}return[2,e.json()];case 2:throw n=r.sent(),Wn.default.error("Error retrieving list peers",n),new Error("Could not get list peers from the server."+n);case 3:return[2]}}))}))},e}(),Tr=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pr=function(){return Pr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Pr.apply(this,arguments)},Rr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Or=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},Ir=function(e){function t(n,r){var o,a=e.call(this)||this;return a._id=null,a._lastServerId=null,a._destroyed=!1,a._disconnected=!1,a._open=!1,a._connections=new Map,a._lostMessages=new Map,n&&n.constructor==Object?r=n:n&&(o=n.toString()),r=Pr({debug:0,host:Ln.CLOUD_HOST,port:Ln.CLOUD_PORT,path:"/",key:t.DEFAULT_KEY,token:Ln.randomToken(),config:Ln.defaultConfig,referrerPolicy:"strict-origin-when-cross-origin"},r),a._options=r,"/"===a._options.host&&(a._options.host=window.location.hostname),a._options.path&&("/"!==a._options.path[0]&&(a._options.path="/"+a._options.path),"/"!==a._options.path[a._options.path.length-1]&&(a._options.path+="/")),void 0===a._options.secure&&a._options.host!==Ln.CLOUD_HOST?a._options.secure=Ln.isSecure():a._options.host==Ln.CLOUD_HOST&&(a._options.secure=!0),a._options.logFunction&&Wn.default.setLogFunction(a._options.logFunction),Wn.default.logLevel=a._options.debug||0,a._api=new Sr.API(r),a._socket=a._createServerConnection(),Ln.supports.audioVideo||Ln.supports.data?o&&!Ln.validateId(o)?(a._delayedAbort(Qn.InvalidID,'ID "'.concat(o,'" is invalid')),a):(o?a._initialize(o):a._api.retrieveId().then((function(e){return a._initialize(e)})).catch((function(e){return a._abort(Qn.ServerError,e)})),a):(a._delayedAbort(Qn.BrowserIncompatible,"The current browser does not support WebRTC"),a)}return Tr(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this._options},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"open",{get:function(){return this._open},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"socket",{get:function(){return this._socket},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"connections",{get:function(){var e,t,n=Object.create(null);try{for(var r=Rr(this._connections),o=r.next();!o.done;o=r.next()){var a=Or(o.value,2),i=a[0],s=a[1];n[i]=s}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"destroyed",{get:function(){return this._destroyed},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disconnected",{get:function(){return this._disconnected},enumerable:!1,configurable:!0}),t.prototype._createServerConnection=function(){var e=this,t=new nr.Socket(this._options.secure,this._options.host,this._options.port,this._options.path,this._options.key,this._options.pingInterval);return t.on(Jn.Message,(function(t){e._handleMessage(t)})),t.on(Jn.Error,(function(t){e._abort(Qn.SocketError,t)})),t.on(Jn.Disconnected,(function(){e.disconnected||(e.emitError(Qn.Network,"Lost connection to server."),e.disconnect())})),t.on(Jn.Close,(function(){e.disconnected||e._abort(Qn.SocketClosed,"Underlying socket is already closed.")})),t},t.prototype._initialize=function(e){this._id=e,this.socket.start(e,this._options.token)},t.prototype._handleMessage=function(e){var t,n,r=e.type,o=e.payload,a=e.src;switch(r){case Xn.Open:this._lastServerId=this.id,this._open=!0,this.emit("open",this.id);break;case Xn.Error:this._abort(Qn.ServerError,o.msg);break;case Xn.IdTaken:this._abort(Qn.UnavailableID,'ID "'.concat(this.id,'" is taken'));break;case Xn.InvalidKey:this._abort(Qn.InvalidKey,'API KEY "'.concat(this._options.key,'" is invalid'));break;case Xn.Leave:Wn.default.log("Received leave message from ".concat(a)),this._cleanupPeer(a),this._connections.delete(a);break;case Xn.Expire:this.emitError(Qn.PeerUnavailable,"Could not connect to peer ".concat(a));break;case Xn.Offer:var i=o.connectionId;if((p=this.getConnection(a,i))&&(p.close(),Wn.default.warn("Offer received for existing Connection ID:".concat(i))),o.type===Yn.Media){var s=new ir.MediaConnection(a,this,{connectionId:i,_payload:o,metadata:o.metadata});p=s,this._addConnection(a,p),this.emit("call",s)}else{if(o.type!==Yn.Data)return void Wn.default.warn("Received malformed connection type:".concat(o.type));var c=new yr.DataConnection(a,this,{connectionId:i,_payload:o,metadata:o.metadata,label:o.label,serialization:o.serialization,reliable:o.reliable});p=c,this._addConnection(a,p),this.emit("connection",c)}var l=this._getMessages(i);try{for(var u=Rr(l),d=u.next();!d.done;d=u.next()){var f=d.value;p.handleMessage(f)}}catch(e){t={error:e}}finally{try{d&&!d.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}break;default:if(!o)return void Wn.default.warn("You received a malformed message from ".concat(a," of type ").concat(r));var p;i=o.connectionId,(p=this.getConnection(a,i))&&p.peerConnection?p.handleMessage(e):i?this._storeMessage(i,e):Wn.default.warn("You received an unrecognized message:",e)}},t.prototype._storeMessage=function(e,t){this._lostMessages.has(e)||this._lostMessages.set(e,[]),this._lostMessages.get(e).push(t)},t.prototype._getMessages=function(e){var t=this._lostMessages.get(e);return t?(this._lostMessages.delete(e),t):[]},t.prototype.connect=function(e,t){if(void 0===t&&(t={}),this.disconnected)return Wn.default.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),void this.emitError(Qn.Disconnected,"Cannot connect to new Peer after disconnecting from server.");var n=new yr.DataConnection(e,this,t);return this._addConnection(e,n),n},t.prototype.call=function(e,t,n){if(void 0===n&&(n={}),this.disconnected)return Wn.default.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),void this.emitError(Qn.Disconnected,"Cannot connect to new Peer after disconnecting from server.");if(t){var r=new ir.MediaConnection(e,this,Pr(Pr({},n),{_stream:t}));return this._addConnection(e,r),r}Wn.default.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.")},t.prototype._addConnection=function(e,t){Wn.default.log("add connection ".concat(t.type,":").concat(t.connectionId," to peerId:").concat(e)),this._connections.has(e)||this._connections.set(e,[]),this._connections.get(e).push(t)},t.prototype._removeConnection=function(e){var t=this._connections.get(e.peer);if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}this._lostMessages.delete(e.connectionId)},t.prototype.getConnection=function(e,t){var n,r,o=this._connections.get(e);if(!o)return null;try{for(var a=Rr(o),i=a.next();!i.done;i=a.next()){var s=i.value;if(s.connectionId===t)return s}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}return null},t.prototype._delayedAbort=function(e,t){var n=this;setTimeout((function(){n._abort(e,t)}),0)},t.prototype._abort=function(e,t){Wn.default.error("Aborting!"),this.emitError(e,t),this._lastServerId?this.disconnect():this.destroy()},t.prototype.emitError=function(e,t){var n;Wn.default.error("Error:",t),(n="string"==typeof t?new Error(t):t).type=e,this.emit("error",n)},t.prototype.destroy=function(){this.destroyed||(Wn.default.log("Destroy peer with ID:".concat(this.id)),this.disconnect(),this._cleanup(),this._destroyed=!0,this.emit("close"))},t.prototype._cleanup=function(){var e,t;try{for(var n=Rr(this._connections.keys()),r=n.next();!r.done;r=n.next()){var o=r.value;this._cleanupPeer(o),this._connections.delete(o)}}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}this.socket.removeAllListeners()},t.prototype._cleanupPeer=function(e){var t,n,r=this._connections.get(e);if(r)try{for(var o=Rr(r),a=o.next();!a.done;a=o.next())a.value.close()}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}},t.prototype.disconnect=function(){if(!this.disconnected){var e=this.id;Wn.default.log("Disconnect peer with ID:".concat(e)),this._disconnected=!0,this._open=!1,this.socket.close(),this._lastServerId=e,this._id=null,this.emit("disconnected",e)}},t.prototype.reconnect=function(){if(this.disconnected&&!this.destroyed)Wn.default.log("Attempting reconnection to server with ID ".concat(this._lastServerId)),this._disconnected=!1,this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(this.disconnected||this.open)throw new Error("Peer ".concat(this.id," cannot reconnect because it is not disconnected from the server!"));Wn.default.error("In a hurry? We're still trying to make the initial connection!")}},t.prototype.listAllPeers=function(e){var t=this;void 0===e&&(e=function(e){}),this._api.listAllPeers().then((function(t){return e(t)})).catch((function(e){return t._abort(Qn.ServerError,e)}))},t.DEFAULT_KEY="peerjs",t}(jn.EventEmitter),Mr=Dn.Peer;function Lr(e){return function(e){if(Array.isArray(e))return pt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ht(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function jr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nr(e,t,n){return t&&jr(e.prototype,t),n&&jr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Br(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var zr=globalThis.console;const Fr=Nr((function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Dr(this,e),Br(this,"handleLog",(function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];t.onLog.apply(t,[e].concat(r)),t.tag.length>0&&r.unshift(t.tag),zr[e].apply(zr,r)})),Br(this,"debug",this.handleLog.bind(null,"debug")),Br(this,"log",this.handleLog.bind(null,"log")),Br(this,"info",this.handleLog.bind(null,"info")),Br(this,"warn",this.handleLog.bind(null,"warn")),Br(this,"error",this.handleLog.bind(null,"error"));var r=n.tag,o=void 0===r?"":r,a=n.onLog,i=void 0===a?function(){}:a;this.tag=o,this.onLog=i}));var Ur=[],Gr=function(e,t){for(var n="".concat(e),r="".concat(t),o=n.charCodeAt(0),a=r.charCodeAt(r.length-1),i=[],s=o;s<=a;s+=1)i.push(String.fromCharCode(s));return i};const Vr=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.prefix,r=void 0===n?"":n,o=t.length,a=void 0===o?6:o,i=t.candidates,s=void 0===i?Gr("a","z").concat(Gr("A","Z")).concat(Gr(0,9)):i,c=t.candidateStr,l=void 0===c?s.join(""):c,u=Array.from({length:a}).map((function(){return l[Math.floor(l.length*Math.random())]})).join(""),d="".concat(r).concat(u);return Ur.includes(d)?e(t):(Ur.push(d),d)};var Wr=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Vr();Dr(this,e),Br(this,"selfIsOnline",!1),this.selfId=t,this.logger=new Fr({tag:"RC<".concat(t,">")})}return Nr(e,[{key:"peer",get:function(){return this.selfPeer}},{key:"id",get:function(){return this.selfId}},{key:"isOnline",get:function(){return this.selfIsOnline}}]),e}();Wr.prototype.eventHandlerList={},Wr.prototype.addEventListener=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=null!==(n=this.eventHandlerList[e])&&void 0!==n?n:[],a=r.once,i=void 0!==a&&a,s=o.every((function(e){return e.handler!==t||e.once!==i}));s&&(this.eventHandlerList[e]=[].concat(Lr(o),[{handler:t,once:i}]))},Wr.prototype.removeEventListener=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=null!==(n=this.eventHandlerList[e])&&void 0!==n?n:[],a=r.once,i=void 0!==a&&a,s=o.findIndex((function(e){return e.handler===t&&e.once===i}));-1!==s&&(this.eventHandlerList[e]=o.slice(0,s).concat(o.slice(s+1)))},Wr.prototype.dispatchEvent=function(e){for(var t,n=this,r=arguments.length,o=new Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];var i=null!==(t=this.eventHandlerList[e])&&void 0!==t?t:[];this.eventHandlerList[e]=i.filter((function(e){var t=e.handler,r=e.once;return t.apply(n,o),!r}))};var $r="#decline-call";function Hr(e){var t=this,n=e.peer;return new Promise((function(r,o){e.off("open"),e.on("open",(function(){t.logger.log("Data connection open"),t.connectionList[n]={dataConnection:e},t.dispatchEvent("connecteddata",n,e),r()})),e.off("iceStateChanged"),e.on("iceStateChanged",(function(e){t.logger.log("Data connection iceStateChanged",e)})),e.off("error"),e.on("error",(function(e){t.logger.warn("Data connection error",e),delete t.connectionList[n],o(e)})),e.off("data"),e.on("data",(function(e){t.logger.log("Data connection data",e),t.dispatchEvent("data",n,e)})),e.off("close"),e.on("close",(function(){t.logger.log("Data connection close"),t.disconnect(n)}))}))}function Zr(e){var t=this,n=e.peer;return new Promise((function(r,o){var a=function e(r,a){r===n&&a===$r&&(t.removeEventListener("data",e),o(Error("Declined")))};e.off("stream"),e.on("stream",(function(o){t.logger.log("Peer call connection stream",o),t.connectionList[n].mediaConnection=e,t.dispatchEvent("connectedmedia",n,e),t.removeEventListener("data",a),r(o)})),e.off("iceStateChanged"),e.on("iceStateChanged",(function(e){t.logger.log("Peer call connection iceStateChanged",e)})),e.off("error"),e.on("error",(function(e){var r;t.logger.warn("Peer call connection error",e),t.removeEventListener("data",a),o(e),null!==(r=t.connectionList)&&void 0!==r&&r[n].mediaConnection&&delete t.connectionList[n].mediaConnection})),e.off("close"),e.on("close",(function(){t.logger.log("Peer call connection close"),delete t.connectionList[n].mediaConnection,t.dispatchEvent("hangup",n,e.metadata),t.removeEventListener("data",a)})),t.addEventListener("data",a)}))}Wr.prototype.connectionList={},Wr.prototype.connect=function(e){var t=this;return new Promise((function(e,n){if(t.peer&&t.isOnline)e(void 0);else{var r=new Mr(t.id);t.disconnect(),t.logger.log("Peer connecting",t.id),r.off("open"),r.on("open",(function(n){t.selfPeer=r,t.selfId=n,t.selfIsOnline=!0,t.dispatchEvent("online"),e(void 0)})),r.off("error"),r.on("error",(function(e){t.logger.warn("Peer error",e),n(e)})),r.off("disconnected"),r.on("disconnected",(function(){t.logger.log("Peer disconnected"),t.selfIsOnline=!1,t.connectionList={},t.dispatchEvent("offline")})),r.off("connection"),r.on("connection",(function(e){t.logger.log("Peer connection",e),Hr.call(t,e)})),r.off("close"),r.on("close",(function(){t.logger.log("Peer close"),t.selfIsOnline=!1,t.connectionList={},t.dispatchEvent("offline")})),r.off("call"),r.on("call",(function(e){var n=e.peer,r=e.metadata,o=e.answer;t.logger.log("Peer call",e),t.dispatchEvent("call",n,function(){var r=vt(bt().mark((function r(a,i){return bt().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(a){r.next=4;break}return r.next=3,t.sendMessage(n,$r);case 3:return r.abrupt("return",void 0);case 4:return o.call(e,i),r.abrupt("return",Zr.call(t,e));case 6:case"end":return r.stop()}}),r)})));return function(e,t){return r.apply(this,arguments)}}(),r)}))}})).then((function(){return new Promise((function(n,r){if(void 0===e||t.connectionList[e])n(void 0);else{var o=t.selfPeer;o.off("error"),o.on("error",(function(e){t.logger.warn("Peer error",e),r(e)}));var a=o.connect(e);n(Hr.call(t,a))}}))})).then((function(){return console.log(100)})).catch((function(e){throw console.warn(110,e),e}))},Wr.prototype.disconnect=function(e){var t=this;if(e){var n=this.connectionList[e];if(n){var r=n.dataConnection,o=n.mediaConnection;r.close(),null==o||o.close(),delete this.connectionList[e]}}else{Object.keys(this.connectionList).forEach((function(e){t.disconnect(e)}));var a=this.selfPeer;a&&(a.disconnect(),a.destroy()),this.selfPeer=void 0,this.selfIsOnline=!1,this.connectionList={},this.dispatchEvent("offline")}},Wr.prototype.sendMessage=function(){var e=vt(bt().mark((function e(t,n){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.connect(t);case 2:this.connectionList[t].dataConnection.send(n);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}(),Wr.prototype.sendFile=function(){var e=vt(bt().mark((function e(t,n){var r;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.connect(t);case 2:r=this.connectionList[t].dataConnection,this.logger.log("Send file",n,r),r.send(n);case 5:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}(),Wr.prototype.call=function(){var e=vt(bt().mark((function e(t,n){var r;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.connect(t);case 2:return r=this.peer.call(t,n),e.abrupt("return",Zr.call(this,r));case 4:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}();const qr=Wr;var Yr=(0,c.createContext)({connector:new qr,id:"",isOnline:!1,isDataConnected:!1,isMediaConnected:!1,peerId:null}),Qr=function(){return(0,c.useContext)(Yr)};const Kr=function(e){var t=e.children,n=(0,c.useMemo)((function(){return new URLSearchParams(globalThis.location.search)}),[]),r=(0,c.useMemo)((function(){var e;return null!==(e=n.get("id"))&&void 0!==e?e:void 0}),[n]),o=(0,c.useMemo)((function(){return new qr(r)}),[r]),a=mt((0,c.useState)(!1),2),i=a[0],s=a[1],l=mt((0,c.useState)(),2),u=l[0],d=l[1],f=mt((0,c.useState)(),2),p=f[0],h=f[1],m=mt((0,c.useState)(),2),g=m[0],v=m[1],y=(0,c.useCallback)((function(){return s(!0)}),[]),b=(0,c.useCallback)((function(){return s(!1)}),[]),A=(0,c.useCallback)((function(e,t){d(e),h(t)}),[]),C=(0,c.useCallback)((function(e,t){v(t)}),[]),w=(0,c.useMemo)((function(){return{connector:o,id:o.id,isOnline:i,isDataConnected:!!p,isMediaConnected:!!g,peerId:null!=u?u:null}}),[o,p,i,g,u]);return(0,c.useEffect)((function(){return o.addEventListener("online",y),o.addEventListener("offline",b),o.addEventListener("connecteddata",A),o.addEventListener("connectedmedia",C),function(){o.removeEventListener("online",y),o.removeEventListener("offline",b),o.removeEventListener("connecteddata",A),o.removeEventListener("connectedmedia",C)}}),[o,A,C,b,y]),c.createElement(Yr.Provider,{value:w},t)};var Jr=n(184),Xr=n.n(Jr),eo=n(379),to=n.n(eo),no=n(795),ro=n.n(no),oo=n(569),ao=n.n(oo),io=n(565),so=n.n(io),co=n(216),lo=n.n(co),uo=n(589),fo=n.n(uo),po=n(726),ho={};ho.styleTagTransform=fo(),ho.setAttributes=so(),ho.insert=ao().bind(null,"head"),ho.domAPI=ro(),ho.insertStyleElement=lo(),to()(po.Z,ho);const mo=po.Z&&po.Z.locals?po.Z.locals:void 0;var go=function(e){var t=e.type,n=void 0===t?"log":t,r=e.children,o=(0,c.useMemo)((function(){return Xr()(mo.message,mo[n])}),[n]);return c.createElement("div",{className:o},r)};const vo=c.memo(go);var yo=n(735),bo={};bo.styleTagTransform=fo(),bo.setAttributes=so(),bo.insert=ao().bind(null,"head"),bo.domAPI=ro(),bo.insertStyleElement=lo(),to()(yo.Z,bo);const Ao=yo.Z&&yo.Z.locals?yo.Z.locals:void 0;var Co=(0,c.createContext)({logger:new Fr,showLog:function(){},hideLog:function(){}});const wo=function(e){var t=e.tag,n=e.show,r=void 0===n||n,o=e.children,a=mt((0,c.useState)(r),2),i=a[0],s=a[1],l=(0,c.useReducer)((function(e,t){return e.concat(t)}),[]),u=mt(l,2),d=u[0],f=u[1],p=(0,c.useMemo)((function(){return Xr()(Ao.logger,Br({},Ao.show,i))}),[i]),h=(0,c.useMemo)((function(){return new Fr({tag:t,onLog:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];f({type:e,timestamp:Date.now(),message:n.map((function(e){return"".concat(e)})).join(" ")})}})}),[t]),m=(0,c.useMemo)((function(){return{logger:h,showLog:function(){return s(!0)},hideLog:function(){return s(!1)}}}),[h]);return c.createElement(Co.Provider,{value:m},o,c.createElement("div",{className:p},d.map((function(e){var t=e.type,n=e.timestamp,r=e.message;return c.createElement(vo,{key:"".concat(t,"-").concat(r,"-").concat(n),type:t,timestamp:n},r)}))))};function ko(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var So=(0,c.createContext)({disabledAll:!1});const _o=function(e){var t=e.disabledAll,n=e.children,r=(0,c.useMemo)((function(){return{disabledAll:t}}),[t]);return c.createElement(So.Provider,{value:r},n)};var Eo=n(211),xo={};xo.styleTagTransform=fo(),xo.setAttributes=so(),xo.insert=ao().bind(null,"head"),xo.domAPI=ro(),xo.insertStyleElement=lo(),to()(Eo.Z,xo);const To=Eo.Z&&Eo.Z.locals?Eo.Z.locals:void 0;var Po=["disabled","className","onClick","stopPropagation"];const Ro=function(e){var t=e.disabled,n=void 0!==t&&t,r=e.className,o=e.onClick,a=e.stopPropagation,i=ko(e,Po),s=(0,c.useMemo)((function(){return Xr()(To.clickable,{disabled:n},r)}),[r,n]),l=(0,c.useCallback)((function(e){a&&e.stopPropagation(),n||null==o||o(e)}),[n,o,a]);return c.createElement("span",u({className:s,onClick:l},i))};var Oo=n(861),Io={};Io.styleTagTransform=fo(),Io.setAttributes=so(),Io.insert=ao().bind(null,"head"),Io.domAPI=ro(),Io.insertStyleElement=lo(),to()(Oo.Z,Io);const Mo=Oo.Z&&Oo.Z.locals?Oo.Z.locals:void 0,Lo=function(e){var t=e.disabled,n=void 0!==t&&t,r=e.highlight,o=void 0!==r&&r,a=e.onClick,i=e.children,s=(0,c.useContext)(So).disabledAll,l=(0,c.useMemo)((function(){return Xr()(Mo.button,Br({},Mo.highlight,o))}),[o]);return c.createElement(Ro,{disabled:s||n,className:l,stopPropagation:n,onClick:a},i)},Do=function(){var e=vt(bt().mark((function e(t){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){setTimeout(e,t)})));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();var jo=n(389),No={};No.styleTagTransform=fo(),No.setAttributes=so(),No.insert=ao().bind(null,"head"),No.domAPI=ro(),No.insertStyleElement=lo(),to()(jo.Z,No);const Bo=jo.Z&&jo.Z.locals?jo.Z.locals:void 0,zo=function(e){var t=e.show,n=e.className,r=e.title,o=e.button,a=e.buttons,i=void 0===a?o?[o]:[]:a,s=e.highlight,l=void 0!==s&&s,u=e.buttonOnlyOnce,d=void 0===u||u,f=e.onShown,p=e.onHidden,h=e.onClickOutside,m=e.hideOnClickOutside,g=void 0===m||m,v=e.children,y=mt((0,c.useState)(!1),2),b=y[0],A=y[1],C=mt((0,c.useState)(!1),2),w=C[0],k=C[1],S=(0,c.useMemo)((function(){var e;return Xr()(Bo.modal,(Br(e={},Bo.highlight,l),Br(e,Bo.show,b),e),n)}),[l,b,n]),_=(0,c.useCallback)((function(){!1!==(null==h?void 0:h())&&g&&A(!1)}),[g,h]),E=(0,c.useCallback)((function(e){e.stopPropagation()}),[]),x=(0,c.useCallback)((function(){d&&k(!0),void 0===t&&A(!1)}),[d,t,k]),T=(0,c.useCallback)((function(){b?null==f||f():null==p||p()}),[p,f,b]);return(0,c.useEffect)((function(){var e=null==t||t;Do(e?100:0).then((function(){A(e),e&&k(!1)}))}),[t]),c.createElement(_o,{disabledAll:w},c.createElement("div",{className:S,onClick:_},c.createElement("div",{className:Xr()(Bo.box,"modal-box"),onClick:E,onTransitionEnd:T},c.createElement("div",{className:Xr()(Bo.head,"modal-head")},r),c.createElement("div",{className:Xr()(Bo.body,"modal-body")},v),c.createElement("div",{className:Xr()(Bo.foot,"modal-foot"),onClick:x},i))))};var Fo=["onOk","children"];const Uo=function(e){var t=e.onOk,n=e.children,r=ko(e,Fo);return c.createElement(zo,u({},r,{button:c.createElement(Lo,{key:"ok",highlight:!0,onClick:t},"OK")}),n)};var Go=["onOk","onCancel","children"];const Vo=function(e){var t=e.onOk,n=e.onCancel,r=e.children,o=ko(e,Go);return c.createElement(zo,u({},o,{buttons:[c.createElement(Lo,{key:"cancel",onClick:n},"Cancel"),c.createElement(Lo,{key:"ok",highlight:!0,onClick:t},"OK")]}),r)};var Wo=["onYes","onNo","children"];const $o=function(e){var t=e.onYes,n=e.onNo,r=e.children,o=ko(e,Wo);return c.createElement(zo,u({},o,{buttons:[c.createElement(Lo,{key:"no",onClick:n},"No"),c.createElement(Lo,{key:"yes",highlight:!0,onClick:t},"Yes")]}),r)};var Ho,Zo,qo,Yo=(0,c.createContext)({askYesNo:(qo=vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",!0);case 1:case"end":return e.stop()}}),e)}))),function(){return qo.apply(this,arguments)}),notice:(Zo=vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)}))),function(){return Zo.apply(this,arguments)}),askOkCancel:(Ho=vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",!0);case 1:case"end":return e.stop()}}),e)}))),function(){return Ho.apply(this,arguments)})}),Qo=function(){return(0,c.useContext)(Yo)};const Ko=function(e){var t=e.children,n=mt((0,c.useState)([]),2),r=n[0],o=n[1],a=(0,c.useCallback)((function(e){o((function(t){return t.filter((function(t){return t.id!==e}))}))}),[]),i=(0,c.useMemo)((function(){return{askYesNo:function(e,t){return new Promise((function(n){o((function(r){var o=Date.now(),i=c.createElement($o,u({onYes:function(){return n(!0)},onNo:function(){return n(!1)},onHidden:function(){var e;a(o),null==t||null===(e=t.onHidden)||void 0===e||e.call(t)}},t),e);return r.concat({id:o,Modal:i})}))}))},notice:function(e,t){return new Promise((function(n){o((function(r){var o=Date.now(),i=c.createElement(Uo,u({onOk:function(){return n()},onHidden:function(){var e;a(o),null==t||null===(e=t.onHidden)||void 0===e||e.call(t)}},t),e);return r.concat({id:o,Modal:i})}))}))},askOkCancel:function(e,t){return new Promise((function(n){o((function(r){var o=Date.now(),i=c.createElement(Vo,u({onOk:function(){return n(!0)},onCancel:function(){return n(!1)},onHidden:function(){var e;a(o),null==t||null===(e=t.onHidden)||void 0===e||e.call(t)}},t),e);return r.concat({id:o,Modal:i})}))}))}}}),[a]);return c.createElement(c.Fragment,null,c.createElement(Yo.Provider,{value:i},t),r.map((function(e){var t=e.id,n=e.Modal;return(0,c.cloneElement)(n,{key:t})})))};var Jo,Xo=ft.iframe(Jo||(Jo=i(["\n  margin: 1rem;\n  width: 30vw;\n  height: calc(30vw * 16 / 10);\n  border: 1px solid #333;\n"]))),ea=new Fr({tag:"[Test]"}),ta=Vr(),na=Vr();const ra=function(){var e="/photoer/".concat(na,"?id=").concat(ta),t="/camera?id=".concat(na);return ea.log({photoerId:ta,cameraId:na}),c.createElement("div",null,c.createElement(Xo,{src:e}),c.createElement(Xo,{src:t}))};var oa=n(680),aa={};aa.styleTagTransform=fo(),aa.setAttributes=so(),aa.insert=ao().bind(null,"head"),aa.domAPI=ro(),aa.insertStyleElement=lo(),to()(oa.Z,aa);const ia=oa.Z&&oa.Z.locals?oa.Z.locals:void 0,sa=function(e){var t=e.photo,n=e.selected,r=e.onClick,o=(0,c.useMemo)((function(){return URL.createObjectURL(t)}),[t]);return(0,c.useEffect)((function(){return function(){URL.revokeObjectURL(o)}}),[o]),c.createElement("img",{className:Xr()(ia.photo,Br({},ia.selected,n)),src:o,onClick:r})};var ca=n(734),la={};la.styleTagTransform=fo(),la.setAttributes=so(),la.insert=ao().bind(null,"head"),la.domAPI=ro(),la.insertStyleElement=lo(),to()(ca.Z,la);const ua=ca.Z&&ca.Z.locals?ca.Z.locals:void 0,da=function(e){var t=e.show,n=e.photos,r=e.onClickOutside,o=e.onShare,a=e.onSave,i=mt((0,c.useState)([]),2),s=i[0],l=i[1],u=(0,c.useMemo)((function(){var e=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.ymd,r=void 0===n||n,o=t.hms,a=void 0===o||o,i=t.year,s=void 0===i||i,c=t.second,l=void 0===c||c,u=t.ymdSplit,d=void 0===u?"-":u,f=t.hmsSplit,p=void 0===f?":":f,h=t.ymdHmsSplit,m=void 0===h?" ":h,g=[];if(r){var v=[(e.getMonth()+1).toString().padStart(2,"0"),e.getDate().toString().padStart(2,"0")];s&&v.unshift(e.getFullYear().toString()),g.push(v.join(d))}if(a){var y=[e.getHours().toString().padStart(2,"0"),e.getMinutes().toString().padStart(2,"0")];l&&y.push(e.getSeconds().toString().padStart(2,"0")),g.push(y.join(p))}return g.join(m)}(new Date,{ymdSplit:"",hmsSplit:"",ymdHmsSplit:"_"});return s.slice().sort((function(e,t){return e-t})).map((function(t,r){var o=n[t],a=o.type,i="photo_".concat(e,"_").concat((r+1).toString().padStart(2,"0"),".png");return new File([o],i,{type:a})}))}),[n,s]),d=(0,c.useCallback)((function(e){var t=s.indexOf(e);l(-1===t?s.concat(e):s.slice(0,t).concat(s.slice(t+1)))}),[s]),f=(0,c.useMemo)((function(){return c.createElement(Lo,{disabled:0===s.length,onClick:function(){o(u)}},"Share")}),[s.length,o,u]),p=(0,c.useMemo)((function(){return c.createElement(Lo,{highlight:!0,disabled:0===s.length,onClick:function(){a(u)}},"Save")}),[a,s.length,u]),h=(0,c.useMemo)((function(){return[f,p]}),[f,p]);return c.createElement(zo,{show:t,className:ua["photo-management-modal"],hideOnClickOutside:!1,onClickOutside:r,buttons:h,buttonOnlyOnce:!1},n.map((function(e,t){return c.createElement(sa,{key:"photo-".concat(t),photo:e,selected:s.includes(t),onClick:function(){return d(t)}})})))};var fa=n(630),pa={};pa.styleTagTransform=fo(),pa.setAttributes=so(),pa.insert=ao().bind(null,"head"),pa.domAPI=ro(),pa.insertStyleElement=lo(),to()(fa.Z,pa);const ha=fa.Z&&fa.Z.locals?fa.Z.locals:void 0,ma=function(e){var t=e.url,n=e.onShown,r=mt((0,c.useState)(!1),2),o=r[0],a=r[1],i=(0,c.useCallback)((function(){a(!0)}),[]),s=(0,c.useCallback)((function(){null==n||n()}),[n]);return c.createElement("div",{className:Xr()(ha.photo,Br({},ha.loaded,o)),onAnimationEnd:s},c.createElement("img",{src:t,onLoad:i}))};var ga=n(704),va={};va.styleTagTransform=fo(),va.setAttributes=so(),va.insert=ao().bind(null,"head"),va.domAPI=ro(),va.insertStyleElement=lo(),to()(ga.Z,va);const ya=ga.Z&&ga.Z.locals?ga.Z.locals:void 0,ba=function(e){var t=e.photos,n=e.className,r=e.aspectRatio,o=void 0===r?1:r,a=mt((0,c.useState)([]),2),i=a[0],s=a[1],l=(0,c.useMemo)((function(){return{"--aspect-ratio":o}}),[o]),u=(0,c.useMemo)((function(){return t[t.length-1]}),[t]),d=(0,c.useMemo)((function(){return u?URL.createObjectURL(u):null}),[u]),f=(0,c.useCallback)((function(){s((function(e){return e.slice(1,e.length)}))}),[]);return(0,c.useEffect)((function(){return d&&s((function(e){return e.concat(d)})),function(){d&&URL.revokeObjectURL(d)}}),[d]),c.createElement("div",{className:Xr()(ya["photo-list"],n),style:l},i.map((function(e,t){return c.createElement(ma,{key:e,url:e,onShown:t>0?f:void 0})})))};var Aa=n(110),Ca={};Ca.styleTagTransform=fo(),Ca.setAttributes=so(),Ca.insert=ao().bind(null,"head"),Ca.domAPI=ro(),Ca.insertStyleElement=lo(),to()(Aa.Z,Ca);const wa=Aa.Z&&Aa.Z.locals?Aa.Z.locals:void 0,ka=function(e){var t=e.children;return c.createElement("div",{className:wa.tag},t)};var Sa=n(247),_a={};_a.styleTagTransform=fo(),_a.setAttributes=so(),_a.insert=ao().bind(null,"head"),_a.domAPI=ro(),_a.insertStyleElement=lo(),to()(Sa.Z,_a);const Ea=Sa.Z&&Sa.Z.locals?Sa.Z.locals:void 0,xa=function(e){var t=e.className,n=e.onShot,r=e.disabled,o=void 0!==r&&r;return c.createElement(Ro,{disabled:o,className:Xr()(Ea.shutter,t),stopPropagation:!0,onClick:n})};var Ta=n(201),Pa={};Pa.styleTagTransform=fo(),Pa.setAttributes=so(),Pa.insert=ao().bind(null,"head"),Pa.domAPI=ro(),Pa.insertStyleElement=lo(),to()(Ta.Z,Pa);const Ra=Ta.Z&&Ta.Z.locals?Ta.Z.locals:void 0;var Oa=["className","children"];const Ia=function(e){var t=e.className,n=e.children,r=ko(e,Oa);return c.createElement("div",u({className:Xr()(Ra.frame,t)},r),n)};var Ma=n(118),La={};La.styleTagTransform=fo(),La.setAttributes=so(),La.insert=ao().bind(null,"head"),La.domAPI=ro(),La.insertStyleElement=lo(),to()(Ma.Z,La);const Da=Ma.Z&&Ma.Z.locals?Ma.Z.locals:void 0,ja=function(e){var t=e.children,n=e.show,r=void 0===n?!!t:n,o=e.fullscreen,a=void 0!==o&&o,i=e.highlight,s=void 0!==i&&i,l=mt((0,c.useState)(t),2),u=l[0],d=l[1],f=(0,c.useMemo)((function(){var e;return Xr()(Da.loading,(Br(e={},Da.fullscreen,a),Br(e,Da.highlight,s),Br(e,Da.hide,!r),e))}),[a,s,r]);return(0,c.useEffect)((function(){void 0!==t&&d(t)}),[t]),c.createElement("div",{className:f},c.createElement("div",{className:Da.message},u))};var Na=function(e){return navigator.canShare(e)};const Ba=function(){var e=vt(bt().mark((function e(t){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Na(t)){e.next=2;break}throw Error("Cannot share data");case 2:return e.next=4,navigator.share(t);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();var za=n(37),Fa={};Fa.styleTagTransform=fo(),Fa.setAttributes=so(),Fa.insert=ao().bind(null,"head"),Fa.domAPI=ro(),Fa.insertStyleElement=lo(),to()(za.Z,Fa);const Ua=za.Z&&za.Z.locals?za.Z.locals:void 0;var Ga=["className"];const Va=function(e){var t=e.className,n=ko(e,Ga);return c.createElement(Ro,u({className:Xr()(Ua.button,t)},n))},Wa=function(e){var t=e.show,n=e.onConfirm,r=e.onCancel,o=e.onChange,a=e.onKeyDown,i=e.children,s=mt((0,c.useState)(""),2),l=s[0],u=s[1],d=(0,c.useRef)(null),f=(0,c.useCallback)((function(){n(l)}),[l,n]),p=(0,c.useCallback)((function(e){var t=e.target.value;u(t),null==o||o(t)}),[o]),h=(0,c.useCallback)((function(e){var t=e.key;if(a){var n=e.altKey,r=e.ctrlKey,o=e.metaKey,i=e.shiftKey;null==a||a({key:t,altKey:n,ctrlKey:r,metaKey:o,shiftKey:i})}"Enter"===t&&f()}),[a,f]);return(0,c.useEffect)((function(){var e;t&&(null===(e=d.current)||void 0===e||e.focus())}),[t]),c.createElement(Vo,{show:t,onOk:f,onCancel:r},c.createElement("p",null,i),c.createElement("input",{ref:d,onChange:p,onKeyDown:h}))};var $a=n(689),Ha={};Ha.styleTagTransform=fo(),Ha.setAttributes=so(),Ha.insert=ao().bind(null,"head"),Ha.domAPI=ro(),Ha.insertStyleElement=lo(),to()($a.Z,Ha);const Za=$a.Z&&$a.Z.locals?$a.Z.locals:void 0,qa=function(e){var t=e.show,n=e.shareUrl,r=e.shareText,o=e.connectText,a=e.askConnectText,i=e.onConnect,s=e.children,l=Qr().isOnline,u=mt((0,c.useState)(!1),2),d=u[0],f=u[1],p=(0,c.useCallback)((function(){return f(!1)}),[]),h=(0,c.useCallback)((function(){return f(!0)}),[]),m=(0,c.useCallback)((function(){return Ba({url:n})}),[n]),g=(0,c.useCallback)((function(e){f(!1),i(e)}),[i]);return c.createElement(zo,{show:t,className:Za["share-and-connect-modal"],hideOnClickOutside:!1},c.createElement("p",null,s),c.createElement(Va,{disabled:!l,onClick:m},r),c.createElement(Va,{disabled:!l,onClick:h},o),c.createElement(Wa,{show:d,onCancel:p,onConfirm:g},a))};var Ya=n(728),Qa={};Qa.styleTagTransform=fo(),Qa.setAttributes=so(),Qa.insert=ao().bind(null,"head"),Qa.domAPI=ro(),Qa.insertStyleElement=lo(),to()(Ya.Z,Qa);const Ka=Ya.Z&&Ya.Z.locals?Ya.Z.locals:void 0;var Ja=["className","srcObject"];const Xa=(0,c.forwardRef)((function(e,t){var n=e.className,r=e.srcObject,o=ko(e,Ja),a=!!r,i=(0,c.useCallback)((function(e){e&&(r&&(e.srcObject=r),t&&("function"==typeof t?t(e):t.current=e))}),[t,r]);return c.createElement("div",{className:Xr()(Ka.video,n,Br({},Ka.show,a))},c.createElement("video",u({},o,{ref:i,autoPlay:!0})))})),ei=function(){var e=vt(bt().mark((function e(t){var n,r,o,a,i=arguments;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:0,e.next=3,Promise.all([t,Do(n)]);case 3:return r=e.sent,o=mt(r,1),a=o[0],e.abrupt("return",a);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();function ti(e){return ti="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ti(e)}const ni=function e(t,n){var r={},o=null!=n?n:{};return Object.keys(t).concat(Object.keys(o)).filter((function(e,t,n){return n.indexOf(e)===t})).forEach((function(n){var a=t[n],i=o[n];"object"===ti(i)?"object"===ti(a)?r[n]=e(a,i):r[n]=e(i):Object.prototype.hasOwnProperty.call(o,n)?r[n]=i:r[n]=a})),r};var ri={video:{focusMode:"continuous"}},oi=function(){var e=vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",navigator.mediaDevices.enumerateDevices());case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ai=function(){var e=vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,oi();case 2:return e.abrupt("return",e.sent.filter((function(e){return"videoinput"===e.kind})));case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),ii=function(){var e=vt(bt().mark((function e(){var t,n=arguments;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.length>0&&void 0!==n[0]?n[0]:ri,e.abrupt("return",navigator.mediaDevices.getUserMedia(ni(ri,t)));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),si=function(e){e.getTracks().forEach((function(e){return e.stop()}))},ci=n(63),li={};li.styleTagTransform=fo(),li.setAttributes=so(),li.insert=ao().bind(null,"head"),li.domAPI=ro(),li.insertStyleElement=lo(),to()(ci.Z,li);const ui=ci.Z&&ci.Z.locals?ci.Z.locals:void 0,di=function(e){var t=e.className,n=e.targetId,r=e.mediaStreamGenerator,o=e.shareUrlGenerator,a=e.shareText,i=e.connectText,s=e.askConnectText,l=e.waitingConnectionText,u=e.onShot,d=e.onData,f=e.onCall,p=e.onHangUp,h=e.children,m=e.mediaStreamConverter,g=void 0===m?function(e){return{major:e.local,minor:e.remote}}:m,v=e.showTakePhotoAnimation,y=void 0!==v&&v,b=e.afterTakePhotoAnimation,A=Qo(),C=A.notice,w=A.askYesNo,k=Qr(),S=k.connector,_=k.isOnline,E=k.isDataConnected,x=k.isMediaConnected,T=k.id,P=(0,c.useMemo)((function(){return new Fr({tag:"[".concat(T,"]")})}),[T]),R=mt((0,c.useState)(),2),O=R[0],I=R[1],M=(0,c.useRef)({}),L=mt((0,c.useState)(),2),D=L[0],j=L[1],N=mt((0,c.useState)(),2),B=N[0],z=N[1],F=mt((0,c.useState)(),2),U=F[0],G=F[1],V=(0,c.useRef)(null),W=(0,c.useMemo)((function(){return o(T)}),[o,T]),$=(0,c.useCallback)(vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",r?r():ii());case 1:case"end":return e.stop()}}),e)}))),[r]),H=(0,c.useCallback)((function(){var e=M.current.local;if(!e)throw ReferenceError("Local media stream not ready");var t=e.clone();return t.getTracks().forEach((function(e){var t,n,r=e.getCapabilities(),o=r.width,a=r.height;e.applyConstraints({width:{max:Math.round(Number(null!==(t=null==o?void 0:o.max)&&void 0!==t?t:0)/10)},height:{max:Math.round(Number(null!==(n=null==a?void 0:a.max)&&void 0!==n?n:0)/10)},frameRate:15})})),t}),[]),Z=(0,c.useCallback)(function(){var e=vt(bt().mark((function e(t){var n,r,o,a,i,s;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=M.current.local,P.log("Calling peer <".concat(t,">")),I("Calling to <".concat(t,">")),e.prev=3,n){e.next=6;break}throw ReferenceError("Local media stream not ready");case 6:return r=H(),G(r),e.next=10,S.connect(t);case 10:return e.next=12,S.call(t,r);case 12:o=e.sent,a=g({local:M.current.local,remote:o}),i=a.major,s=a.minor,P.log("Connected"),I("Connected"),M.current.remote=o,z(i),j(s);case 19:return e.prev=19,I(void 0),e.finish(19);case 22:case"end":return e.stop()}}),e,null,[[3,,19,22]])})));return function(t){return e.apply(this,arguments)}}(),[P,H,S,g]),q=(0,c.useCallback)(function(){var e=vt(bt().mark((function e(t){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==t.length){e.next=2;break}throw ReferenceError("No ID for connection");case 2:return e.prev=2,e.next=5,Z(t);case 5:e.next=11;break;case 7:e.prev=7,e.t0=e.catch(2),P.warn("".concat(e.t0)),C("".concat(e.t0));case 11:case"end":return e.stop()}}),e,null,[[2,7]])})));return function(t){return e.apply(this,arguments)}}(),[Z,P,C]),Y=(0,c.useCallback)((function(e,t){!1!==d(t)?P.log("DATA",t):P.log("Ignored data")}),[P,d]),Q=(0,c.useCallback)(function(){var e=vt(bt().mark((function e(t,n){var r,o,a,i,s,c;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(P.log("Get call from <".concat(t,">")),I("Get call from <".concat(t,">")),!1!==f(t)){e.next=5;break}return P.log("Ignored call"),e.abrupt("return");case 5:return e.next=7,w("Accept peer from <".concat(t,">?"));case 7:if(r=e.sent,e.prev=8,r){e.next=14;break}throw P.log("Declined call from <".concat(t,">")),C("Declined call"),n(!1),Error("Declined call");case 14:return o=H(),G(o),e.next=18,n(!0,o);case 18:if(a=e.sent,P.log("Received remote media stream",a),I("Received"),a){e.next=23;break}throw ReferenceError("Not receive remote media stream");case 23:i=g({local:M.current.local,remote:a}),s=i.major,c=i.minor,M.current.remote=a,z(s),j(c),e.next=33;break;case 29:e.prev=29,e.t0=e.catch(8),P.warn("".concat(e.t0)),C("".concat(e.t0));case 33:return e.prev=33,I(void 0),e.finish(33);case 36:case"end":return e.stop()}}),e,null,[[8,29,33,36]])})));return function(t,n){return e.apply(this,arguments)}}(),[w,H,P,g,C,f]),K=(0,c.useCallback)((function(e){P.log("HANGUP"),j(void 0),z(void 0),M.current={},p(e)}),[P,p]),J=(0,c.useCallback)((function(){u({major:B,minor:D})}),[D,u,B]),X=(0,c.useCallback)((function(){y&&(null==b||b())}),[b,y]),ee=(0,c.useCallback)(vt(bt().mark((function e(){var t,r,o,a,i;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n?"<".concat(n,">"):"server",P.log("Connecting to ".concat(t)),I("Connecting to ".concat(t)),e.next=5,ei(S.connect(),500);case 5:return P.log("Connected to ".concat(t)),I("Connected"),e.next=9,Do(500);case 9:return P.log("Initializing local media stream"),I("Initializing camera"),e.next=13,$();case 13:if(r=e.sent,o=g({local:r}),a=o.major,i=o.minor,P.log("Initialized local media stream"),I("Initialized"),M.current.local=r,z(a),j(i),!n){e.next=25;break}return e.next=23,Do(500);case 23:return e.next=25,Z(n);case 25:return e.next=27,Do(0);case 27:I(void 0);case 28:case"end":return e.stop()}}),e)}))),[Z,S,$,P,g,n]),te=(0,c.useCallback)((function(){P.warn("offline"),z(void 0),j(void 0)}),[P]);return(0,c.useEffect)((function(){try{ee()}catch(e){P.warn("".concat(e)),C("".concat(e))}}),[ee,P,C]),(0,c.useEffect)((function(){return E&&(S.addEventListener("call",Q,{once:!0}),S.addEventListener("data",Y)),x&&(S.addEventListener("hangup",K,{once:!0}),S.addEventListener("offline",te,{once:!0})),function(){E&&(S.removeEventListener("call",Q),S.removeEventListener("data",Y)),x&&(S.removeEventListener("hangup",K),S.removeEventListener("offline",te))}}),[S,E,x,Y,Q,K,te]),(0,c.useEffect)((function(){return function(){U&&si(U)}}),[U]),(0,c.useEffect)((function(){return function(){D&&(si(D),G(void 0))}}),[D]),(0,c.useEffect)((function(){return function(){B&&si(B)}}),[B]),(0,c.useEffect)((function(){var e=V.current;e&&(y?e.pause():e.play())}),[y]),c.createElement(Ia,{className:Xr()(ui["camera-view"],t)},h,c.createElement(qa,{show:!x,shareUrl:W,onConnect:q,shareText:a,connectText:i,askConnectText:s},l),c.createElement(Ia,{className:Xr()(ui.major,Br({},ui["taking-photo"],y)),onAnimationEnd:X},c.createElement(Xa,{ref:V,srcObject:B})),c.createElement(Xa,{className:ui.minor,srcObject:D}),c.createElement(xa,{className:ui.shutter,disabled:!_,onShot:J}),c.createElement(ja,null,O))};var fi=n(901),pi={};pi.styleTagTransform=fo(),pi.setAttributes=so(),pi.insert=ao().bind(null,"head"),pi.domAPI=ro(),pi.insertStyleElement=lo(),to()(fi.Z,pi);const hi=fi.Z&&fi.Z.locals?fi.Z.locals:void 0;var mi=new Fr({tag:"[Camera]"});const gi=function(){var e=L().targetId,t=Qr().id,n=Qo().notice,r=mt((0,c.useState)(),2),o=r[0],a=r[1],i=mt((0,c.useState)(!1),2),s=i[0],l=i[1],u=mt((0,c.useState)([]),2),d=u[0],f=u[1],p=mt((0,c.useState)(1),2),h=p[0],m=p[1],g=mt((0,c.useState)(!1),2),v=g[0],y=g[1],b=(0,c.useCallback)((function(){return y(!0)}),[]),A=(0,c.useCallback)((function(){return y(!1)}),[]),C=(0,c.useCallback)((function(e){return new URL("/photoer/".concat(e),globalThis.location.href).toString()}),[]),w=(0,c.useCallback)(vt(bt().mark((function e(){var t,n,r;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o){e.next=2;break}return e.abrupt("return");case 2:return t=o.getVideoTracks()[0],n=new ImageCapture(t),l(!0),e.next=7,n.takePhoto({fillLightMode:"auto",redEyeReduction:!0});case 7:r=e.sent,f((function(e){return e.concat(r)})),l(!1);case 10:case"end":return e.stop()}}),e)}))),[o]),k=w,S=(0,c.useCallback)((function(e){var t=e;mi.log("DATA",e),/^#/.test(t)&&(mi.log("MESSAGE",t.substring(1)),"photo"===t.substring(1))&&(mi.log("GOTO TAKE PHOTO"),w())}),[w]),_=(0,c.useCallback)((function(){mi.log("Closed")}),[]),E=(0,c.useCallback)(vt(bt().mark((function e(){var t,n;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ai();case 2:return t=e.sent,n=t.find((function(e){return/^microsoft/i.test(e.label)})),e.abrupt("return",ii({video:{deviceId:null==n?void 0:n.deviceId}}));case 5:case"end":return e.stop()}}),e)}))),[]),x=(0,c.useCallback)((function(e){var t=e.local,n=e.remote;return a(t),{major:t,minor:n}}),[]),T=(0,c.useCallback)((function(e){e.forEach((function(e,t){setTimeout((function(){!function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.name,n=document.createElement("a"),r=URL.createObjectURL(e);n.download=t,n.href=r,n.style.position="fixed",n.style.top="100%",document.body.append(n),n.click(),URL.revokeObjectURL(r),n.remove()}(e)}),100*t)}))}),[]),P=(0,c.useCallback)(function(){var e=vt(bt().mark((function e(t){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Ba({files:t});case 3:e.next=8;break;case 5:e.prev=5,e.t0=e.catch(0),n("".concat(e.t0));case 8:case"end":return e.stop()}}),e,null,[[0,5]])})));return function(t){return e.apply(this,arguments)}}(),[n]);return(0,c.useEffect)((function(){var e=mt(d,1)[0];if(e){var t=new Image,n=URL.createObjectURL(e);t.addEventListener("load",(function(){var e=t.naturalWidth,r=t.naturalHeight;m(e/r),URL.revokeObjectURL(n)})),t.src=n}}),[d]),c.createElement(di,{className:hi.camera,targetId:e,shareText:"Share Camera",connectText:"Connect Photoer",askConnectText:"Connect to photoer",waitingConnectionText:"Waiting for photoer to connect",mediaStreamGenerator:E,mediaStreamConverter:x,shareUrlGenerator:C,onShot:k,onCall:function(){return!0},onData:S,onHangUp:_,showTakePhotoAnimation:s},c.createElement(ka,null,"Camera #",t),c.createElement(Ro,{className:hi["photo-list"],onClick:b},c.createElement(ba,{aspectRatio:h,photos:d})),c.createElement(da,{show:v,photos:d,onClickOutside:A,onShare:P,onSave:T}))};var vi=n(48),yi={};yi.styleTagTransform=fo(),yi.setAttributes=so(),yi.insert=ao().bind(null,"head"),yi.domAPI=ro(),yi.insertStyleElement=lo(),to()(vi.Z,yi);const bi=vi.Z&&vi.Z.locals?vi.Z.locals:void 0;var Ai=new Fr({tag:"[Photoer]"});const Ci=function(){var e=L().targetId,t=Qr(),n=t.connector,r=t.id,o=t.peerId,a=(0,c.useCallback)((function(e){return new URL("/camera/".concat(e),globalThis.location.href).toString()}),[]),i=(0,c.useCallback)((function(){n.sendMessage(o,"#photo")}),[n,o]),s=(0,c.useCallback)((function(e){Ai.log("DATA",e)}),[]),l=(0,c.useCallback)((function(){Ai.log("Closed")}),[]),u=(0,c.useCallback)(vt(bt().mark((function e(){var t,n;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ai();case 2:return t=e.sent,n=t.find((function(e){return/front$/i.test(e.label)})),e.abrupt("return",ii({video:{deviceId:null==n?void 0:n.deviceId}}));case 5:case"end":return e.stop()}}),e)}))),[]),d=(0,c.useCallback)((function(e){var t=e.local;return{major:e.remote,minor:t}}),[]);return c.createElement(di,{className:bi.photoer,targetId:e,shareText:"Share Photoer",connectText:"Connect Camera",askConnectText:"Connect to camera",waitingConnectionText:"Waiting for camera to connect",mediaStreamGenerator:u,mediaStreamConverter:d,shareUrlGenerator:a,onShot:i,onCall:function(){return!0},onData:s,onHangUp:l},c.createElement(ka,null,"Photoer #",r))};var wi=n(641),ki={};ki.styleTagTransform=fo(),ki.setAttributes=so(),ki.insert=ao().bind(null,"head"),ki.domAPI=ro(),ki.insertStyleElement=lo(),to()(wi.Z,ki);const Si=wi.Z&&wi.Z.locals?wi.Z.locals:void 0;var _i=new Fr({tag:"[Welcome]"});const Ei=function(){var e=M(),t=Qr(),n=t.connector,r=t.isOnline,o=Qo().notice,a=mt((0,c.useState)(!0),2),i=a[0],s=a[1],l=mt((0,c.useState)("Connecting to server"),2),u=l[0],d=l[1],f=(0,c.useCallback)(vt(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,ei(n.connect(),1e3);case 3:_i.log("Connected to server: ".concat(n.id)),d("Connected to server: ".concat(n.id)),s(!1),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),o("".concat(e.t0));case 11:case"end":return e.stop()}}),e,null,[[0,8]])}))),[n,o]),p=(0,c.useCallback)((function(){e("/photoer")}),[e]),h=(0,c.useCallback)((function(){e("/camera")}),[e]);return(0,c.useEffect)((function(){f()}),[f]),c.createElement(Ia,{className:Si.welcome},c.createElement(Va,{disabled:!r,onClick:p},"As Photoer"),c.createElement(Va,{disabled:!r,onClick:h},"As Camera"),c.createElement(ja,{show:i},u))};var xi,Ti=ft.div(xi||(xi=i(["\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  font-family: Arial, Helvetica, sans-serif;\n"]))),Pi=function(){return c.createElement(Ti,null,c.createElement(wo,{show:!1},c.createElement(Ko,null,c.createElement(Kr,null,c.createElement(z,null,c.createElement(N,null,c.createElement(D,{path:"photoer/:targetId",element:c.createElement(Ci,null)}),c.createElement(D,{path:"photoer",element:c.createElement(Ci,null)}),c.createElement(D,{path:"camera/:targetId",element:c.createElement(gi,null)}),c.createElement(D,{path:"camera",element:c.createElement(gi,null)}),c.createElement(D,{path:"test",element:c.createElement(ra,null)}),c.createElement(D,{path:"*",element:c.createElement(Ei,null)})))))))};l.createRoot(document.getElementById("root")).render(c.createElement(Pi,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,